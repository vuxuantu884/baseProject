{"ast":null,"code":"import axios from \"axios\";\nimport querystring from \"querystring\";\nimport { store } from \"@redux\";\nimport { PATH_LINE_LOGIN } from \"./../Configs/routes\";\n\nconst lineHeader = baseURL => ({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  },\n  paramsSerializer: params => querystring.stringify(params)\n});\n\nexport const LineApi = baseUrl => {\n  //hook state\n  const axiosClient = axios.create(lineHeader(baseUrl));\n  const lineIntegration = store.getState().merchant.lineIntegration;\n  return {\n    login: code => {\n      var _lineIntegration$line, _lineIntegration$line2;\n\n      const url = \"/token\"; //WHAT: login body\n\n      const redirectUrl = process.env.REACT_APP_WEB_URL + PATH_LINE_LOGIN;\n      const grantType = \"authorization_code\"; // const clientId = \"1656727135\";\n\n      const clientId = (lineIntegration === null || lineIntegration === void 0 ? void 0 : (_lineIntegration$line = lineIntegration.lineLoginApi) === null || _lineIntegration$line === void 0 ? void 0 : _lineIntegration$line.channelID) || \"\"; // const clientSecret = \"18752f7b4229f30c61b29dba473aa20e\";\n\n      const clientSecret = (lineIntegration === null || lineIntegration === void 0 ? void 0 : (_lineIntegration$line2 = lineIntegration.lineLoginApi) === null || _lineIntegration$line2 === void 0 ? void 0 : _lineIntegration$line2.channelSecret) || \"\"; //WHAT: setup xxx-form-data body\n\n      const accessTokenBody = new URLSearchParams();\n      accessTokenBody.append(\"grant_type\", grantType);\n      accessTokenBody.append(\"code\", code);\n      accessTokenBody.append(\"redirect_uri\", redirectUrl);\n      accessTokenBody.append(\"client_id\", clientId);\n      accessTokenBody.append(\"client_secret\", clientSecret);\n      return axiosClient.post(url, accessTokenBody);\n    }\n  };\n};\n_c = LineApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineApi\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/API/line.ts"],"names":["axios","querystring","store","PATH_LINE_LOGIN","lineHeader","baseURL","headers","paramsSerializer","params","stringify","LineApi","baseUrl","axiosClient","create","lineIntegration","getState","merchant","login","code","url","redirectUrl","process","env","REACT_APP_WEB_URL","grantType","clientId","lineLoginApi","channelID","clientSecret","channelSecret","accessTokenBody","URLSearchParams","append","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAGA,SAAUC,KAAV,QAAuB,QAAvB;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,MAAMC,UAAU,GAAIC,OAAD,KAAsB;AACrCA,EAAAA,OADqC;AAErCC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAF4B;AAKrCC,EAAAA,gBAAgB,EAAGC,MAAD,IAAiBP,WAAW,CAACQ,SAAZ,CAAsBD,MAAtB;AALE,CAAtB,CAAnB;;AAQA,OAAO,MAAME,OAAO,GAAIC,OAAD,IAAqB;AACxC;AACA,QAAMC,WAAW,GAAGZ,KAAK,CAACa,MAAN,CAAaT,UAAU,CAACO,OAAD,CAAvB,CAApB;AACA,QAAMG,eAAe,GAAGZ,KAAK,CAACa,QAAN,GAAiBC,QAAjB,CAA0BF,eAAlD;AAEA,SAAO;AACHG,IAAAA,KAAK,EAAGC,IAAD,IAAkB;AAAA;;AACrB,YAAMC,GAAG,GAAG,QAAZ,CADqB,CAGrB;;AACA,YAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgCpB,eAApD;AACA,YAAMqB,SAAS,GAAG,oBAAlB,CALqB,CAMrB;;AACA,YAAMC,QAAQ,GAAG,CAAAX,eAAe,SAAf,IAAAA,eAAe,WAAf,qCAAAA,eAAe,CAAEY,YAAjB,gFAA+BC,SAA/B,KAA4C,EAA7D,CAPqB,CAQrB;;AACA,YAAMC,YAAY,GAAG,CAAAd,eAAe,SAAf,IAAAA,eAAe,WAAf,sCAAAA,eAAe,CAAEY,YAAjB,kFAA+BG,aAA/B,KAAgD,EAArE,CATqB,CAUrB;;AACA,YAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAD,MAAAA,eAAe,CAACE,MAAhB,CAAuB,YAAvB,EAAqCR,SAArC;AACAM,MAAAA,eAAe,CAACE,MAAhB,CAAuB,MAAvB,EAA+Bd,IAA/B;AACAY,MAAAA,eAAe,CAACE,MAAhB,CAAuB,cAAvB,EAAuCZ,WAAvC;AACAU,MAAAA,eAAe,CAACE,MAAhB,CAAuB,WAAvB,EAAoCP,QAApC;AACAK,MAAAA,eAAe,CAACE,MAAhB,CAAuB,eAAvB,EAAwCJ,YAAxC;AAEA,aAAOhB,WAAW,CAACqB,IAAZ,CAAiBd,GAAjB,EAAsBW,eAAtB,CAAP;AACH;AApBE,GAAP;AAsBH,CA3BM;KAAMpB,O","sourcesContent":["import axios from \"axios\";\nimport querystring from \"querystring\";\n\n\nimport {  store } from \"@redux\";\nimport { PATH_LINE_LOGIN } from \"./../Configs/routes\";\n\nconst lineHeader = (baseURL: string) => ({\n    baseURL,\n    headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    paramsSerializer: (params: any) => querystring.stringify(params),\n});\n\nexport const LineApi = (baseUrl: string) => {\n    //hook state\n    const axiosClient = axios.create(lineHeader(baseUrl));\n    const lineIntegration = store.getState().merchant.lineIntegration;\n\n    return {\n        login: (code: string) => {\n            const url = \"/token\";\n\n            //WHAT: login body\n            const redirectUrl = process.env.REACT_APP_WEB_URL + PATH_LINE_LOGIN;\n            const grantType = \"authorization_code\";\n            // const clientId = \"1656727135\";\n            const clientId = lineIntegration?.lineLoginApi?.channelID || \"\";\n            // const clientSecret = \"18752f7b4229f30c61b29dba473aa20e\";\n            const clientSecret = lineIntegration?.lineLoginApi?.channelSecret || \"\";\n            //WHAT: setup xxx-form-data body\n            const accessTokenBody = new URLSearchParams();\n            accessTokenBody.append(\"grant_type\", grantType);\n            accessTokenBody.append(\"code\", code);\n            accessTokenBody.append(\"redirect_uri\", redirectUrl);\n            accessTokenBody.append(\"client_id\", clientId);\n            accessTokenBody.append(\"client_secret\", clientSecret);\n\n            return axiosClient.post(url, accessTokenBody);\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}