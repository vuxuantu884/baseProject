{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Reward.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { rewardApi } from \"@api\";\nimport { ComponentRewardList } from \"@components\";\nimport { setLoading } from \"@redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModulesReward = () => {\n  _s();\n\n  const dispatch = useDispatch(); //page state\n\n  const [reward, setReward] = useState([]);\n  useEffect(() => {\n    (async () => {\n      dispatch(setLoading(true));\n      const res = await rewardApi.getListReward();\n      const data = res.data.docs; //WHAT: xu ly data thang IData\n\n      const quantities = data.map(item => item.quantity);\n      const quantitiesSet = Array.from(new Set(quantities));\n      const result = quantitiesSet.map(item => {\n        const res = data.filter(values => values.quantity === item);\n        return {\n          quantity: item,\n          reward: res\n        };\n      });\n      setReward(result); // setReward(data);\n\n      dispatch(setLoading(false));\n    })();\n  }, []);\n\n  const handleClick = value => {//\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: reward && /*#__PURE__*/_jsxDEV(ComponentRewardList, {\n      data: reward,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }, this)\n  }, void 0, false);\n};\n\n_s(ModulesReward, \"MwY14du8YzzO2/+G+EExnYgvQCU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ModulesReward;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModulesReward\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Reward.tsx"],"names":["useEffect","useState","useDispatch","rewardApi","ComponentRewardList","setLoading","ModulesReward","dispatch","reward","setReward","res","getListReward","data","docs","quantities","map","item","quantity","quantitiesSet","Array","from","Set","result","filter","values","handleClick","value"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,QAA0B,MAA1B;AACA,SAASC,mBAAT,QAAoC,aAApC;AAEA,SAASC,UAAT,QAA2B,QAA3B;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CAD+B,CAE/B;;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAgB,EAAhB,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACTO,MAAAA,QAAQ,CAACF,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,YAAMK,GAAG,GAAG,MAAMP,SAAS,CAACQ,aAAV,EAAlB;AACA,YAAMC,IAAI,GAAGF,GAAG,CAACE,IAAJ,CAASC,IAAtB,CAHS,CAIT;;AACA,YAAMC,UAAU,GAAGF,IAAI,CAACG,GAAL,CAAUC,IAAD,IAAUA,IAAI,CAACC,QAAxB,CAAnB;AACA,YAAMC,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQP,UAAR,CAAX,CAAtB;AACA,YAAMQ,MAAM,GAAGJ,aAAa,CAACH,GAAd,CAAmBC,IAAD,IAAU;AACvC,cAAMN,GAAG,GAAGE,IAAI,CAACW,MAAL,CAAaC,MAAD,IAAYA,MAAM,CAACP,QAAP,KAAoBD,IAA5C,CAAZ;AACA,eAAO;AACHC,UAAAA,QAAQ,EAAED,IADP;AAEHR,UAAAA,MAAM,EAAEE;AAFL,SAAP;AAIH,OANc,CAAf;AAOAD,MAAAA,SAAS,CAACa,MAAD,CAAT,CAdS,CAeT;;AACAf,MAAAA,QAAQ,CAACF,UAAU,CAAC,KAAD,CAAX,CAAR;AACH,KAjBD;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,QAAMoB,WAAW,GAAIC,KAAD,IAAoB,CACpC;AACH,GAFD;;AAIA,sBAAO;AAAA,cAAGlB,MAAM,iBAAI,QAAC,mBAAD;AAAqB,MAAA,IAAI,EAAEA,MAA3B;AAAmC,MAAA,WAAW,EAAEiB;AAAhD;AAAA;AAAA;AAAA;AAAA;AAAb,mBAAP;AACH,CA/BM;;GAAMnB,a;UACQJ,W;;;KADRI,a","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { rewardApi } from \"@api\";\nimport { ComponentRewardList } from \"@components\";\nimport { IReward, IDataReward } from \"@interfaces\";\nimport { setLoading } from \"@redux\";\n\nexport const ModulesReward = () => {\n    const dispatch = useDispatch();\n    //page state\n    const [reward, setReward] = useState<IDataReward[]>([]);\n\n    useEffect(() => {\n        (async () => {\n            dispatch(setLoading(true));\n            const res = await rewardApi.getListReward();\n            const data = res.data.docs as IReward[];\n            //WHAT: xu ly data thang IData\n            const quantities = data.map((item) => item.quantity) as number[];\n            const quantitiesSet = Array.from(new Set(quantities));\n            const result = quantitiesSet.map((item) => {\n                const res = data.filter((values) => values.quantity === item);\n                return {\n                    quantity: item,\n                    reward: res,\n                };\n            });\n            setReward(result);\n            // setReward(data);\n            dispatch(setLoading(false));\n        })();\n    }, []);\n\n    const handleClick = (value: IReward) => {\n        //\n    };\n\n    return <>{reward && <ComponentRewardList data={reward} handleClick={handleClick} />}</>;\n};\n"]},"metadata":{},"sourceType":"module"}