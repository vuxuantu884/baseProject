{"ast":null,"code":"import axios from \"axios\";\n\nconst queryString = require(\"query-string\");\n\nimport { store } from \"@redux\";\nimport { enumClientIdEnum, enumHttpHeader } from \"@configs\";\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-Requested-With\": \"XMLHttpRequest\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(config => {\n  var _store$getState$auth$;\n\n  const token = (_store$getState$auth$ = store.getState().auth.auth) === null || _store$getState$auth$ === void 0 ? void 0 : _store$getState$auth$.accessToken;\n  config.headers[\"access-token\"] = token;\n  config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n  config.headers[enumHttpHeader.MerchantId] = store.getState().auth.merchantId || store.getState().merchant._id;\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response;\n  }\n\n  return response;\n}, error => {\n  // Handle errors\n  if (error.response && error.response.status === 401) {//logout\n  }\n\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/API/axiosClient.ts"],"names":["axios","queryString","require","store","enumClientIdEnum","enumHttpHeader","axiosClient","create","baseURL","process","env","REACT_APP_API_URL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","getState","auth","accessToken","ClientId","USER","MerchantId","merchantId","merchant","_id","response","data","error","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,UAAjD;AAGA,MAAMC,WAAW,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADQ;AAG7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB,kBADX;AAEL,wBAAoB;AAFf,GAHoB;AAQ7BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYb,WAAW,CAACc,SAAZ,CAAsBD,MAAtB;AARD,CAAb,CAApB;AAYAR,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAsCC,MAAD,IAAY;AAAA;;AAC7C,QAAMC,KAAK,4BAAGjB,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBA,IAAzB,0DAAG,sBAA4BC,WAA1C;AACAJ,EAAAA,MAAM,CAACP,OAAP,CAAe,cAAf,IAAiCQ,KAAjC;AACAD,EAAAA,MAAM,CAACP,OAAP,CAAeP,cAAc,CAACmB,QAA9B,IAA0CpB,gBAAgB,CAACqB,IAA3D;AACAN,EAAAA,MAAM,CAACP,OAAP,CAAeP,cAAc,CAACqB,UAA9B,IAA4CvB,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBK,UAAtB,IAAoCxB,KAAK,CAACkB,QAAN,GAAiBO,QAAjB,CAA0BC,GAA1G;AACA,SAAOV,MAAP;AACH,CAND;AAQAb,WAAW,CAACU,YAAZ,CAAyBc,QAAzB,CAAkCZ,GAAlC,CACKY,QAAD,IAAc;AACV,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAP;AACH;;AACD,SAAOA,QAAP;AACH,CANL,EAQKE,KAAD,IAAiB;AACb;AACA,MAAIA,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAAhD,EAAqD,CACjD;AACH;;AACD,QAAMD,KAAN;AACH,CAdL;AAiBA,eAAe1B,WAAf","sourcesContent":["import axios from \"axios\";\nconst queryString = require(\"query-string\");\n\nimport { store } from \"@redux\";\nimport { enumClientIdEnum, enumHttpHeader } from \"@configs\";\n\n\nconst axiosClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n\n    paramsSerializer: (params) => queryString.stringify(params),\n    \n});\n\naxiosClient.interceptors.request.use((config) => {\n    const token = store.getState().auth.auth?.accessToken;\n    config.headers[\"access-token\"] = token;\n    config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n    config.headers[enumHttpHeader.MerchantId] = store.getState().auth.merchantId || store.getState().merchant._id;\n    return config;\n});\n\naxiosClient.interceptors.response.use(\n    (response) => {\n        if (response && response.data) {\n            return response;\n        }\n        return response;\n    },\n\n    (error : any) => {\n        // Handle errors\n        if (error.response && error.response.status === 401) {\n            //logout\n        }\n        throw error;\n    }\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}