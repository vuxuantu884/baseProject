{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Google.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useCallback } from \"react\";\nimport GoogleLogin from \"react-google-login\";\nimport { useDispatch } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useTranslation } from \"react-i18next\";\nimport { ComponentGoogleButton } from \"@components\";\nimport { ggLogin, ggSignup, logout, setExternalLogin, setLoading } from \"@redux\";\nimport { enumExternalAuthType, enumExternalMethod } from \"@configs\";\nimport { useNotify } from \"@utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleGoogle = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  //page hook\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useDispatch();\n  const {\n    error\n  } = useNotify();\n\n  const handleGGSuccess = async response => {\n    const accessToken = response === null || response === void 0 ? void 0 : response.accessToken;\n    dispatch(setLoading(true));\n\n    if (!accessToken) {\n      if (props.state.type === enumExternalAuthType.LOGIN) {\n        error(\"page.auth.sign_in_failed\");\n      } else {\n        error(\"page.auth.sign_up_failed\");\n      }\n\n      dispatch(logout());\n    }\n\n    try {\n      let response;\n\n      if (props.state.type === enumExternalAuthType.LOGIN) {\n        const ggLoginData = {\n          token: accessToken\n        };\n        response = await dispatch(ggLogin(ggLoginData)); //WHAT: wrap function in create async thunk\n        //@ts-ignore\n\n        unwrapResult(response);\n      } else if (props.state.type === enumExternalAuthType.SIGNUP) {\n        const ggSignupData = {\n          token: accessToken\n        };\n        response = await dispatch(ggSignup(ggSignupData)); //WHAT: wrap function in create async thunk\n        //@ts-ignore\n\n        unwrapResult(response);\n      } //@ts-ignore\n\n\n      if (!response.payload.accessToken) {\n        error(t(\"page.auth.email_password_correct\"));\n      }\n    } catch (error) {\n      props.errorHandler(error);\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleGGFail = () => {\n    dispatch(logout());\n  };\n\n  const handleOnClick = useCallback(() => {\n    dispatch(setLoading(true));\n    dispatch(setExternalLogin({\n      type: enumExternalMethod.GOOGLE,\n      isSignUp: props.state.type === enumExternalAuthType.SIGNUP ? true : false\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: process.env.REACT_APP_GOOGLE_ID || \"918086977464-i1t2r5gpv27chedpe4jv9raihno46qgt.apps.googleusercontent.com\",\n    render: renderProps => /*#__PURE__*/_jsxDEV(ComponentGoogleButton, {\n      onClick: renderProps.onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 38\n    }, this),\n    onSuccess: handleGGSuccess,\n    onFailure: handleGGFail,\n    cookiePolicy: \"single_host_origin\",\n    onRequest: handleOnClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}, \"Kc1b38ti03ANWla/m7m2TMjLwqc=\", false, function () {\n  return [useTranslation, useDispatch, useNotify];\n}));\n_c2 = ModuleGoogle;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModuleGoogle$memo\");\n$RefreshReg$(_c2, \"ModuleGoogle\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Google.tsx"],"names":["memo","useCallback","GoogleLogin","useDispatch","unwrapResult","useTranslation","ComponentGoogleButton","ggLogin","ggSignup","logout","setExternalLogin","setLoading","enumExternalAuthType","enumExternalMethod","useNotify","ModuleGoogle","props","t","dispatch","error","handleGGSuccess","response","accessToken","state","type","LOGIN","ggLoginData","token","SIGNUP","ggSignupData","payload","errorHandler","handleGGFail","handleOnClick","GOOGLE","isSignUp","process","env","REACT_APP_GOOGLE_ID","renderProps","onClick"],"mappings":"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","sourcesContent":["import { memo, useCallback } from \"react\";\nimport GoogleLogin from \"react-google-login\";\nimport { useDispatch } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ComponentGoogleButton } from \"@components\";\nimport { ggLogin, ggSignup, logout, setExternalLogin, setLoading } from \"@redux\";\nimport { IExternalAuthState, IGGLogin, IGGSignup } from \"@interfaces\";\nimport { enumExternalAuthType, enumExternalMethod } from \"@configs\";\nimport { useNotify } from \"@utils\";\n\ninterface IProps {\n    errorHandler: (error: any) => void;\n    state: IExternalAuthState;\n}\n\nexport const ModuleGoogle = memo((props: IProps) => {\n    //page hook\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { error } = useNotify();\n\n    const handleGGSuccess = async (response: any) => {\n        const accessToken = response?.accessToken;\n        dispatch(setLoading(true));\n        if (!accessToken) {\n            if (props.state.type === enumExternalAuthType.LOGIN) {\n                error(\"page.auth.sign_in_failed\");\n            } else {\n                error(\"page.auth.sign_up_failed\");\n            }\n            dispatch(logout());\n        }\n\n        try {\n            let response;\n            if (props.state.type === enumExternalAuthType.LOGIN) {\n                const ggLoginData: IGGLogin = {\n                    token: accessToken,\n                };\n                response = await dispatch(ggLogin(ggLoginData));\n                //WHAT: wrap function in create async thunk\n                //@ts-ignore\n                unwrapResult(response);\n            } else if (props.state.type === enumExternalAuthType.SIGNUP) {\n                const ggSignupData: IGGSignup = {\n                    token: accessToken,\n                };\n                response = await dispatch(ggSignup(ggSignupData));\n                //WHAT: wrap function in create async thunk\n                //@ts-ignore\n                unwrapResult(response);\n            }\n\n            //@ts-ignore\n            if (!response.payload.accessToken) {\n                error(t(\"page.auth.email_password_correct\"));\n            }\n        } catch (error) {\n            props.errorHandler(error);\n        } finally {\n            dispatch(setLoading(false));\n        }\n    };\n\n    const handleGGFail = () => {\n        dispatch(logout());\n    };\n\n    const handleOnClick = useCallback(() => {\n        dispatch(setLoading(true));\n\n        dispatch(\n            setExternalLogin({\n                type: enumExternalMethod.GOOGLE,\n                isSignUp: props.state.type === enumExternalAuthType.SIGNUP ? true : false,\n            })\n        );\n    }, []);\n\n    return (\n        <GoogleLogin\n            clientId={\n                process.env.REACT_APP_GOOGLE_ID ||\n                \"918086977464-i1t2r5gpv27chedpe4jv9raihno46qgt.apps.googleusercontent.com\"\n            }\n            render={(renderProps) => <ComponentGoogleButton onClick={renderProps.onClick} />}\n            onSuccess={handleGGSuccess}\n            onFailure={handleGGFail}\n            cookiePolicy={\"single_host_origin\"}\n            onRequest={handleOnClick}\n        />\n    );\n});\n"]},"metadata":{},"sourceType":"module"}