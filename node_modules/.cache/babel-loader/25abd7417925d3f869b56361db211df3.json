{"ast":null,"code":"import axios from \"axios\";\n\nconst queryString = require(\"query-string\");\n\nimport { logout, setAuth, store } from \"@redux\";\nimport { enumClientIdEnum, enumHttpHeader } from \"@configs\";\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-Requested-With\": \"XMLHttpRequest\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(config => {\n  var _store$getState$auth$;\n\n  const token = (_store$getState$auth$ = store.getState().auth.auth) === null || _store$getState$auth$ === void 0 ? void 0 : _store$getState$auth$.accessToken;\n  config.headers[\"access-token\"] = token;\n  config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n  config.headers[enumHttpHeader.MerchantId] = store.getState().auth.merchantId || store.getState().merchant._id;\n  config.headers[\"traffic-source-id\"] = store.getState().merchant.trafficSourceId;\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response;\n  }\n\n  return response;\n}, async error => {\n  // Handle errors\n  if (error.response && error.response.status === 401) {\n    var _store$getState$auth$2, _store$getState$auth$3;\n\n    //refreshToken\n    const refreshTk = (_store$getState$auth$2 = store.getState().auth.auth) === null || _store$getState$auth$2 === void 0 ? void 0 : (_store$getState$auth$3 = _store$getState$auth$2.refreshToken) === null || _store$getState$auth$3 === void 0 ? void 0 : _store$getState$auth$3._id;\n\n    if (refreshTk) {\n      const refreshTokenBody = {\n        refreshToken: refreshTk\n      };\n      const config = {\n        headers: {\n          \"client-id\": enumClientIdEnum.MERCHANT\n        }\n      };\n\n      try {\n        const res = await axios.post(\"/auth/login-refresh-token\", refreshTokenBody, config);\n\n        if (res.status === 200) {\n          store.dispatch(setAuth(res.data));\n          const originalRequest = error.config;\n          const newToken = res.data.accessToken;\n          originalRequest.headers[\"access-token\"] = newToken;\n          return Promise.resolve(axiosClient(originalRequest));\n        }\n      } catch {\n        store.dispatch(logout());\n      }\n    } else {\n      store.dispatch(logout());\n    }\n  }\n\n  throw error;\n});\nexport default axiosClient;\n\nasync error => {\n  // Handle errors\n  if (error.response && error.response.status === 401) {\n    var _store$getState$auth$4, _store$getState$auth$5;\n\n    //refreshToken\n    const refreshTk = (_store$getState$auth$4 = store.getState().auth.auth) === null || _store$getState$auth$4 === void 0 ? void 0 : (_store$getState$auth$5 = _store$getState$auth$4.refreshToken) === null || _store$getState$auth$5 === void 0 ? void 0 : _store$getState$auth$5._id;\n\n    if (refreshTk) {\n      const refreshTokenBody = {\n        refreshToken: refreshTk\n      };\n\n      try {\n        const config = {\n          headers: {\n            \"client-id\": enumClientIdEnum.MERCHANT\n          }\n        };\n        const res = await axios.post(process.env.REACT_APP_API_URL + \"auth/login-refresh-token\", refreshTokenBody, config);\n\n        if (res.status === 200) {\n          store.dispatch(setAuth(res.data));\n          const originalRequest = error.config;\n          const newToken = res.data.accessToken;\n          originalRequest.headers[\"access-token\"] = newToken;\n          return Promise.resolve(axiosClient(originalRequest));\n        }\n      } catch (err) {\n        store.dispatch(openToast({\n          message: \"You need to login again\",\n          type: \"warning\",\n          autoHideDuration: 2000\n        }));\n        store.dispatch(logout());\n      }\n    } else {\n      store.dispatch(openToast({\n        message: \"You need to login again \",\n        type: \"warning\",\n        autoHideDuration: 2000\n      }));\n      store.dispatch(logout());\n    }\n  }\n\n  throw error;\n};","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/API/axiosClient.ts"],"names":["axios","queryString","require","logout","setAuth","store","enumClientIdEnum","enumHttpHeader","axiosClient","create","baseURL","process","env","REACT_APP_API_URL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","getState","auth","accessToken","ClientId","USER","MerchantId","merchantId","merchant","_id","trafficSourceId","response","data","error","status","refreshTk","refreshToken","refreshTokenBody","MERCHANT","res","post","dispatch","originalRequest","newToken","Promise","resolve","err","openToast","message","type","autoHideDuration"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst queryString = require(\"query-string\");\n\nimport { logout, setAuth, store } from \"@redux\";\nimport { enumClientIdEnum, enumHttpHeader } from \"@configs\";\n\nconst axiosClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n\n    paramsSerializer: (params) => queryString.stringify(params),\n});\n\naxiosClient.interceptors.request.use((config) => {\n    const token = store.getState().auth.auth?.accessToken;\n    config.headers[\"access-token\"] = token;\n    config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n    config.headers[enumHttpHeader.MerchantId] =\n        store.getState().auth.merchantId || store.getState().merchant._id;\n    config.headers[\"traffic-source-id\"] = store.getState().merchant.trafficSourceId;\n\n    return config;\n});\n\naxiosClient.interceptors.response.use(\n    (response) => {\n        if (response && response.data) {\n            return response;\n        }\n        return response;\n    },\n\n    async (error: any) => {\n        // Handle errors\n        if (error.response && error.response.status === 401) {\n            //refreshToken\n            const refreshTk = store.getState().auth.auth?.refreshToken?._id;\n            if (refreshTk) {\n                const refreshTokenBody = { refreshToken: refreshTk };\n                const config = {\n                    headers: {\n                        \"client-id\": enumClientIdEnum.MERCHANT,\n                    },\n                };\n                try {\n                    const res = await axios.post(\n                        \"/auth/login-refresh-token\",\n                        refreshTokenBody,\n                        config\n                    );\n                    if (res.status === 200) {\n                        store.dispatch(setAuth(res.data));\n                        const originalRequest = error.config;\n                        const newToken = res.data.accessToken;\n                        originalRequest.headers[\"access-token\"] = newToken;\n                        return Promise.resolve(axiosClient(originalRequest));\n                    }\n                } catch {\n                    store.dispatch(logout());\n                }\n            } else {\n                store.dispatch(logout());\n            }\n        }\n        throw error;\n    }\n);\n\nexport default axiosClient;\nasync (error: any) => {\n    // Handle errors\n    if (error.response && error.response.status === 401) {\n        //refreshToken\n        const refreshTk = store.getState().auth.auth?.refreshToken?._id;\n        if (refreshTk) {\n            const refreshTokenBody = { refreshToken: refreshTk };\n            try {\n                const config = {\n                    headers: {\n                        \"client-id\": enumClientIdEnum.MERCHANT,\n                    },\n                };\n                const res = await axios.post(\n                    process.env.REACT_APP_API_URL + \"auth/login-refresh-token\",\n                    refreshTokenBody,\n                    config\n                );\n                if (res.status === 200) {\n                    store.dispatch(setAuth(res.data));\n                    const originalRequest = error.config;\n                    const newToken = res.data.accessToken;\n                    originalRequest.headers[\"access-token\"] = newToken;\n                    return Promise.resolve(axiosClient(originalRequest));\n                }\n            } catch (err: any) {\n                store.dispatch(\n                    openToast({\n                        message: \"You need to login again\",\n                        type: \"warning\",\n                        autoHideDuration: 2000,\n                    })\n                );\n                store.dispatch(logout());\n            }\n        } else {\n            store.dispatch(\n                openToast({\n                    message: \"You need to login again \",\n                    type: \"warning\",\n                    autoHideDuration: 2000,\n                })\n            );\n            store.dispatch(logout());\n        }\n    }\n    throw error;\n};\n"]},"metadata":{},"sourceType":"module"}