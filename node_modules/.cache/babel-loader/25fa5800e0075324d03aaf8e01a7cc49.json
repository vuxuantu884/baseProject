{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { theme } from \"@utils\";\nconst initialState = {\n  mainColor: \"#000000\",\n  subColor: \"#000000\"\n};\nconst colorThemes = theme.colors.colorThemes;\nconst themeColor = createSlice({\n  name: \"theme\",\n  initialState,\n  reducers: {\n    setMainColor: (state, action) => {\n      state.mainColor = action.payload;\n      colorThemes.forEach(color => {\n        if (action.payload === color.main) {\n          state.subColor = color.sub;\n        }\n      });\n    }\n  }\n});\nexport const selectTheme = state => state.theme;\nexport const {\n  setMainColor\n} = themeColor.actions;\nexport default themeColor.reducer;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Redux/Slices/theme.ts"],"names":["createSlice","theme","initialState","mainColor","subColor","colorThemes","colors","themeColor","name","reducers","setMainColor","state","action","payload","forEach","color","main","sub","selectTheme","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAASC,KAAT,QAAsB,QAAtB;AAQA,MAAMC,YAA2B,GAAG;AAChCC,EAAAA,SAAS,EAAE,SADqB;AAEhCC,EAAAA,QAAQ,EAAE;AAFsB,CAApC;AAIA,MAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAaD,WAAjC;AAEA,MAAME,UAAU,GAAGP,WAAW,CAAC;AAC3BQ,EAAAA,IAAI,EAAE,OADqB;AAE3BN,EAAAA,YAF2B;AAG3BO,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AACpDD,MAAAA,KAAK,CAACR,SAAN,GAAkBS,MAAM,CAACC,OAAzB;AACAR,MAAAA,WAAW,CAACS,OAAZ,CAAqBC,KAAD,IAAW;AAC3B,YAAIH,MAAM,CAACC,OAAP,KAAmBE,KAAK,CAACC,IAA7B,EAAmC;AAC/BL,UAAAA,KAAK,CAACP,QAAN,GAAiBW,KAAK,CAACE,GAAvB;AACH;AACJ,OAJD;AAKH;AARK;AAHiB,CAAD,CAA9B;AAeA,OAAO,MAAMC,WAAW,GAAIP,KAAD,IAAsBA,KAAK,CAACV,KAAhD;AAEP,OAAO,MAAM;AAAES,EAAAA;AAAF,IAAmBH,UAAU,CAACY,OAApC;AAEP,eAAeZ,UAAU,CAACa,OAA1B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { theme } from \"@utils\";\n\nimport { RootState } from \".\";\n\ninterface IInitialState {\n    mainColor: string;\n    subColor: string;\n}\nconst initialState: IInitialState = {\n    mainColor: \"#000000\",\n    subColor: \"#000000\",\n};\nconst colorThemes = theme.colors.colorThemes;\n\nconst themeColor = createSlice({\n    name: \"theme\",\n    initialState,\n    reducers: {\n        setMainColor: (state, action: PayloadAction<string>) => {\n            state.mainColor = action.payload;\n            colorThemes.forEach((color) => {\n                if (action.payload === color.main) {\n                    state.subColor = color.sub;\n                }\n            });\n        },\n    },\n});\n\nexport const selectTheme = (state: RootState) => state.theme;\n\nexport const { setMainColor } = themeColor.actions;\n\nexport default themeColor.reducer;\n"]},"metadata":{},"sourceType":"module"}