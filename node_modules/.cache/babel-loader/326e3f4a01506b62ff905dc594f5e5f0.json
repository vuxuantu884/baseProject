{"ast":null,"code":"import axios from \"axios\";\n\nconst queryString = require(\"query-string\");\n\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-Requested-With\": \"XMLHttpRequest\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n}); // axiosClient.interceptors.request.use((config) => {\n//     const token = store.getState().auth.auth?.accessToken;\n//     config.headers[\"access-token\"] = token;\n//     config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n//     config.headers[enumHttpHeader.MerchantId] =\n//         store.getState().auth.merchantId || store.getState().merchant._id;\n//     config.headers[\"traffic-source-id\"] = store.getState().merchant.trafficSourceId;\n//     return config;\n// });\n\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response;\n  }\n\n  return response;\n} // async (error: any) => {\n//     // Handle errors\n//     if (error.response && error.response.status === 401) {\n//         //refreshToken\n//         const refreshTk = store.getState().auth.auth?.refreshToken?._id;\n//         if (refreshTk) {\n//             const refreshTokenBody = { refreshToken: refreshTk };\n//             const config = {\n//                 headers: {\n//                     \"client-id\": enumClientIdEnum.MERCHANT,\n//                 },\n//             };\n//             try {\n//                 const res = await axios.post(\n//                      process.env.REACT_APP_API_URL+ \"auth/login-refresh-token\",\n//                     refreshTokenBody,\n//                     config\n//                 );\n//                 if (res.status === 200) {\n//                     store.dispatch(setAuth(res.data));\n//                     const originalRequest = error.config;\n//                     const newToken = res.data.accessToken;\n//                     originalRequest.headers[\"access-token\"] = newToken;\n//                     return Promise.resolve(axiosClient(originalRequest));\n//                 }\n//             } catch {\n//                 store.dispatch(\n//                     openToast({\n//                         message: \"You need to login again\",\n//                         type: \"warning\",\n//                         autoHideDuration: 2000,\n//                     })\n//                 );\n//                 store.dispatch(logout());\n//             }\n//         } else {\n//             store.dispatch(\n//                 openToast({\n//                     message: \"You need to login again\",\n//                     type: \"warning\",\n//                     autoHideDuration: 2000,\n//                 })\n//             );\n//             store.dispatch(logout());\n//         }\n//     }\n//     throw error;\n// }\n);\nexport default axiosClient;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/BaseProject/src/API/axiosClient.ts"],"names":["axios","queryString","require","axiosClient","create","baseURL","process","env","REACT_APP_API_URL","headers","paramsSerializer","params","stringify","interceptors","response","use","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAIA,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADQ;AAG7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB,kBADX;AAEL,wBAAoB;AAFf,GAHoB;AAQ7BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYV,WAAW,CAACW,SAAZ,CAAsBD,MAAtB;AARD,CAAb,CAApB,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEAR,WAAW,CAACU,YAAZ,CAAyBC,QAAzB,CAAkCC,GAAlC,CACKD,QAAD,IAAc;AACV,MAAIA,QAAQ,IAAIA,QAAQ,CAACE,IAAzB,EAA+B;AAC3B,WAAOF,QAAP;AACH;;AACD,SAAOA,QAAP;AACH,CANL,CAQI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxDJ;AA2DA,eAAeX,WAAf","sourcesContent":["import axios from \"axios\";\nconst queryString = require(\"query-string\");\n\nimport { logout, openToast, setAuth, store } from \"@redux\";\n\nconst axiosClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n\n    paramsSerializer: (params) => queryString.stringify(params),\n});\n\n// axiosClient.interceptors.request.use((config) => {\n//     const token = store.getState().auth.auth?.accessToken;\n//     config.headers[\"access-token\"] = token;\n//     config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n//     config.headers[enumHttpHeader.MerchantId] =\n//         store.getState().auth.merchantId || store.getState().merchant._id;\n//     config.headers[\"traffic-source-id\"] = store.getState().merchant.trafficSourceId;\n\n//     return config;\n// });\n\naxiosClient.interceptors.response.use(\n    (response) => {\n        if (response && response.data) {\n            return response;\n        }\n        return response;\n    },\n\n    // async (error: any) => {\n    //     // Handle errors\n    //     if (error.response && error.response.status === 401) {\n    //         //refreshToken\n    //         const refreshTk = store.getState().auth.auth?.refreshToken?._id;\n    //         if (refreshTk) {\n    //             const refreshTokenBody = { refreshToken: refreshTk };\n    //             const config = {\n\n    //                 headers: {\n    //                     \"client-id\": enumClientIdEnum.MERCHANT,\n    //                 },\n    //             };\n    //             try {\n    //                 const res = await axios.post(\n    //                      process.env.REACT_APP_API_URL+ \"auth/login-refresh-token\",\n    //                     refreshTokenBody,\n    //                     config\n    //                 );\n    //                 if (res.status === 200) {\n    //                     store.dispatch(setAuth(res.data));\n    //                     const originalRequest = error.config;\n    //                     const newToken = res.data.accessToken;\n    //                     originalRequest.headers[\"access-token\"] = newToken;\n    //                     return Promise.resolve(axiosClient(originalRequest));\n    //                 }\n    //             } catch {\n    //                 store.dispatch(\n    //                     openToast({\n    //                         message: \"You need to login again\",\n    //                         type: \"warning\",\n    //                         autoHideDuration: 2000,\n    //                     })\n    //                 );\n    //                 store.dispatch(logout());\n    //             }\n    //         } else {\n    //             store.dispatch(\n    //                 openToast({\n    //                     message: \"You need to login again\",\n    //                     type: \"warning\",\n    //                     autoHideDuration: 2000,\n    //                 })\n    //             );\n    //             store.dispatch(logout());\n    //         }\n    //     }\n    //     throw error;\n    // }\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}