{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Email.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { memo, useCallback } from \"react\";\nimport { ComponentSignInEmail } from \"@components\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setAuth, setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleEmailSignIn = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  //page props\n  const {\n    remember\n  } = props; //page hooks\n\n  const {\n    YubEmailSignIn\n  } = useYup();\n  const dispatch = useDispatch();\n  const {\n    error,\n    success\n  } = useNotify();\n  const {\n    t\n  } = useTranslation(); //page variable\n\n  const initialValues = {\n    email: \"\",\n    password: \"\"\n  };\n  const registerSchema = Yup.object().shape(YubEmailSignIn);\n  const handleLogin = useCallback(async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    //\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.login(values);\n      const data = res.data;\n\n      if (remember) {\n        dispatch(setAuth(data));\n      } else {\n        dispatch(setAuth({ ...data,\n          refreshToken: null\n        }));\n      }\n\n      dispatch(setExternalLogin({\n        type: enumExternalMethod.EMAIL_NOT_SOCIAL\n      }));\n      success(t(\"message.login.success\"));\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  }, [remember]);\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleLogin\n  });\n  return /*#__PURE__*/_jsxDEV(ComponentSignInEmail, {\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    errors: errors,\n    touched: touched,\n    values: values,\n    handleSubmit: handleSubmit,\n    isSubmitting: isSubmitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}, \"opHKSO5OYvwFinp/4/K530Zq+5A=\", false, function () {\n  return [useYup, useDispatch, useNotify, useTranslation, useFormik];\n}));\n_c2 = ModuleEmailSignIn;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModuleEmailSignIn$memo\");\n$RefreshReg$(_c2, \"ModuleEmailSignIn\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Email.tsx"],"names":["useFormik","Yup","useDispatch","useTranslation","memo","useCallback","ComponentSignInEmail","useYup","authApi","setAuth","setExternalLogin","setLoading","useNotify","enumExternalMethod","ModuleEmailSignIn","props","remember","YubEmailSignIn","dispatch","error","success","t","initialValues","email","password","registerSchema","object","shape","handleLogin","values","setSubmitting","res","login","data","refreshToken","type","EMAIL_NOT_SOCIAL","errors","message","response","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit"],"mappings":"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","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { memo, useCallback } from \"react\";\n\nimport { ComponentSignInEmail } from \"@components\";\nimport { IAuth, ILogin } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setAuth, setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\n\ninterface IProps {\n    remember: boolean;\n}\n\nexport const ModuleEmailSignIn = memo((props: IProps) => {\n    //page props\n    const { remember } = props;\n    //page hooks\n    const { YubEmailSignIn } = useYup();\n    const dispatch = useDispatch();\n    const { error, success } = useNotify();\n    const { t } = useTranslation();\n    //page variable\n    const initialValues: ILogin = {\n        email: \"\",\n        password: \"\",\n    };\n\n    const registerSchema = Yup.object().shape(YubEmailSignIn);\n\n    const handleLogin = useCallback(\n        async (values: ILogin, { setSubmitting }: FormikHelpers<ILogin>) => {\n            //\n            try {\n                setSubmitting(true);\n                dispatch(setLoading(true));\n                const res = await authApi.login(values);\n                const data = res.data as IAuth;\n                if (remember) {\n                    dispatch(setAuth(data));\n                } else {\n                    dispatch(setAuth({ ...data, refreshToken: null }));\n                }\n                dispatch(setExternalLogin({ type: enumExternalMethod.EMAIL_NOT_SOCIAL }));\n                success(t(\"message.login.success\"));\n            } catch (errors: any) {\n                const { message } = errors.response.data;\n                error(message);\n            } finally {\n                setSubmitting(false);\n                dispatch(setLoading(false));\n            }\n        },\n        [remember]\n    );\n\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleLogin,\n        });\n\n    return (\n        <ComponentSignInEmail\n            handleBlur={handleBlur}\n            handleChange={handleChange}\n            errors={errors}\n            touched={touched}\n            values={values}\n            handleSubmit={handleSubmit}\n            isSubmitting={isSubmitting}\n        />\n    );\n});\n"]},"metadata":{},"sourceType":"module"}