{"ast":null,"code":"import { combineReducers } from \"redux\";\n// import { persistReducer } from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\n// import appReducer from \"./auth\";\nimport toastReducer from \"./toast\";\nimport appReducer from \"./app\"; // const persistConfig = {\n//     key: \"root\",\n//     storage,\n// };\n// const authPersistedReducer = persistReducer(persistConfig, appReducer);\n\nexport * from \"./toast\";\nconst productReducer = combineReducers({\n  toast: toastReducer,\n  app: appReducer\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === \"RESET\") {\n    // reset state\n    state = {}; // reset local storage\n\n    localStorage.clear();\n  }\n\n  return productReducer(state, action);\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/BaseProject/src/Redux/Slices/index.ts"],"names":["combineReducers","toastReducer","appReducer","productReducer","toast","app","rootReducer","state","action","type","localStorage","clear"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA;AACA;AAEA;AACA,OAAOC,YAAP,MAAyB,SAAzB;AACA,OAAOC,UAAP,MAAuB,OAAvB,C,CACA;AACA;AACA;AACA;AAEA;;AACA,cAAc,SAAd;AAEA,MAAMC,cAAc,GAAGH,eAAe,CAAC;AACnCI,EAAAA,KAAK,EAAEH,YAD4B;AAEnCI,EAAAA,GAAG,EAACH;AAF+B,CAAD,CAAtC;;AAOA,MAAMI,WAAoB,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAAyC;AAClE,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB;AACAF,IAAAA,KAAK,GAAG,EAAR,CAFyB,CAGzB;;AACAG,IAAAA,YAAY,CAACC,KAAb;AACH;;AACD,SAAOR,cAAc,CAACI,KAAD,EAAQC,MAAR,CAArB;AACH,CARD;;AASA,eAAeF,WAAf","sourcesContent":["import { combineReducers } from \"redux\";\nimport { AnyAction, Reducer } from \"@reduxjs/toolkit\";\n// import { persistReducer } from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\n\n// import appReducer from \"./auth\";\nimport toastReducer from \"./toast\";\nimport appReducer from \"./app\";\n// const persistConfig = {\n//     key: \"root\",\n//     storage,\n// };\n\n// const authPersistedReducer = persistReducer(persistConfig, appReducer);\nexport * from \"./toast\";\n\nconst productReducer = combineReducers({\n    toast: toastReducer,\n    app:appReducer,\n});\n\nexport type RootState = ReturnType<typeof productReducer>;\n\nconst rootReducer: Reducer = (state: RootState, action: AnyAction) => {\n    if (action.type === \"RESET\") {\n        // reset state\n        state = {} as RootState;\n        // reset local storage\n        localStorage.clear();\n    }\n    return productReducer(state, action);\n};\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}