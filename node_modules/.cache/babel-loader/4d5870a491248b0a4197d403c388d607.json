{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Reward.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { rewardApi } from \"@api\";\nimport { ComponentRewardList } from \"@components\";\nimport { setLoading } from \"@redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModulesReward = () => {\n  _s();\n\n  const dispatch = useDispatch(); //page state\n\n  const [reward, setReward] = useState([]);\n  useEffect(() => {\n    (async () => {\n      dispatch(setLoading(true));\n      const res = await rewardApi.getListReward();\n      const data = res.data.docs; //WHAT: xu ly data thang IData\n\n      const quantities = data.map(item => item.quantity);\n      const quantitiesSet = Array.from(new Set(quantities));\n      const reslult = quantitiesSet.map(item => {\n        const res = data.filter(values => values.quantity === item);\n        return {\n          quantity: item,\n          reward: res\n        };\n      });\n      console.log(quantitiesSet); // setReward(data);\n\n      dispatch(setLoading(false));\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: reward && /*#__PURE__*/_jsxDEV(ComponentRewardList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }, this)\n  }, void 0, false);\n};\n\n_s(ModulesReward, \"MwY14du8YzzO2/+G+EExnYgvQCU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ModulesReward;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModulesReward\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Reward.tsx"],"names":["useEffect","useState","useDispatch","rewardApi","ComponentRewardList","setLoading","ModulesReward","dispatch","reward","setReward","res","getListReward","data","docs","quantities","map","item","quantity","quantitiesSet","Array","from","Set","reslult","filter","values","console","log"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,QAA0B,MAA1B;AACA,SAASC,mBAAT,QAAoC,aAApC;AAEA,SAASC,UAAT,QAA2B,QAA3B;;;AAOA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CAD+B,CAE/B;;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAU,EAAV,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACTO,MAAAA,QAAQ,CAACF,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,YAAMK,GAAG,GAAG,MAAMP,SAAS,CAACQ,aAAV,EAAlB;AACA,YAAMC,IAAI,GAAGF,GAAG,CAACE,IAAJ,CAASC,IAAtB,CAHS,CAIT;;AACA,YAAMC,UAAU,GAAGF,IAAI,CAACG,GAAL,CAAUC,IAAD,IAAUA,IAAI,CAACC,QAAxB,CAAnB;AACA,YAAMC,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQP,UAAR,CAAX,CAAtB;AACA,YAAMQ,OAAO,GAAGJ,aAAa,CAACH,GAAd,CAAmBC,IAAD,IAAU;AACxC,cAAMN,GAAG,GAAGE,IAAI,CAACW,MAAL,CAAaC,MAAD,IAAYA,MAAM,CAACP,QAAP,KAAoBD,IAA5C,CAAZ;AACA,eAAO;AACHC,UAAAA,QAAQ,EAAED,IADP;AAEHR,UAAAA,MAAM,EAAEE;AAFL,SAAP;AAIH,OANe,CAAhB;AAOAe,MAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ,EAdS,CAeT;;AACAX,MAAAA,QAAQ,CAACF,UAAU,CAAC,KAAD,CAAX,CAAR;AACH,KAjBD;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,sBAAO;AAAA,cAAGG,MAAM,iBAAI,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAb,mBAAP;AACH,CA3BM;;GAAMF,a;UACQJ,W;;;KADRI,a","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { rewardApi } from \"@api\";\nimport { ComponentRewardList } from \"@components\";\nimport { IReward } from \"@interfaces\";\nimport { setLoading } from \"@redux\";\n\ninterface IData {\n    quantity: number;\n    reward: IReward[];\n}\n\nexport const ModulesReward = () => {\n    const dispatch = useDispatch();\n    //page state\n    const [reward, setReward] = useState<IData[]>([]);\n\n    useEffect(() => {\n        (async () => {\n            dispatch(setLoading(true));\n            const res = await rewardApi.getListReward();\n            const data = res.data.docs as IReward[];\n            //WHAT: xu ly data thang IData\n            const quantities = data.map((item) => item.quantity) as number[];\n            const quantitiesSet = Array.from(new Set(quantities));\n            const reslult = quantitiesSet.map((item) => {\n                const res = data.filter((values) => values.quantity === item);\n                return {\n                    quantity: item,\n                    reward: res,\n                };\n            });\n            console.log(quantitiesSet);\n            // setReward(data);\n            dispatch(setLoading(false));\n        })();\n    }, []);\n\n    return <>{reward && <ComponentRewardList />}</>;\n};\n"]},"metadata":{},"sourceType":"module"}