{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Components/shared/InputTel.tsx\",\n    _s = $RefreshSig$();\n\nimport IntlTelInput from \"react-intl-tel-input\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport parsePhoneNumber from \"libphonenumber-js\";\nimport { StyledError } from \"@components\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SharedIntlTelInput = props => {\n  _s();\n\n  //page hooks\n  const {\n    t\n  } = useTranslation(); //page props\n\n  const {\n    setFieldTouched,\n    value,\n    errorPhone,\n    setFieldValue,\n    setError,\n    disabled\n  } = props; //page props\n\n  const [country, setCountry] = useState();\n\n  const handleSelectFlag = (currentNumber, selectedCountryData, fullNumber) => {\n    setFieldValue(\"phoneNumber\", currentNumber.replace(/(\\s|-)/g, \"\"));\n    setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n  };\n\n  const handleChangePhoneNumber = (isValid, value, selectedCountryData, fullNumber) => {\n    if (!isValid) setError(t(\"validation.isNumber\"));else {\n      setError(\"\");\n    }\n    setFieldValue(\"phoneNumber\", value);\n    setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n  };\n\n  useEffect(() => {\n    const phoneNumber = parsePhoneNumber(value);\n    setCountry(phoneNumber === null || phoneNumber === void 0 ? void 0 : phoneNumber.country);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledIntlTelInput, {\n      defaultCountry: country || \"th\",\n      preferredCountries: [\"th\", \"vn\"],\n      fieldId: \"phoneNumber\",\n      fieldName: \"phoneNumber\",\n      onPhoneNumberChange: handleChangePhoneNumber,\n      onPhoneNumberBlur: () => {\n        setFieldTouched(value || \"\", true);\n      },\n      onSelectFlag: handleSelectFlag,\n      value: value,\n      disabled: disabled,\n      autoFocus: true,\n      formatOnInit: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), errorPhone && /*#__PURE__*/_jsxDEV(StyledError, {\n      className: \"custom-error\",\n      visible: true,\n      children: errorPhone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SharedIntlTelInput, \"WvmHbtuvPijkbnXIwlJcEAaJNU0=\", false, function () {\n  return [useTranslation];\n});\n\n_c = SharedIntlTelInput;\nconst StyledIntlTelInput = styled(IntlTelInput)`\n    input.allow-dropdown input[type=\"tel\"] {\n        border-radius: 6px;\n    }\n`;\n_c2 = StyledIntlTelInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SharedIntlTelInput\");\n$RefreshReg$(_c2, \"StyledIntlTelInput\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Components/shared/InputTel.tsx"],"names":["IntlTelInput","useTranslation","styled","parsePhoneNumber","StyledError","useEffect","useState","SharedIntlTelInput","props","t","setFieldTouched","value","errorPhone","setFieldValue","setError","disabled","country","setCountry","handleSelectFlag","currentNumber","selectedCountryData","fullNumber","replace","handleChangePhoneNumber","isValid","phoneNumber","StyledIntlTelInput"],"mappings":";;;AAAA,OAAOA,YAAP,MAA0C,sBAA1C;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAgBA,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAmB;AAAA;;AACjD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQR,cAAc,EAA5B,CAFiD,CAGjD;;AACA,QAAM;AAAES,IAAAA,eAAF;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA,UAA1B;AAAsCC,IAAAA,aAAtC;AAAqDC,IAAAA,QAArD;AAA+DC,IAAAA;AAA/D,MAA4EP,KAAlF,CAJiD,CAKjD;;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;;AACA,QAAMY,gBAAgB,GAAG,CACrBC,aADqB,EAErBC,mBAFqB,EAGrBC,UAHqB,KAIpB;AACDR,IAAAA,aAAa,CAAC,aAAD,EAAgBM,aAAa,CAACG,OAAd,CAAsB,SAAtB,EAAiC,EAAjC,CAAhB,CAAb;AACAT,IAAAA,aAAa,CAAC,OAAD,EAAUQ,UAAU,CAACC,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAV,CAAb;AACH,GAPD;;AASA,QAAMC,uBAAuB,GAAG,CAC5BC,OAD4B,EAE5Bb,KAF4B,EAG5BS,mBAH4B,EAI5BC,UAJ4B,KAK3B;AACD,QAAI,CAACG,OAAL,EAAcV,QAAQ,CAACL,CAAC,CAAC,qBAAD,CAAF,CAAR,CAAd,KACK;AACDK,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AAEDD,IAAAA,aAAa,CAAC,aAAD,EAAgBF,KAAhB,CAAb;AACAE,IAAAA,aAAa,CAAC,OAAD,EAAUQ,UAAU,CAACC,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAV,CAAb;AACH,GAbD;;AAeAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,WAAW,GAAGtB,gBAAgB,CAACQ,KAAD,CAApC;AACAM,IAAAA,UAAU,CAACQ,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAET,OAAd,CAAV;AACH,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACI;AAAA,4BACI,QAAC,kBAAD;AACI,MAAA,cAAc,EAAEA,OAAO,IAAI,IAD/B;AAEI,MAAA,kBAAkB,EAAE,CAAC,IAAD,EAAO,IAAP,CAFxB;AAGI,MAAA,OAAO,EAAC,aAHZ;AAII,MAAA,SAAS,EAAC,aAJd;AAKI,MAAA,mBAAmB,EAAEO,uBALzB;AAMI,MAAA,iBAAiB,EAAE,MAAM;AACrBb,QAAAA,eAAe,CAACC,KAAK,IAAI,EAAV,EAAc,IAAd,CAAf;AACH,OARL;AASI,MAAA,YAAY,EAAEO,gBATlB;AAUI,MAAA,KAAK,EAAEP,KAVX;AAWI,MAAA,QAAQ,EAAEI,QAXd;AAYI,MAAA,SAAS,EAAE,IAZf;AAaI,MAAA,YAAY,EAAE;AAblB;AAAA;AAAA;AAAA;AAAA,YADJ,EAgBKH,UAAU,iBACP,QAAC,WAAD;AAAa,MAAA,SAAS,EAAC,cAAvB;AAAsC,MAAA,OAAO,EAAE,IAA/C;AAAA,gBACKA;AADL;AAAA;AAAA;AAAA;AAAA,YAjBR;AAAA,kBADJ;AAwBH,CA5DM;;GAAML,kB;UAEKN,c;;;KAFLM,kB;AA8Db,MAAMmB,kBAAkB,GAAGxB,MAAM,CAACF,YAAD,CAAe;AAChD;AACA;AACA;AACA,CAJA;MAAM0B,kB","sourcesContent":["import IntlTelInput, { CountryData } from \"react-intl-tel-input\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport parsePhoneNumber from \"libphonenumber-js\";\n\nimport { StyledError } from \"@components\";\nimport { FormikErrors } from \"formik\";\nimport { IEmailForm, IPhone, IUserSetting } from \"@interfaces\";\nimport { useEffect, useState } from \"react\";\n\ninterface IProps {\n    setFieldTouched: (\n        field: string,\n        touched?: boolean | undefined,\n        shouldValidate?: boolean | undefined\n    ) => Promise<void> | Promise<FormikErrors<IUserSetting | IEmailForm | IPhone>>;\n    setFieldValue: any;\n    value: string;\n    errorPhone: string;\n    setError: React.Dispatch<React.SetStateAction<string | undefined>>;\n    disabled?: boolean | undefined;\n    country: string | undefined;\n}\n\nexport const SharedIntlTelInput = (props: IProps) => {\n    //page hooks\n    const { t } = useTranslation();\n    //page props\n    const { setFieldTouched, value, errorPhone, setFieldValue, setError, disabled } = props;\n    //page props\n    const [country, setCountry] = useState<string>();\n    const handleSelectFlag = (\n        currentNumber: string,\n        selectedCountryData: CountryData,\n        fullNumber: string\n    ) => {\n        setFieldValue(\"phoneNumber\", currentNumber.replace(/(\\s|-)/g, \"\"));\n        setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n    };\n\n    const handleChangePhoneNumber = (\n        isValid: boolean,\n        value: string,\n        selectedCountryData: CountryData,\n        fullNumber: string\n    ) => {\n        if (!isValid) setError(t(\"validation.isNumber\"));\n        else {\n            setError(\"\");\n        }\n\n        setFieldValue(\"phoneNumber\", value);\n        setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n    };\n\n    useEffect(() => {\n        const phoneNumber = parsePhoneNumber(value);\n        setCountry(phoneNumber?.country);\n    }, []);\n\n    return (\n        <>\n            <StyledIntlTelInput\n                defaultCountry={country || \"th\"}\n                preferredCountries={[\"th\", \"vn\"]}\n                fieldId=\"phoneNumber\"\n                fieldName=\"phoneNumber\"\n                onPhoneNumberChange={handleChangePhoneNumber}\n                onPhoneNumberBlur={() => {\n                    setFieldTouched(value || \"\", true);\n                }}\n                onSelectFlag={handleSelectFlag}\n                value={value}\n                disabled={disabled}\n                autoFocus={true}\n                formatOnInit={false}\n            />\n            {errorPhone && (\n                <StyledError className=\"custom-error\" visible={true}>\n                    {errorPhone}\n                </StyledError>\n            )}\n        </>\n    );\n};\n\nconst StyledIntlTelInput = styled(IntlTelInput)`\n    input.allow-dropdown input[type=\"tel\"] {\n        border-radius: 6px;\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}