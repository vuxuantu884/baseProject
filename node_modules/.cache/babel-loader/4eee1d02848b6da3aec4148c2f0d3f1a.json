{"ast":null,"code":"import axios from \"axios\";\n\nconst queryString = require(\"query-string\");\n\nimport { logout, store } from \"@redux\";\nimport { enumClientIdEnum, enumHttpHeader } from \"@configs\";\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-Requested-With\": \"XMLHttpRequest\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(config => {\n  var _store$getState$auth$;\n\n  const token = (_store$getState$auth$ = store.getState().auth.auth) === null || _store$getState$auth$ === void 0 ? void 0 : _store$getState$auth$.accessToken;\n  config.headers[\"access-token\"] = token;\n  config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n  config.headers[enumHttpHeader.MerchantId] = store.getState().auth.merchantId || store.getState().merchant._id;\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response;\n  }\n\n  return response;\n}, async error => {\n  // Handle errors\n  if (error.response && error.response.status === 401) {\n    var _store$getState$auth$2, _store$getState$auth$3;\n\n    //refreshToken\n    const refreshTk = (_store$getState$auth$2 = store.getState().auth.auth) === null || _store$getState$auth$2 === void 0 ? void 0 : (_store$getState$auth$3 = _store$getState$auth$2.refreshToken) === null || _store$getState$auth$3 === void 0 ? void 0 : _store$getState$auth$3._id;\n\n    if (refreshTk) {\n      const refreshTokenBody = {\n        refreshTk\n      };\n\n      try {\n        const res = await axios.post(\"/auth/login-refresh-token\", refreshTokenBody);\n\n        if (res.status === 200) {//         store.dispatch(refreshToken(res.data as IRefreshTokenRes));\n        }\n      } catch {\n        store.dispatch(logout());\n      }\n    } else {\n      store.dispatch(logout());\n    }\n  }\n\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/API/axiosClient.ts"],"names":["axios","queryString","require","logout","store","enumClientIdEnum","enumHttpHeader","axiosClient","create","baseURL","process","env","REACT_APP_API_URL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","getState","auth","accessToken","ClientId","USER","MerchantId","merchantId","merchant","_id","response","data","error","status","refreshTk","refreshToken","refreshTokenBody","res","post","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,QAA9B;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,UAAjD;AAGA,MAAMC,WAAW,GAAGP,KAAK,CAACQ,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADQ;AAG7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB,kBADX;AAEL,wBAAoB;AAFf,GAHoB;AAQ7BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYd,WAAW,CAACe,SAAZ,CAAsBD,MAAtB;AARD,CAAb,CAApB;AAYAR,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAsCC,MAAD,IAAY;AAAA;;AAC7C,QAAMC,KAAK,4BAAGjB,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBA,IAAzB,0DAAG,sBAA4BC,WAA1C;AACAJ,EAAAA,MAAM,CAACP,OAAP,CAAe,cAAf,IAAiCQ,KAAjC;AACAD,EAAAA,MAAM,CAACP,OAAP,CAAeP,cAAc,CAACmB,QAA9B,IAA0CpB,gBAAgB,CAACqB,IAA3D;AACAN,EAAAA,MAAM,CAACP,OAAP,CAAeP,cAAc,CAACqB,UAA9B,IAA4CvB,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBK,UAAtB,IAAoCxB,KAAK,CAACkB,QAAN,GAAiBO,QAAjB,CAA0BC,GAA1G;AACA,SAAOV,MAAP;AACH,CAND;AAQAb,WAAW,CAACU,YAAZ,CAAyBc,QAAzB,CAAkCZ,GAAlC,CACKY,QAAD,IAAc;AACV,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAP;AACH;;AACD,SAAOA,QAAP;AACH,CANL,EAQG,MAAOE,KAAP,IAAuB;AAClB;AACA,MAAIA,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAAhD,EAAqD;AAAA;;AACjD;AACA,UAAMC,SAAS,6BAAG/B,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBA,IAAzB,qFAAG,uBAA4Ba,YAA/B,2DAAG,uBAA0CN,GAA5D;;AACA,QAAIK,SAAJ,EAAe;AACX,YAAME,gBAAgB,GAAG;AAAEF,QAAAA;AAAF,OAAzB;;AACA,UAAI;AACA,cAAMG,GAAG,GAAG,MAAMtC,KAAK,CAACuC,IAAN,CAAW,2BAAX,EAAwCF,gBAAxC,CAAlB;;AACA,YAAIC,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB,CACpB;AACH;AACJ,OALD,CAKE,MAAM;AACJ9B,QAAAA,KAAK,CAACoC,QAAN,CAAerC,MAAM,EAArB;AACH;AACJ,KAVD,MAUO;AACHC,MAAAA,KAAK,CAACoC,QAAN,CAAerC,MAAM,EAArB;AACH;AACJ;;AACD,QAAM8B,KAAN;AACH,CA5BL;AA+BA,eAAe1B,WAAf","sourcesContent":["import axios from \"axios\";\nconst queryString = require(\"query-string\");\n\nimport { logout, store } from \"@redux\";\nimport { enumClientIdEnum, enumHttpHeader } from \"@configs\";\n\n\nconst axiosClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n\n    paramsSerializer: (params) => queryString.stringify(params),\n    \n});\n\naxiosClient.interceptors.request.use((config) => {\n    const token = store.getState().auth.auth?.accessToken;\n    config.headers[\"access-token\"] = token;\n    config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n    config.headers[enumHttpHeader.MerchantId] = store.getState().auth.merchantId || store.getState().merchant._id;\n    return config;\n});\n\naxiosClient.interceptors.response.use(\n    (response) => {\n        if (response && response.data) {\n            return response;\n        }\n        return response;\n    },\n\n   async (error : any) => {\n        // Handle errors\n        if (error.response && error.response.status === 401) {\n            //refreshToken\n            const refreshTk = store.getState().auth.auth?.refreshToken?._id;\n            if (refreshTk) {\n                const refreshTokenBody = { refreshTk };\n                try {\n                    const res = await axios.post(\"/auth/login-refresh-token\", refreshTokenBody);\n                    if (res.status === 200) {\n                        //         store.dispatch(refreshToken(res.data as IRefreshTokenRes));\n                    }\n                } catch {\n                    store.dispatch(logout());\n                }\n            } else {\n                store.dispatch(logout());\n            }\n        }\n        throw error;\n    }\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}