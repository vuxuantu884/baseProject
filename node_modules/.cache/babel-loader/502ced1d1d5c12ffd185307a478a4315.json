{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/SignUp.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { ComponentSignInTel } from \"@components\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleTelSignIn = () => {\n  _s();\n\n  //page hooks\n  const dispatch = useDispatch();\n  const {\n    error,\n    success\n  } = useNotify();\n  const {\n    t\n  } = useTranslation();\n  const history = useHistory(); //page state\n\n  const [errorPhone, setError] = useState(); //page variable\n\n  const initialValues = {\n    phoneNumber: \"\"\n  };\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    if (!values.phoneNumber) {\n      setError(t(\"validation.isNumber\"));\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.loginPhone(values);\n      const data = res.data;\n\n      if (data) {\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.TEL,\n          isSignUp: false\n        }));\n        success(res.data.message);\n      }\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleSubmit,\n    isSubmitting,\n    setFieldTouched,\n    setFieldValue\n  } = useFormik({\n    initialValues: initialValues,\n    onSubmit: handleRegister\n  });\n\n  const handleChangePhoneNumber = (isValid, value, selectedCountryData, fullNumber) => {\n    if (!isValid) setError(t(\"validation.isNumber\"));else {\n      setError(\"\");\n    }\n    setFieldValue(\"phoneNumber\", fullNumber.replace(/(\\s|-)/g, \"\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComponentSignInTel, {\n    values: values,\n    handleSubmit: handleSubmit,\n    isSubmitting: isSubmitting,\n    setFieldTouched: setFieldTouched,\n    setFieldValue: setFieldValue,\n    handleChangePhoneNumber: handleChangePhoneNumber,\n    errorPhone: errorPhone\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleTelSignIn, \"ZhXQyhgTrqyr6wiBdLRIRy5hYz8=\", false, function () {\n  return [useDispatch, useNotify, useTranslation, useHistory, useFormik];\n});\n\n_c = ModuleTelSignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleTelSignIn\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/SignUp.tsx"],"names":["useFormik","useDispatch","useState","useTranslation","useHistory","ComponentSignInTel","authApi","setExternalLogin","setLoading","useNotify","enumExternalMethod","ModuleTelSignIn","dispatch","error","success","t","history","errorPhone","setError","initialValues","phoneNumber","handleRegister","values","setSubmitting","res","loginPhone","data","type","TEL","isSignUp","message","errors","response","handleSubmit","isSubmitting","setFieldTouched","setFieldValue","onSubmit","handleChangePhoneNumber","isValid","value","selectedCountryData","fullNumber","replace"],"mappings":"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","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { CountryData } from \"react-intl-tel-input\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\n\nimport { ComponentSignInTel, ComponentSignUpTel } from \"@components\";\nimport { IAuth, IPhone } from \"@interfaces\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod, PATH_SIGN_UP_OTP } from \"@configs\";\n\nexport const ModuleTelSignIn = () => {\n    //page hooks\n    const dispatch = useDispatch();\n    const { error, success } = useNotify();\n    const { t } = useTranslation();\n    const history = useHistory();\n    //page state\n    const [errorPhone, setError] = useState<string>();\n\n    //page variable\n    const initialValues: IPhone = {\n        phoneNumber: \"\",\n    };\n\n    const handleRegister = async (values: IPhone, { setSubmitting }: FormikHelpers<IPhone>) => {\n        if (!values.phoneNumber) {\n            setError(t(\"validation.isNumber\"));\n            return;\n        }\n\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.loginPhone(values);\n            const data = res.data as IAuth;\n            if (data) {\n                dispatch(setExternalLogin({ type: enumExternalMethod.TEL, isSignUp: false }));\n                success(res.data.message);\n            }\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const { values, handleSubmit, isSubmitting, setFieldTouched, setFieldValue } = useFormik({\n        initialValues: initialValues,\n        onSubmit: handleRegister,\n    });\n\n    const handleChangePhoneNumber = (\n        isValid: boolean,\n        value: string,\n        selectedCountryData: CountryData,\n        fullNumber: string\n    ) => {\n        if (!isValid) setError(t(\"validation.isNumber\"));\n        else {\n            setError(\"\");\n        }\n        setFieldValue(\"phoneNumber\", fullNumber.replace(/(\\s|-)/g, \"\"));\n    };\n\n    return (\n        <ComponentSignInTel\n            values={values}\n            handleSubmit={handleSubmit}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            handleChangePhoneNumber={handleChangePhoneNumber}\n            errorPhone={errorPhone}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}