{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/user/Setting.tsx\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport querystring from \"querystring\";\nimport { authApi, merchantApi } from \"@api\";\nimport { ComponentUserSetting, ComponentUserSettingSave } from \"@components\";\nimport { selectAuth, selectMerchant, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { useYup } from \"@validations\";\nimport { enumExternalAuthType, enumUseSetting, LINE_ACCESS_URL, LINE_SCOPE, PATH_LINE_LOGIN, PATH_USER_VERIFY, _10MB } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst state = {\n  type: enumExternalAuthType.LINK_LINE\n};\nexport const PageUserSetting = () => {\n  _s();\n\n  //page hooks\n  const dispatch = useDispatch();\n  const {\n    error,\n    success\n  } = useNotify();\n  const {\n    YubSUserSetting\n  } = useYup();\n  const {\n    t\n  } = useTranslation();\n  const history = useHistory(); //redux state\n\n  const {\n    userInfo\n  } = useSelector(selectAuth);\n  const {\n    lineIntegration\n  } = useSelector(selectMerchant); //page state\n\n  const [title, setTitle] = useState(\"\");\n  const [errorPhone, setError] = useState(); //page variable\n\n  const contact = userInfo === null || userInfo === void 0 ? void 0 : userInfo.contact;\n  const initialValue = {\n    avatar: (userInfo === null || userInfo === void 0 ? void 0 : userInfo.avatar) || \"\",\n    fullName: (contact === null || contact === void 0 ? void 0 : contact.fullName) || \"\",\n    dateOfBirth: (contact === null || contact === void 0 ? void 0 : contact.dateOfBirth) || new Date(Date.now()),\n    phoneNumber: (contact === null || contact === void 0 ? void 0 : contact.phoneNumber) || \"\",\n    phone: (contact === null || contact === void 0 ? void 0 : contact.phoneNumber) || \"\",\n    email: (contact === null || contact === void 0 ? void 0 : contact.email) || \"\"\n  };\n  const registerSchema = Yup.object().shape(YubSUserSetting);\n\n  const handleUploadImage = async e => {\n    dispatch(setLoading(true)); //@ts-ignore\n\n    const values = (e === null || e === void 0 ? void 0 : e.target.files[0]) || \"\";\n\n    if (values.size >= _10MB) {\n      error(t(\"validation.image.max_size\"));\n      dispatch(setLoading(false));\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"file\", values);\n\n    try {\n      const res = await merchantApi.uploadImage(formData);\n      await authApi.updateProfile({\n        avatar: res.data.publicUrl\n      });\n      setFieldValue(\"avatar\", res.data.publicUrl);\n    } catch (err) {\n      const data = err.response.data;\n      const mess = Array.isArray(data.errors) ? data.errors[0] : data.message;\n      error(mess);\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleSaveSetting = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    if (errorPhone) return;\n\n    if (!values.phoneNumber) {\n      setError(t(\"validation.isNumber\"));\n      return;\n    }\n\n    if (title === enumUseSetting.EMAIL) {\n      history.push(PATH_USER_VERIFY + \"/\" + enumUseSetting.EMAIL);\n      return;\n    }\n\n    if (title === enumUseSetting.PHONE_NUMBER) {\n      history.push(PATH_USER_VERIFY + \"/\" + enumUseSetting.PHONE_NUMBER);\n      return;\n    }\n\n    if (!values.dateOfBirth) return;\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.updateProfile({ ...values,\n        phoneNumber: values.phone,\n        avatar: values.avatar || undefined\n      });\n\n      if (res.data.message) {\n        success(res.data.message);\n      } else {\n        success(t(\"message.update.success\"));\n      }\n\n      setFieldValue(\"phoneNumber\", values.phone || \"\");\n    } catch (errors) {\n      const errorsResponse = errors.response.data.errors;\n\n      if (Array.isArray(errorsResponse) && errorsResponse.length) {\n        error(errorsResponse[0]);\n      } else {\n        error(t(\"message.update.fail\"));\n      }\n    } finally {\n      setTitle(\"\");\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleChangeTitle = title => {\n    setTitle(title);\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched,\n    setFieldValue,\n    setFieldTouched\n  } = useFormik({\n    initialValues: initialValue,\n    validationSchema: registerSchema,\n    onSubmit: handleSaveSetting,\n    enableReinitialize: true\n  });\n\n  const handleChangeDate = (date, dateString) => {\n    if (dateString) {\n      setFieldValue(\"dateOfBirth\", dateString);\n    } else {\n      setFieldValue(\"dateOfBirth\", new Date(Date.now()));\n    }\n  };\n\n  const handleLinkLine = () => {\n    var _lineIntegration$line;\n\n    //\n    const query = querystring.stringify({\n      response_type: \"code\",\n      client_id: (lineIntegration === null || lineIntegration === void 0 ? void 0 : (_lineIntegration$line = lineIntegration.lineLoginApi) === null || _lineIntegration$line === void 0 ? void 0 : _lineIntegration$line.channelID) || \"\",\n      state: JSON.stringify(state),\n      redirect_uri: `${process.env.REACT_APP_WEB_URL}${PATH_LINE_LOGIN}`\n    }); // Build the Line authorize URL.\n\n    const lineUrl = `${LINE_ACCESS_URL}/authorize?scope=${LINE_SCOPE}&${query}`;\n    window.location.href = lineUrl;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: title ? /*#__PURE__*/_jsxDEV(ComponentUserSettingSave, {\n      values: values,\n      handleChange: handleChange,\n      handleBlur: handleBlur,\n      handleSubmit: handleSubmit,\n      isSubmitting: isSubmitting,\n      errors: errors,\n      touched: touched,\n      title: title,\n      setFieldTouched: setFieldTouched,\n      errorPhone: errorPhone || \"\",\n      handleChangeDate: handleChangeDate,\n      setFieldValue: setFieldValue,\n      setError: setError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(ComponentUserSetting, {\n      handleUploadImage: handleUploadImage,\n      values: values,\n      handleChangeTitle: handleChangeTitle,\n      handleLinkLine: handleLinkLine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(PageUserSetting, \"Vr55tKX8tkU4utla4eqE01aNnDw=\", false, function () {\n  return [useDispatch, useNotify, useYup, useTranslation, useHistory, useSelector, useSelector, useFormik];\n});\n\n_c = PageUserSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageUserSetting\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/user/Setting.tsx"],"names":["useDispatch","useSelector","useState","useFormik","Yup","useTranslation","useHistory","querystring","authApi","merchantApi","ComponentUserSetting","ComponentUserSettingSave","selectAuth","selectMerchant","setLoading","useNotify","useYup","enumExternalAuthType","enumUseSetting","LINE_ACCESS_URL","LINE_SCOPE","PATH_LINE_LOGIN","PATH_USER_VERIFY","_10MB","state","type","LINK_LINE","PageUserSetting","dispatch","error","success","YubSUserSetting","t","history","userInfo","lineIntegration","title","setTitle","errorPhone","setError","contact","initialValue","avatar","fullName","dateOfBirth","Date","now","phoneNumber","phone","email","registerSchema","object","shape","handleUploadImage","e","values","target","files","size","formData","FormData","append","res","uploadImage","updateProfile","data","publicUrl","setFieldValue","err","response","mess","Array","isArray","errors","message","handleSaveSetting","setSubmitting","EMAIL","push","PHONE_NUMBER","undefined","errorsResponse","length","handleChangeTitle","handleChange","handleBlur","handleSubmit","isSubmitting","touched","setFieldTouched","initialValues","validationSchema","onSubmit","enableReinitialize","handleChangeDate","date","dateString","handleLinkLine","query","stringify","response_type","client_id","lineLoginApi","channelID","JSON","redirect_uri","process","env","REACT_APP_WEB_URL","lineUrl","window","location","href"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport { FormikHelpers, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport querystring from \"querystring\";\n\nimport { authApi, merchantApi } from \"@api\";\nimport { ComponentUserSetting, ComponentUserSettingSave } from \"@components\";\nimport { selectAuth, selectMerchant, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { IExternalAuthState, IUserSetting } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport {\n    enumExternalAuthType,\n    enumUseSetting,\n    LINE_ACCESS_URL,\n    LINE_SCOPE,\n    PATH_LINE_LOGIN,\n    PATH_USER_VERIFY,\n    _10MB,\n} from \"@configs\";\n\nconst state: IExternalAuthState = {\n    type: enumExternalAuthType.LINK_LINE,\n};\n\nexport const PageUserSetting = () => {\n    //page hooks\n    const dispatch = useDispatch();\n    const { error, success } = useNotify();\n    const { YubSUserSetting } = useYup();\n    const { t } = useTranslation();\n    const history = useHistory();\n    //redux state\n    const { userInfo } = useSelector(selectAuth);\n    const { lineIntegration } = useSelector(selectMerchant);\n\n    //page state\n    const [title, setTitle] = useState<enumUseSetting | \"\">(\"\");\n    const [errorPhone, setError] = useState<string>();\n\n    //page variable\n\n    const contact = userInfo?.contact;\n    const initialValue: IUserSetting = {\n        avatar: userInfo?.avatar || \"\",\n        fullName: contact?.fullName || \"\",\n        dateOfBirth: contact?.dateOfBirth || new Date(Date.now()),\n        phoneNumber: contact?.phoneNumber || \"\",\n        phone: contact?.phoneNumber || \"\",\n        email: contact?.email || \"\",\n    };\n    const registerSchema = Yup.object().shape(YubSUserSetting);\n\n    const handleUploadImage = async (e: React.ChangeEvent<HTMLInputElement> | undefined) => {\n        dispatch(setLoading(true));\n        //@ts-ignore\n        const values = (e?.target.files[0] as File) || \"\";\n        if (values.size >= _10MB) {\n            error(t(\"validation.image.max_size\"));\n            dispatch(setLoading(false));\n            return;\n        }\n        const formData = new FormData();\n        formData.append(\"file\", values);\n        try {\n            const res = await merchantApi.uploadImage(formData);\n            await authApi.updateProfile({\n                avatar: res.data.publicUrl,\n            });\n            setFieldValue(\"avatar\", res.data.publicUrl);\n        } catch (err: any) {\n            const data = err.response.data;\n            const mess = Array.isArray(data.errors) ? data.errors[0] : data.message;\n            error(mess);\n        } finally {\n            dispatch(setLoading(false));\n        }\n    };\n\n    const handleSaveSetting = async (\n        values: IUserSetting,\n        { setSubmitting }: FormikHelpers<IUserSetting>\n    ) => {\n        if (errorPhone) return;\n        if (!values.phoneNumber) {\n            setError(t(\"validation.isNumber\"));\n            return;\n        }\n        if (title === enumUseSetting.EMAIL) {\n            history.push(PATH_USER_VERIFY + \"/\" + enumUseSetting.EMAIL);\n            return;\n        }\n        if (title === enumUseSetting.PHONE_NUMBER) {\n            history.push(PATH_USER_VERIFY + \"/\" + enumUseSetting.PHONE_NUMBER);\n            return;\n        }\n        if (!values.dateOfBirth) return;\n\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.updateProfile({\n                ...values,\n                phoneNumber: values.phone,\n                avatar: values.avatar || undefined,\n            });\n            if (res.data.message) {\n                success(res.data.message);\n            } else {\n                success(t(\"message.update.success\"));\n            }\n            setFieldValue(\"phoneNumber\", values.phone || \"\");\n        } catch (errors: any) {\n            const errorsResponse = errors.response.data.errors;\n            if (Array.isArray(errorsResponse) && errorsResponse.length) {\n                error(errorsResponse[0]);\n            } else {\n                error(t(\"message.update.fail\"));\n            }\n        } finally {\n            setTitle(\"\");\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const handleChangeTitle = (title: enumUseSetting) => {\n        setTitle(title);\n    };\n\n    const {\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n    } = useFormik({\n        initialValues: initialValue,\n        validationSchema: registerSchema,\n        onSubmit: handleSaveSetting,\n        enableReinitialize: true,\n    });\n\n    const handleChangeDate = (date: moment.Moment | null, dateString: string) => {\n        if (dateString) {\n            setFieldValue(\"dateOfBirth\", dateString);\n        } else {\n            setFieldValue(\"dateOfBirth\", new Date(Date.now()));\n        }\n    };\n\n    const handleLinkLine = () => {\n        //\n        const query = querystring.stringify({\n            response_type: \"code\",\n            client_id: lineIntegration?.lineLoginApi?.channelID || \"\",\n            state: JSON.stringify(state),\n            redirect_uri: `${process.env.REACT_APP_WEB_URL}${PATH_LINE_LOGIN}`,\n        });\n        // Build the Line authorize URL.\n        const lineUrl = `${LINE_ACCESS_URL}/authorize?scope=${LINE_SCOPE}&${query}`;\n\n        window.location.href = lineUrl;\n    };\n\n    return (\n        <>\n            {title ? (\n                <ComponentUserSettingSave\n                    values={values}\n                    handleChange={handleChange}\n                    handleBlur={handleBlur}\n                    handleSubmit={handleSubmit}\n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    touched={touched}\n                    title={title}\n                    setFieldTouched={setFieldTouched}\n                    errorPhone={errorPhone || \"\"}\n                    handleChangeDate={handleChangeDate}\n                    setFieldValue={setFieldValue}\n                    setError={setError}\n                />\n            ) : (\n                <ComponentUserSetting\n                    handleUploadImage={handleUploadImage}\n                    values={values}\n                    handleChangeTitle={handleChangeTitle}\n                    handleLinkLine={handleLinkLine}\n                />\n            )}\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}