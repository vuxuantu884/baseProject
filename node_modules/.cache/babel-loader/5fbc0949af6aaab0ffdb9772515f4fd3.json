{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Google.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useCallback } from \"react\";\nimport GoogleLogin from \"react-google-login\";\nimport { useDispatch } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { ComponentGoogleButton } from \"@components\";\nimport { ggLogin, ggSignup, logout, setExternalLogin } from \"@redux\";\nimport { enumExternalAuthType, enumExternalMethod } from \"@configs\";\nimport { useNotify } from \"@utils\";\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleGoogle = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  //page hook\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useDispatch();\n  const {\n    error\n  } = useNotify();\n\n  const handleGGSuccess = async response => {\n    const accessToken = response === null || response === void 0 ? void 0 : response.accessToken;\n\n    if (!accessToken) {\n      // dispatch(\n      //     openToast({\n      //         message: t(\"page.auth.login_failed\"),\n      //         type: \"error\",\n      //         autoHideDuration: 2000,\n      //     })\n      // );\n      dispatch(logout());\n    }\n\n    try {\n      let response;\n\n      if (props.state.type === enumExternalAuthType.LOGIN) {\n        const ggLoginData = {\n          token: accessToken\n        };\n        response = await dispatch(ggLogin(ggLoginData)); //WHAT: wrap function in create async thunk\n        //@ts-ignore\n\n        unwrapResult(response);\n      } else if (props.state.type === enumExternalAuthType.SIGNUP) {\n        const ggSignupData = {\n          token: accessToken\n        };\n        response = await dispatch(ggSignup(ggSignupData)); //WHAT: wrap function in create async thunk\n        //@ts-ignore\n\n        unwrapResult(response);\n      } //@ts-ignore\n\n\n      if (!response.payload.accessToken) {\n        error(t(\"page.sign_in.email_password_correct\"));\n      } else {\n        dispatch(openToast({\n          message: t(\"page.auth.login_successfully\"),\n          type: \"success\",\n          autoHideDuration: 2000\n        }));\n      }\n    } catch (error) {\n      props.errorHandler(error);\n    }\n  };\n\n  const handleGGFail = () => {\n    dispatch(logout());\n  };\n\n  const handleOnClick = useCallback(() => {\n    dispatch(setExternalLogin({\n      type: enumExternalMethod.GOOGLE\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: process.env.REACT_APP_GOOGLE_ID || \"918086977464-i1t2r5gpv27chedpe4jv9raihno46qgt.apps.googleusercontent.com\",\n    render: renderProps => /*#__PURE__*/_jsxDEV(ComponentGoogleButton, {\n      onClick: renderProps.onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 38\n    }, this),\n    onSuccess: handleGGSuccess,\n    onFailure: handleGGFail,\n    cookiePolicy: \"single_host_origin\",\n    onRequest: handleOnClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}, \"Kc1b38ti03ANWla/m7m2TMjLwqc=\", false, function () {\n  return [useTranslation, useDispatch, useNotify];\n}));\n_c2 = ModuleGoogle;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModuleGoogle$memo\");\n$RefreshReg$(_c2, \"ModuleGoogle\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Google.tsx"],"names":["memo","useCallback","GoogleLogin","useDispatch","unwrapResult","ComponentGoogleButton","ggLogin","ggSignup","logout","setExternalLogin","enumExternalAuthType","enumExternalMethod","useNotify","useTranslation","ModuleGoogle","props","t","dispatch","error","handleGGSuccess","response","accessToken","state","type","LOGIN","ggLoginData","token","SIGNUP","ggSignupData","payload","openToast","message","autoHideDuration","errorHandler","handleGGFail","handleOnClick","GOOGLE","process","env","REACT_APP_GOOGLE_ID","renderProps","onClick"],"mappings":"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","sourcesContent":["import { memo, useCallback } from \"react\";\nimport GoogleLogin from \"react-google-login\";\nimport { useDispatch } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\nimport { ComponentGoogleButton } from \"@components\";\nimport { ggLogin, ggSignup, logout, setExternalLogin } from \"@redux\";\nimport { IExternalAuthState, IGGLogin, IGGSignup } from \"@interfaces\";\nimport { enumExternalAuthType, enumExternalMethod } from \"@configs\";\nimport { useNotify } from \"@utils\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface IProps {\n    errorHandler: (error: any) => void;\n    state: IExternalAuthState;\n}\n\nexport const ModuleGoogle = memo((props: IProps) => {\n    //page hook\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n    const { error } = useNotify();\n\n    const handleGGSuccess = async (response: any) => {\n        const accessToken = response?.accessToken;\n        if (!accessToken) {\n            // dispatch(\n            //     openToast({\n            //         message: t(\"page.auth.login_failed\"),\n            //         type: \"error\",\n            //         autoHideDuration: 2000,\n            //     })\n            // );\n\n            dispatch(logout());\n        }\n\n        try {\n            let response;\n            if (props.state.type === enumExternalAuthType.LOGIN) {\n                const ggLoginData: IGGLogin = {\n                    token: accessToken,\n                };\n                response = await dispatch(ggLogin(ggLoginData));\n                //WHAT: wrap function in create async thunk\n                //@ts-ignore\n                unwrapResult(response);\n            } else if (props.state.type === enumExternalAuthType.SIGNUP) {\n                const ggSignupData: IGGSignup = {\n                    token: accessToken,\n                };\n                response = await dispatch(ggSignup(ggSignupData));\n                //WHAT: wrap function in create async thunk\n                //@ts-ignore\n                unwrapResult(response);\n            }\n\n            //@ts-ignore\n            if (!response.payload.accessToken) {\n                error(t(\"page.sign_in.email_password_correct\"));\n            } else {\n                dispatch(\n                    openToast({\n                        message: t(\"page.auth.login_successfully\"),\n                        type: \"success\",\n                        autoHideDuration: 2000,\n                    })\n                );\n            }\n        } catch (error) {\n            props.errorHandler(error);\n        }\n    };\n\n    const handleGGFail = () => {\n        dispatch(logout());\n    };\n\n    const handleOnClick = useCallback(() => {\n        dispatch(setExternalLogin({ type: enumExternalMethod.GOOGLE }));\n    }, []);\n\n    return (\n        <GoogleLogin\n            clientId={\n                process.env.REACT_APP_GOOGLE_ID ||\n                \"918086977464-i1t2r5gpv27chedpe4jv9raihno46qgt.apps.googleusercontent.com\"\n            }\n            render={(renderProps) => <ComponentGoogleButton onClick={renderProps.onClick} />}\n            onSuccess={handleGGSuccess}\n            onFailure={handleGGFail}\n            cookiePolicy={\"single_host_origin\"}\n            onRequest={handleOnClick}\n        />\n    );\n});\n"]},"metadata":{},"sourceType":"module"}