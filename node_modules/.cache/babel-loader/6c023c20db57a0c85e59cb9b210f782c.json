{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/email/ResetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { ComponentPasswordEmail } from \"@components\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setAuth, setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod, PATH_SIGN_UP_EMAIL_FROM } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModuleEmailResetPassword = () => {\n  _s();\n\n  //page hooks\n  const {\n    YubEmailSignUp\n  } = useYup();\n  const dispatch = useDispatch();\n  const {\n    error\n  } = useNotify();\n  const history = useHistory(); //page variable\n\n  const initialValues = {\n    email: \"\"\n  };\n  const registerSchema = Yup.object().shape(YubEmailSignUp);\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    //\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.registerEmail(values.email);\n      const data = res.data;\n      dispatch(setAuth(data));\n      dispatch(setExternalLogin({\n        type: enumExternalMethod.EMAIL_NOT_SOCIAL,\n        isSignUp: true\n      }));\n      history.push(PATH_SIGN_UP_EMAIL_FROM);\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleRegister\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComponentPasswordEmail, {\n      handleBlur: handleBlur,\n      handleChange: handleChange,\n      errors: errors,\n      touched: touched,\n      values: values,\n      handleSubmit: handleSubmit,\n      isSubmitting: isSubmitting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ModuleEmailResetPassword, \"HKAq1ww1MKPo8TZh/5DAGIvIdhw=\", false, function () {\n  return [useYup, useDispatch, useNotify, useHistory, useFormik];\n});\n\n_c = ModuleEmailResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleEmailResetPassword\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/email/ResetPassword.tsx"],"names":["useFormik","Yup","useDispatch","useHistory","ComponentPasswordEmail","useYup","authApi","setAuth","setExternalLogin","setLoading","useNotify","enumExternalMethod","PATH_SIGN_UP_EMAIL_FROM","ModuleEmailResetPassword","YubEmailSignUp","dispatch","error","history","initialValues","email","registerSchema","object","shape","handleRegister","values","setSubmitting","res","registerEmail","data","type","EMAIL_NOT_SOCIAL","isSignUp","push","errors","message","response","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit"],"mappings":"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","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport { ComponentPasswordEmail } from \"@components\";\nimport { IAuth, IEmail } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setAuth, setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod, PATH_SIGN_UP_EMAIL_FROM } from \"@configs\";\n\nexport const ModuleEmailResetPassword = () => {\n    //page hooks\n    const { YubEmailSignUp } = useYup();\n    const dispatch = useDispatch();\n    const { error } = useNotify();\n    const history = useHistory();\n\n    //page variable\n    const initialValues: IEmail = {\n        email: \"\",\n    };\n    const registerSchema = Yup.object().shape(YubEmailSignUp);\n\n    const handleRegister = async (values: IEmail, { setSubmitting }: FormikHelpers<IEmail>) => {\n        //\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.registerEmail(values.email);\n            const data = res.data as IAuth;\n            dispatch(setAuth(data));\n            dispatch(\n                setExternalLogin({ type: enumExternalMethod.EMAIL_NOT_SOCIAL, isSignUp: true })\n            );\n            history.push(PATH_SIGN_UP_EMAIL_FROM);\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleRegister,\n        });\n    return (\n        <>\n            <ComponentPasswordEmail\n                handleBlur={handleBlur}\n                handleChange={handleChange}\n                errors={errors}\n                touched={touched}\n                values={values}\n                handleSubmit={handleSubmit}\n                isSubmitting={isSubmitting}\n            />\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}