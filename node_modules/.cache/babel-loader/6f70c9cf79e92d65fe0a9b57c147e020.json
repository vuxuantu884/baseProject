{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Tel.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { StyledSignUp, ComponentFromTel, StyledContainerSocial } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { useYup } from \"@validations\";\nimport { selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleTel = () => {\n  _s();\n\n  var _merchant$signUpSetti;\n\n  //page hook\n  const {\n    t\n  } = useTranslation();\n  const {\n    YubEmailTelUpForm\n  } = useYup();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify(); //redux state\n\n  const merchant = useSelector(selectMerchant); //page state\n\n  const [date, setDate] = useState({\n    day: \"\",\n    month: \"\",\n    year: \"\",\n    error: \"\"\n  });\n  const [surveyQuestions, setSurveyQuestions] = useState([]); //page variable\n\n  const daySelects = DAYS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const monthSelects = MONTHS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const yearSelects = YEARS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const initialValues = {\n    fullName: \"\",\n    dateOrBirth: \"\",\n    acceptTermsAndConditions: false\n  };\n  const registerSchema = Yup.object().shape(YubEmailTelUpForm);\n  const fields = (_merchant$signUpSetti = merchant.signUpSettings) === null || _merchant$signUpSetti === void 0 ? void 0 : _merchant$signUpSetti.fields;\n  useEffect(() => {\n    const data = (fields === null || fields === void 0 ? void 0 : fields.map(field => {\n      return {\n        questionId: field._id || \"\",\n        question: field.fieldName || \"\",\n        answers: []\n      };\n    })) || [];\n    setSurveyQuestions([...data]);\n  }, []);\n\n  const handleChangeDay = value => {\n    setDate({ ...date,\n      day: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeMonth = value => {\n    setDate({ ...date,\n      month: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeYear = value => {\n    setDate({ ...date,\n      year: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeAdditionField = value => {\n    //\n    value;\n  };\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    if (!date.day || !date.month || !date.year) {\n      setDate({ ...date,\n        error: t(\"validation.is_required\")\n      });\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n      const res = await authApi.createPassword({ ...values,\n        dateOrBirth: dateForm,\n        surveyQuestions\n      });\n\n      if (res) {\n        success(t(\"message.sign_up.success\"));\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.TEL,\n          isSignUp: false\n        }));\n        history.push(PATH_HOME);\n      }\n    } catch (errors) {\n      const errorsResponse = errors.response.data.errors;\n\n      if (Array.isArray(errorsResponse) && errorsResponse.length) {\n        error(errorsResponse[0]);\n      } else {\n        error(t(\"message.sign_up.fail\"));\n      }\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleRegister\n  });\n\n  const handleChangeAnswerByIndex = (answer, index) => {\n    if (Array.isArray(answer)) {\n      surveyQuestions[index].answers = answer;\n    } else {\n      surveyQuestions[index].answers = [answer];\n    }\n\n    setSurveyQuestions([...surveyQuestions]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledSignUp, {\n    children: [/*#__PURE__*/_jsxDEV(StyledContainerSocial, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: [t(\"page.auth.fill_in_the_information_and_receive_special_benefits\"), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComponentFromTel, {\n      handleBlur: handleBlur,\n      handleChange: handleChange,\n      errors: errors,\n      touched: touched,\n      values: values,\n      isSubmitting: isSubmitting,\n      handleSubmit: handleSubmit,\n      days: daySelects,\n      months: monthSelects,\n      years: yearSelects,\n      onChangeDay: handleChangeDay,\n      onChangeMonth: handleChangeMonth,\n      onChangeYear: handleChangeYear,\n      onChangeAdditionField: handleChangeAdditionField,\n      date: date,\n      surveyQuestions: surveyQuestions,\n      handleChangeAnswerByIndex: handleChangeAnswerByIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleTel, \"UGvH76NDCIiKKwpYsYM0BAbRvEg=\", false, function () {\n  return [useTranslation, useYup, useDispatch, useHistory, useNotify, useSelector, useFormik];\n});\n\n_c = ModuleTel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleTel\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Tel.tsx"],"names":["useEffect","useState","useTranslation","useFormik","Yup","useDispatch","useSelector","useHistory","StyledSignUp","ComponentFromTel","StyledContainerSocial","DAYS","enumExternalMethod","MONTHS","PATH_HOME","YEARS","useYup","selectMerchant","setExternalLogin","setLoading","authApi","useNotify","ModuleTel","t","YubEmailTelUpForm","dispatch","history","error","success","merchant","date","setDate","day","month","year","surveyQuestions","setSurveyQuestions","daySelects","map","item","id","label","monthSelects","yearSelects","initialValues","fullName","dateOrBirth","acceptTermsAndConditions","registerSchema","object","shape","fields","signUpSettings","data","field","questionId","_id","question","fieldName","answers","handleChangeDay","value","handleChangeMonth","handleChangeYear","handleChangeAdditionField","handleRegister","values","setSubmitting","dateForm","Date","res","createPassword","type","TEL","isSignUp","push","errors","errorsResponse","response","Array","isArray","length","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit","handleChangeAnswerByIndex","answer","index"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormikHelpers, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport { StyledSignUp, ComponentFromTel, StyledContainerSocial } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { IDate, IEmailForm, ISelect, ISurveyQuestions } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\n\nexport const ModuleTel = () => {\n    //page hook\n    const { t } = useTranslation();\n    const { YubEmailTelUpForm } = useYup();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { error, success } = useNotify();\n    //redux state\n    const merchant = useSelector(selectMerchant);\n    //page state\n    const [date, setDate] = useState<IDate>({\n        day: \"\",\n        month: \"\",\n        year: \"\",\n        error: \"\",\n    });\n    const [surveyQuestions, setSurveyQuestions] = useState<ISurveyQuestions[]>([]);\n    //page variable\n    const daySelects: ISelect[] = DAYS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const monthSelects: ISelect[] = MONTHS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const yearSelects: ISelect[] = YEARS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n\n    const initialValues: IEmailForm = {\n        fullName: \"\",\n        dateOrBirth: \"\",\n        acceptTermsAndConditions: false,\n    };\n    const registerSchema = Yup.object().shape(YubEmailTelUpForm);\n    const fields = merchant.signUpSettings?.fields;\n    useEffect(() => {\n        const data: ISurveyQuestions[] =\n            fields?.map((field) => {\n                return {\n                    questionId: field._id || \"\",\n                    question: field.fieldName || \"\",\n                    answers: [],\n                };\n            }) || [];\n        setSurveyQuestions([...data]);\n    }, []);\n\n    const handleChangeDay = (value: string) => {\n        setDate({\n            ...date,\n            day: value,\n            error: \"\",\n        });\n    };\n    const handleChangeMonth = (value: string) => {\n        setDate({\n            ...date,\n            month: value,\n            error: \"\",\n        });\n    };\n    const handleChangeYear = (value: string) => {\n        setDate({\n            ...date,\n            year: value,\n            error: \"\",\n        });\n    };\n\n    const handleChangeAdditionField = (value: string) => {\n        //\n        value;\n    };\n\n    const handleRegister = async (\n        values: IEmailForm,\n        { setSubmitting }: FormikHelpers<IEmailForm>\n    ) => {\n        if (!date.day || !date.month || !date.year) {\n            setDate({\n                ...date,\n                error: t(\"validation.is_required\"),\n            });\n            return;\n        }\n\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n            const res = await authApi.createPassword({\n                ...values,\n                dateOrBirth: dateForm,\n                surveyQuestions,\n            });\n            if (res) {\n                success(t(\"message.sign_up.success\"));\n                dispatch(setExternalLogin({ type: enumExternalMethod.TEL, isSignUp: false }));\n                history.push(PATH_HOME);\n            }\n        } catch (errors: any) {\n            const errorsResponse = errors.response.data.errors;\n            if (Array.isArray(errorsResponse) && errorsResponse.length) {\n                error(errorsResponse[0]);\n            } else {\n                error(t(\"message.sign_up.fail\"));\n            }\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleRegister,\n        });\n\n    const handleChangeAnswerByIndex = (answer: string | string[], index: number) => {\n        if (Array.isArray(answer)) {\n            surveyQuestions[index].answers = answer;\n        } else {\n            surveyQuestions[index].answers = [answer];\n        }\n        setSurveyQuestions([...surveyQuestions]);\n    };\n\n    return (\n        <StyledSignUp>\n            <StyledContainerSocial>\n                <div className=\"title\">\n                    {t(\"page.auth.fill_in_the_information_and_receive_special_benefits\")}{\" \"}\n                </div>\n            </StyledContainerSocial>\n            <ComponentFromTel\n                handleBlur={handleBlur}\n                handleChange={handleChange}\n                errors={errors}\n                touched={touched}\n                values={values}\n                isSubmitting={isSubmitting}\n                handleSubmit={handleSubmit}\n                days={daySelects}\n                months={monthSelects}\n                years={yearSelects}\n                onChangeDay={handleChangeDay}\n                onChangeMonth={handleChangeMonth}\n                onChangeYear={handleChangeYear}\n                onChangeAdditionField={handleChangeAdditionField}\n                date={date}\n                surveyQuestions={surveyQuestions}\n                handleChangeAnswerByIndex={handleChangeAnswerByIndex}\n            />\n        </StyledSignUp>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}