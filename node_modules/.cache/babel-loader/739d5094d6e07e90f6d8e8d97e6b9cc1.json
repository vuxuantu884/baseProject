{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Sign.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { ComponentSignUpTel } from \"@components\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleTelSignUp = () => {\n  _s();\n\n  //page hooks\n  const dispatch = useDispatch();\n  const {\n    error\n  } = useNotify(); //page state\n\n  const [errorPhone, setError] = useState(); //page variable\n\n  const initialValues = {\n    phoneNumber: \"\"\n  };\n\n  const handleRegister = async (values, {\n    setSubmitting\n  }) => {\n    //\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.registerPhone(values);\n\n      if (res.data.success) {\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.TEL\n        }));\n      }\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleSubmit,\n    isSubmitting,\n    setFieldTouched,\n    setFieldValue\n  } = useFormik({\n    initialValues: initialValues,\n    onSubmit: handleRegister\n  });\n\n  const handleChangePhoneNumber = (isValid, value, selectedCountryData, fullNumber, extension) => {\n    setFieldValue(\"phoneNumber\", fullNumber.replace(/(\\s|-)/g, \"\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComponentSignUpTel, {\n    values: values,\n    handleSubmit: handleSubmit,\n    isSubmitting: isSubmitting,\n    setFieldTouched: setFieldTouched,\n    setFieldValue: setFieldValue,\n    handleChangePhoneNumber: handleChangePhoneNumber\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleTelSignUp, \"malS9MkM/pEfnfRowMmv82L/i6Q=\", false, function () {\n  return [useDispatch, useNotify, useFormik];\n});\n\n_c = ModuleTelSignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleTelSignUp\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Sign.tsx"],"names":["useFormik","useDispatch","useState","ComponentSignUpTel","authApi","setExternalLogin","setLoading","useNotify","enumExternalMethod","ModuleTelSignUp","dispatch","error","errorPhone","setError","initialValues","phoneNumber","handleRegister","values","setSubmitting","res","registerPhone","data","success","type","TEL","errors","message","response","handleSubmit","isSubmitting","setFieldTouched","setFieldValue","onSubmit","handleChangePhoneNumber","isValid","value","selectedCountryData","fullNumber","extension","replace"],"mappings":";;;AAAA,SAASA,SAAT,QAAyC,QAAzC;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAGA,SAASC,kBAAT,QAAmC,aAAnC;AAGA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,QAA7C;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,kBAAT,QAAmC,UAAnC;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAYJ,SAAS,EAA3B,CAHiC,CAIjC;;AACA,QAAM,CAACK,UAAD,EAAaC,QAAb,IAAyBX,QAAQ,EAAvC,CALiC,CAOjC;;AACA,QAAMY,aAAqB,GAAG;AAC1BC,IAAAA,WAAW,EAAE;AADa,GAA9B;;AAIA,QAAMC,cAAc,GAAG,OAAOC,MAAP,EAAuB;AAAEC,IAAAA;AAAF,GAAvB,KAAoE;AACvF;AACA,QAAI;AACAA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAR,MAAAA,QAAQ,CAACJ,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,YAAMa,GAAG,GAAG,MAAMf,OAAO,CAACgB,aAAR,CAAsBH,MAAtB,CAAlB;;AACA,UAAIE,GAAG,CAACE,IAAJ,CAASC,OAAb,EAAsB;AAClBZ,QAAAA,QAAQ,CAACL,gBAAgB,CAAC;AAAEkB,UAAAA,IAAI,EAAEf,kBAAkB,CAACgB;AAA3B,SAAD,CAAjB,CAAR;AACH;AACJ,KAPD,CAOE,OAAOC,MAAP,EAAoB;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAcD,MAAM,CAACE,QAAP,CAAgBN,IAApC;AACAV,MAAAA,KAAK,CAACe,OAAD,CAAL;AACH,KAVD,SAUU;AACNR,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAR,MAAAA,QAAQ,CAACJ,UAAU,CAAC,KAAD,CAAX,CAAR;AACH;AACJ,GAhBD;;AAkBA,QAAM;AAAEW,IAAAA,MAAF;AAAUW,IAAAA,YAAV;AAAwBC,IAAAA,YAAxB;AAAsCC,IAAAA,eAAtC;AAAuDC,IAAAA;AAAvD,MAAyE/B,SAAS,CAAC;AACrFc,IAAAA,aAAa,EAAEA,aADsE;AAErFkB,IAAAA,QAAQ,EAAEhB;AAF2E,GAAD,CAAxF;;AAKA,QAAMiB,uBAAuB,GAAG,CAC5BC,OAD4B,EAE5BC,KAF4B,EAG5BC,mBAH4B,EAI5BC,UAJ4B,EAK5BC,SAL4B,KAM3B;AACDP,IAAAA,aAAa,CAAC,aAAD,EAAgBM,UAAU,CAACE,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAhB,CAAb;AACH,GARD;;AAUA,sBACI,QAAC,kBAAD;AACI,IAAA,MAAM,EAAEtB,MADZ;AAEI,IAAA,YAAY,EAAEW,YAFlB;AAGI,IAAA,YAAY,EAAEC,YAHlB;AAII,IAAA,eAAe,EAAEC,eAJrB;AAKI,IAAA,aAAa,EAAEC,aALnB;AAMI,IAAA,uBAAuB,EAAEE;AAN7B;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAvDM;;GAAMxB,e;UAEQR,W,EACCM,S,EA2B6DP,S;;;KA9BtES,e","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { CountryData } from \"react-intl-tel-input\";\n\nimport { ComponentSignUpTel } from \"@components\";\nimport { IPhone } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\n\nexport const ModuleTelSignUp = () => {\n    //page hooks\n    const dispatch = useDispatch();\n    const { error } = useNotify();\n    //page state\n    const [errorPhone, setError] = useState<string>();\n\n    //page variable\n    const initialValues: IPhone = {\n        phoneNumber: \"\",\n    };\n\n    const handleRegister = async (values: IPhone, { setSubmitting }: FormikHelpers<IPhone>) => {\n        //\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.registerPhone(values);\n            if (res.data.success) {\n                dispatch(setExternalLogin({ type: enumExternalMethod.TEL }));\n            }\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const { values, handleSubmit, isSubmitting, setFieldTouched, setFieldValue } = useFormik({\n        initialValues: initialValues,\n        onSubmit: handleRegister,\n    });\n\n    const handleChangePhoneNumber = (\n        isValid: boolean,\n        value: string,\n        selectedCountryData: CountryData,\n        fullNumber: string,\n        extension: string\n    ) => {\n        setFieldValue(\"phoneNumber\", fullNumber.replace(/(\\s|-)/g, \"\"));\n    };\n\n    return (\n        <ComponentSignUpTel\n            values={values}\n            handleSubmit={handleSubmit}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            handleChangePhoneNumber={handleChangePhoneNumber}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}