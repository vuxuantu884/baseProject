{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/email/Email.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTranslation } from \"react-i18next\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { ComponentFromEmail } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { useYup } from \"@validations\";\nimport { selectAuth, selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleEmail = () => {\n  _s();\n\n  var _merchant$signUpSetti;\n\n  //page hook\n  const {\n    t\n  } = useTranslation();\n  const {\n    YubEmailSignUpForm\n  } = useYup();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify(); //redux state\n\n  const merchant = useSelector(selectMerchant);\n  const {\n    userInfo\n  } = useSelector(selectAuth);\n  const [errorPhone, setError] = useState();\n  const [surveyQuestions, setSurveyQuestions] = useState([]); //page variable\n\n  const contact = userInfo === null || userInfo === void 0 ? void 0 : userInfo.contact;\n  const dateCurrent = new Date((contact === null || contact === void 0 ? void 0 : contact.dateOfBirth) || \"\");\n  const daySelects = DAYS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const monthSelects = MONTHS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const yearSelects = YEARS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  }); //page state\n\n  const [date, setDate] = useState({\n    day: dateCurrent.getDate().toString() || \"\",\n    month: (dateCurrent.getMonth() + 1).toString() || \"\",\n    year: dateCurrent.getFullYear().toString() || \"\",\n    error: \"\"\n  });\n  const initialValues = {\n    password: \"\",\n    conformPassword: \"\",\n    fullName: (contact === null || contact === void 0 ? void 0 : contact.fullName) || \"\",\n    phoneNumber: (contact === null || contact === void 0 ? void 0 : contact.phoneNumber) || \"\",\n    dateOfBirth: \"\",\n    acceptTermsAndConditions: false\n  };\n  const registerSchema = Yup.object().shape(YubEmailSignUpForm);\n  const fields = (_merchant$signUpSetti = merchant.signUpSettings) === null || _merchant$signUpSetti === void 0 ? void 0 : _merchant$signUpSetti.fields;\n  useEffect(() => {\n    const data = (fields === null || fields === void 0 ? void 0 : fields.map(field => {\n      return {\n        questionId: field._id || \"\",\n        question: field.fieldName || \"\",\n        answers: [],\n        propertyName: field.propertyName\n      };\n    })) || [];\n    setSurveyQuestions([...data]);\n  }, []);\n\n  const handleChangeDay = value => {\n    setDate({ ...date,\n      day: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeMonth = value => {\n    setDate({ ...date,\n      month: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeYear = value => {\n    setDate({ ...date,\n      year: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeAdditionField = value => {\n    //\n    value;\n  };\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    if (errorPhone) return;\n\n    if (!date.day || !date.month || !date.year) {\n      setDate({ ...date,\n        error: t(\"validation.is_required\")\n      });\n      return;\n    }\n\n    if (!values.phoneNumber) {\n      setError(t(\"validation.isNumber\"));\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n      const res = await authApi.createPassword({ ...values,\n        dateOfBirth: dateForm,\n        surveyQuestions,\n        phoneNumber: values.phone\n      });\n\n      if (res) {\n        success(t(\"message.sign_up.success\"));\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.EMAIL,\n          isSignUp: false\n        }));\n        history.push(PATH_HOME);\n      }\n    } catch (errors) {\n      const errorsResponse = errors.response.data.errors;\n\n      if (Array.isArray(errorsResponse) && errorsResponse.length) {\n        error(errorsResponse[0]);\n      } else {\n        error(t(\"message.sign_up.fail\"));\n      }\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched,\n    setFieldValue,\n    setFieldTouched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    enableReinitialize: true,\n    onSubmit: handleRegister\n  });\n\n  const handleChangeAnswerByIndex = (answer, index) => {\n    if (Array.isArray(answer)) {\n      surveyQuestions[index].answers = answer;\n    } else {\n      surveyQuestions[index].answers = [answer];\n    }\n\n    setSurveyQuestions([...surveyQuestions]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComponentFromEmail, {\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    errors: errors,\n    touched: touched,\n    values: values,\n    isSubmitting: isSubmitting,\n    days: daySelects,\n    months: monthSelects,\n    years: yearSelects,\n    onChangeDay: handleChangeDay,\n    onChangeMonth: handleChangeMonth,\n    onChangeYear: handleChangeYear,\n    onChangeAdditionField: handleChangeAdditionField,\n    handleSubmit: handleSubmit,\n    date: date,\n    surveyQuestions: surveyQuestions,\n    handleChangeAnswerByIndex: handleChangeAnswerByIndex,\n    setFieldTouched: setFieldTouched,\n    errorPhone: errorPhone || \"\",\n    setFieldValue: setFieldValue,\n    setError: setError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleEmail, \"nLHxmC7r7p4pI7M8Fuu1RRX6B0A=\", false, function () {\n  return [useTranslation, useYup, useDispatch, useHistory, useNotify, useSelector, useSelector, useFormik];\n});\n\n_c = ModuleEmail;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleEmail\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/email/Email.tsx"],"names":["useTranslation","useFormik","Yup","useEffect","useState","useDispatch","useSelector","useHistory","ComponentFromEmail","DAYS","enumExternalMethod","MONTHS","PATH_HOME","YEARS","useYup","selectAuth","selectMerchant","setExternalLogin","setLoading","authApi","useNotify","ModuleEmail","t","YubEmailSignUpForm","dispatch","history","error","success","merchant","userInfo","errorPhone","setError","surveyQuestions","setSurveyQuestions","contact","dateCurrent","Date","dateOfBirth","daySelects","map","item","id","label","monthSelects","yearSelects","date","setDate","day","getDate","toString","month","getMonth","year","getFullYear","initialValues","password","conformPassword","fullName","phoneNumber","acceptTermsAndConditions","registerSchema","object","shape","fields","signUpSettings","data","field","questionId","_id","question","fieldName","answers","propertyName","handleChangeDay","value","handleChangeMonth","handleChangeYear","handleChangeAdditionField","handleRegister","values","setSubmitting","dateForm","res","createPassword","phone","type","EMAIL","isSignUp","push","errors","errorsResponse","response","Array","isArray","length","handleChange","handleBlur","handleSubmit","isSubmitting","touched","setFieldValue","setFieldTouched","validationSchema","enableReinitialize","onSubmit","handleChangeAnswerByIndex","answer","index"],"mappings":"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","sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { useFormik, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport { ComponentFromEmail } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { IDate, IEmailForm, ISelect, ISurveyQuestions } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { selectAuth, selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\n\nexport const ModuleEmail = () => {\n    //page hook\n    const { t } = useTranslation();\n    const { YubEmailSignUpForm } = useYup();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { error, success } = useNotify();\n    //redux state\n    const merchant = useSelector(selectMerchant);\n    const { userInfo } = useSelector(selectAuth);\n    const [errorPhone, setError] = useState<string>();\n    const [surveyQuestions, setSurveyQuestions] = useState<ISurveyQuestions[]>([]);\n    //page variable\n    const contact = userInfo?.contact;\n    const dateCurrent = new Date(contact?.dateOfBirth || \"\");\n    const daySelects: ISelect[] = DAYS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const monthSelects: ISelect[] = MONTHS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const yearSelects: ISelect[] = YEARS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    //page state\n    const [date, setDate] = useState<IDate>({\n        day: dateCurrent.getDate().toString() || \"\",\n        month: (dateCurrent.getMonth() + 1).toString() || \"\",\n        year: dateCurrent.getFullYear().toString() || \"\",\n        error: \"\",\n    });\n\n    const initialValues: IEmailForm = {\n        password: \"\",\n        conformPassword: \"\",\n        fullName: contact?.fullName || \"\",\n        phoneNumber: contact?.phoneNumber || \"\",\n        dateOfBirth: \"\",\n        acceptTermsAndConditions: false,\n    };\n\n    const registerSchema = Yup.object().shape(YubEmailSignUpForm);\n    const fields = merchant.signUpSettings?.fields;\n\n    useEffect(() => {\n        const data: ISurveyQuestions[] =\n            fields?.map((field) => {\n                return {\n                    questionId: field._id || \"\",\n                    question: field.fieldName || \"\",\n                    answers: [],\n                    propertyName: field.propertyName,\n                };\n            }) || [];\n        setSurveyQuestions([...data]);\n    }, []);\n\n    const handleChangeDay = (value: string) => {\n        setDate({\n            ...date,\n            day: value,\n            error: \"\",\n        });\n    };\n    const handleChangeMonth = (value: string) => {\n        setDate({\n            ...date,\n            month: value,\n            error: \"\",\n        });\n    };\n    const handleChangeYear = (value: string) => {\n        setDate({\n            ...date,\n            year: value,\n            error: \"\",\n        });\n    };\n\n    const handleChangeAdditionField = (value: string) => {\n        //\n        value;\n    };\n\n    const handleRegister = async (\n        values: IEmailForm,\n        { setSubmitting }: FormikHelpers<IEmailForm>\n    ) => {\n        if (errorPhone) return;\n        if (!date.day || !date.month || !date.year) {\n            setDate({\n                ...date,\n                error: t(\"validation.is_required\"),\n            });\n            return;\n        }\n        if (!values.phoneNumber) {\n            setError(t(\"validation.isNumber\"));\n            return;\n        }\n\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n            const res = await authApi.createPassword({\n                ...values,\n                dateOfBirth: dateForm,\n                surveyQuestions,\n                phoneNumber: values.phone,\n            });\n            if (res) {\n                success(t(\"message.sign_up.success\"));\n                dispatch(setExternalLogin({ type: enumExternalMethod.EMAIL, isSignUp: false }));\n                history.push(PATH_HOME);\n            }\n        } catch (errors: any) {\n            const errorsResponse = errors.response.data.errors;\n            if (Array.isArray(errorsResponse) && errorsResponse.length) {\n                error(errorsResponse[0]);\n            } else {\n                error(t(\"message.sign_up.fail\"));\n            }\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const {\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n    } = useFormik({\n        initialValues: initialValues,\n        validationSchema: registerSchema,\n        enableReinitialize: true,\n        onSubmit: handleRegister,\n    });\n\n    const handleChangeAnswerByIndex = (answer: string | string[], index: number) => {\n        if (Array.isArray(answer)) {\n            surveyQuestions[index].answers = answer;\n        } else {\n            surveyQuestions[index].answers = [answer];\n        }\n        setSurveyQuestions([...surveyQuestions]);\n    };\n\n    return (\n        <ComponentFromEmail\n            handleBlur={handleBlur}\n            handleChange={handleChange}\n            errors={errors}\n            touched={touched}\n            values={values}\n            isSubmitting={isSubmitting}\n            days={daySelects}\n            months={monthSelects}\n            years={yearSelects}\n            onChangeDay={handleChangeDay}\n            onChangeMonth={handleChangeMonth}\n            onChangeYear={handleChangeYear}\n            onChangeAdditionField={handleChangeAdditionField}\n            handleSubmit={handleSubmit}\n            date={date}\n            surveyQuestions={surveyQuestions}\n            handleChangeAnswerByIndex={handleChangeAnswerByIndex}\n            setFieldTouched={setFieldTouched}\n            errorPhone={errorPhone || \"\"}\n            setFieldValue={setFieldValue}\n            setError={setError}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}