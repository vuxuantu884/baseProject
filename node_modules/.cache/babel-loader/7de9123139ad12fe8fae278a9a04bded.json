{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/user/Verify.tsx\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ComponentUserVerify } from \"@components\";\nimport { enumValidation } from \"@configs\";\nimport { setLoading } from \"@redux\";\nimport { verifyApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PageVerify = () => {\n  _s();\n\n  //page hooks\n  const {\n    type\n  } = useParams();\n  const dispatch = useDispatch();\n  const {\n    error,\n    success\n  } = useNotify();\n  const {\n    t\n  } = useTranslation(); //page props\n\n  const [otp, setOtp] = useState(\"\"); //page variable\n\n  const email = window.sessionStorage.getItem(\"email\") || \"\";\n\n  const handleChangeOtp = otp => {\n    setOtp(otp);\n  };\n\n  const handleSave = async () => {\n    if (otp.length < enumValidation.LENTH_OTP) return;\n\n    try {\n      dispatch(setLoading(true));\n      const res = await verifyApi.verifyEmailCode({\n        code: otp,\n        email\n      });\n      const message = res.data.message;\n\n      if (message) {\n        success(message);\n      } else {\n        success(t(\"message.verify_email.success\"));\n      }\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n\n      if (message) {\n        error(message);\n      } else {\n        error(t(\"message.verify_email.fail\"));\n      }\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComponentUserVerify, {\n    otp: otp,\n    handleChangeOtp: handleChangeOtp,\n    type: type,\n    handleSave: handleSave\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PageVerify, \"Aj8VaA7wBkUB2sGNb5jddqiPq7Q=\", false, function () {\n  return [useParams, useDispatch, useNotify, useTranslation];\n});\n\n_c = PageVerify;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageVerify\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/user/Verify.tsx"],"names":["useParams","useState","useDispatch","ComponentUserVerify","enumValidation","setLoading","verifyApi","useNotify","useTranslation","PageVerify","type","dispatch","error","success","t","otp","setOtp","email","window","sessionStorage","getItem","handleChangeOtp","handleSave","length","LENTH_OTP","res","verifyEmailCode","code","message","data","errors","response"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,mBAAT,QAAoC,aAApC;AACA,SAAyBC,cAAzB,QAA+C,UAA/C;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,SAASC,SAAT,QAA0B,MAA1B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,cAAT,QAA+B,eAA/B;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC5B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWV,SAAS,EAA1B;AACA,QAAMW,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAqBN,SAAS,EAApC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAQN,cAAc,EAA5B,CAL4B,CAM5B;;AACA,QAAM,CAACO,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,CAAS,EAAT,CAA9B,CAP4B,CAQ5B;;AACA,QAAMgB,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,KAA0C,EAAxD;;AAEA,QAAMC,eAAe,GAAIN,GAAD,IAAiB;AACrCC,IAAAA,MAAM,CAACD,GAAD,CAAN;AACH,GAFD;;AAIA,QAAMO,UAAU,GAAG,YAAY;AAC3B,QAAIP,GAAG,CAACQ,MAAJ,GAAanB,cAAc,CAACoB,SAAhC,EAA2C;;AAE3C,QAAI;AACAb,MAAAA,QAAQ,CAACN,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,YAAMoB,GAAG,GAAG,MAAMnB,SAAS,CAACoB,eAAV,CAA0B;AACxCC,QAAAA,IAAI,EAAEZ,GADkC;AAExCE,QAAAA;AAFwC,OAA1B,CAAlB;AAIA,YAAMW,OAAO,GAAGH,GAAG,CAACI,IAAJ,CAASD,OAAzB;;AACA,UAAIA,OAAJ,EAAa;AACTf,QAAAA,OAAO,CAACe,OAAD,CAAP;AACH,OAFD,MAEO;AACHf,QAAAA,OAAO,CAACC,CAAC,CAAC,8BAAD,CAAF,CAAP;AACH;AACJ,KAZD,CAYE,OAAOgB,MAAP,EAAoB;AAClB,YAAM;AAAEF,QAAAA;AAAF,UAAcE,MAAM,CAACC,QAAP,CAAgBF,IAApC;;AACA,UAAID,OAAJ,EAAa;AACThB,QAAAA,KAAK,CAACgB,OAAD,CAAL;AACH,OAFD,MAEO;AACHhB,QAAAA,KAAK,CAACE,CAAC,CAAC,2BAAD,CAAF,CAAL;AACH;AACJ,KAnBD,SAmBU;AACNH,MAAAA,QAAQ,CAACN,UAAU,CAAC,KAAD,CAAX,CAAR;AACH;AACJ,GAzBD;;AA2BA,sBACI,QAAC,mBAAD;AACI,IAAA,GAAG,EAAEU,GADT;AAEI,IAAA,eAAe,EAAEM,eAFrB;AAGI,IAAA,IAAI,EAAEX,IAHV;AAII,IAAA,UAAU,EAAEY;AAJhB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAlDM;;GAAMb,U;UAEQT,S,EACAE,W,EACUK,S,EACbC,c;;;KALLC,U","sourcesContent":["import { useParams } from \"react-router\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { ComponentUserVerify } from \"@components\";\nimport { enumUseSetting, enumValidation } from \"@configs\";\nimport { setLoading } from \"@redux\";\nimport { verifyApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const PageVerify = () => {\n    //page hooks\n    const { type } = useParams<{ type: enumUseSetting }>();\n    const dispatch = useDispatch();\n    const { error, success } = useNotify();\n    const { t } = useTranslation();\n    //page props\n    const [otp, setOtp] = useState<string>(\"\");\n    //page variable\n    const email = window.sessionStorage.getItem(\"email\") || \"\";\n\n    const handleChangeOtp = (otp: string) => {\n        setOtp(otp);\n    };\n\n    const handleSave = async () => {\n        if (otp.length < enumValidation.LENTH_OTP) return;\n\n        try {\n            dispatch(setLoading(true));\n            const res = await verifyApi.verifyEmailCode({\n                code: otp,\n                email,\n            });\n            const message = res.data.message;\n            if (message) {\n                success(message);\n            } else {\n                success(t(\"message.verify_email.success\"));\n            }\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            if (message) {\n                error(message);\n            } else {\n                error(t(\"message.verify_email.fail\"));\n            }\n        } finally {\n            dispatch(setLoading(false));\n        }\n    };\n\n    return (\n        <ComponentUserVerify\n            otp={otp}\n            handleChangeOtp={handleChangeOtp}\n            type={type}\n            handleSave={handleSave}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}