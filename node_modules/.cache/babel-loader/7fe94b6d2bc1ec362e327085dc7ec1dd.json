{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/authentication/SignIn.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Checkbox } from \"antd\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport queryString from \"querystring\";\nimport { ComponentGmailButton, ComponentHeaderAuth, ComponentPhoneButton, ComponentSocialMedia, SharedSocialLine, StyledContainerAuthSign, StyledContainerSignIn } from \"@components\";\nimport { lineLogin, lineSignup, logout, selectAuth, selectMerchant, setExternalLogin, setLiffId } from \"@redux\";\nimport { ModuleEmailSignIn, ModuleFaceBook, ModuleGoogle, ModuleLine, ModuleTelSignIn } from \"@modules\";\nimport { enumExternalMethod, PATH_RESET_PASSWORD_EMAIL, enumExternalAuthType, PATH_SIGN_UP, LINE_AUTH_URL, LIFF_ID } from \"@configs\";\nimport { useNotify } from \"@utils\";\nimport { LineApi } from \"@api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PageSignIn = () => {\n  _s();\n\n  //page hook\n  const {\n    t\n  } = useTranslation();\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify();\n  const dispatch = useDispatch(); //redux states\n\n  const merchant = useSelector(selectMerchant);\n  const {\n    externalLogin,\n    line\n  } = useSelector(selectAuth);\n  const [loginMethod, setLoginMethod] = useState(enumExternalMethod.EMAIL);\n  const [signinMethods, setSigninMethods] = useState([]);\n  const [remember, setRemember] = useState(false); //page variable\n\n  const state = {\n    type: enumExternalAuthType.LOGIN\n  };\n  const queryParams = queryString.parse(window.location.search.substring(1));\n\n  const errorHandler = errors => {\n    //handle Error\n    if (errors.response) {\n      const {\n        data,\n        status\n      } = errors.response;\n\n      if ((data === null || data === void 0 ? void 0 : data.message) && status !== 500) {\n        error(data === null || data === void 0 ? void 0 : data.message);\n      } else {\n        error(t(\"page.auth.sign_in_failed\"));\n      }\n\n      dispatch(logout());\n    }\n  };\n\n  useEffect(() => {\n    setSigninMethods([/*#__PURE__*/_jsxDEV(ModuleLine, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModuleFaceBook, {\n      errorHandler: errorHandler,\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModuleGoogle, {\n      errorHandler: errorHandler,\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComponentPhoneButton, {\n      onClick: handleSwitchPhone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]);\n\n    if (externalLogin === enumExternalMethod.LINE) {\n      externalLine();\n    }\n  }, []);\n  useEffect(() => {\n    if (queryParams[\"liff.state\"]) {\n      const liffId = queryParams[\"liff.state\"];\n      const value = LIFF_ID + \"=\";\n      const index = liffId.indexOf(value);\n      dispatch(setLiffId(liffId.slice(index + value.length + 1)));\n    }\n  }, [queryParams]);\n\n  const handleSignUp = () => {\n    history.push(PATH_SIGN_UP);\n  };\n\n  const handleForgotPassword = useCallback(() => {\n    history.push(PATH_RESET_PASSWORD_EMAIL);\n  }, []);\n  const handleToggleRemember = useCallback(() => {\n    setRemember(!remember);\n  }, [remember]);\n  const handleSwitchEmail = useCallback(() => {\n    setLoginMethod(enumExternalMethod.EMAIL);\n    setSigninMethods([/*#__PURE__*/_jsxDEV(ModuleLine, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModuleFaceBook, {\n      errorHandler: errorHandler,\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModuleGoogle, {\n      errorHandler: errorHandler,\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComponentPhoneButton, {\n      onClick: handleSwitchPhone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]);\n  }, [signinMethods]);\n  const handleSwitchPhone = useCallback(() => {\n    setLoginMethod(enumExternalMethod.TEL);\n    setSigninMethods([/*#__PURE__*/_jsxDEV(ModuleLine, {\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModuleFaceBook, {\n      errorHandler: errorHandler,\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModuleGoogle, {\n      errorHandler: errorHandler,\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComponentGmailButton, {\n      onClick: handleSwitchEmail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]);\n  }, [signinMethods]);\n\n  const externalLine = async () => {\n    const lineLoginApi = LineApi(LINE_AUTH_URL);\n\n    try {\n      if (line === null || line === void 0 ? void 0 : line.code) {\n        const lineState = JSON.parse(line === null || line === void 0 ? void 0 : line.state);\n\n        if (lineState.type === enumExternalAuthType.LOGIN) {\n          const lineAccessToken = await lineLoginApi.login(line === null || line === void 0 ? void 0 : line.code);\n\n          if (!lineAccessToken.data) {\n            dispatch(logout());\n          }\n\n          const lineLoginData = {\n            token: lineAccessToken.data.access_token,\n            refreshToken: lineAccessToken.data.refresh_token,\n            tokenId: lineAccessToken.data.id_token\n          };\n          const res = await dispatch(lineLogin(lineLoginData)); //WHAT: wrap function in create async thunk\n          //@ts-ignore\n\n          unwrapResult(res); //@ts-ignore\n\n          if (!res.payload.accessToken) {\n            error(t(\"page.auth.email_password_correct\"));\n          } else {\n            success(t(\"page.auth.login_successfully\"));\n          }\n        } else if (lineState.type === enumExternalAuthType.SIGNUP) {\n          const lineAccessToken = await lineLoginApi.login(line === null || line === void 0 ? void 0 : line.code);\n\n          if (!lineAccessToken.data) {\n            dispatch(logout());\n          }\n\n          dispatch(setExternalLogin({\n            type: enumExternalMethod.LINE,\n            isSignUp: true\n          }));\n          const lineSignupData = {\n            token: lineAccessToken.data.access_token,\n            refreshToken: lineAccessToken.data.refresh_token,\n            tokenId: lineAccessToken.data.id_token,\n            inviteId: lineState === null || lineState === void 0 ? void 0 : lineState.inviteId\n          };\n          const res = await dispatch(lineSignup(lineSignupData)); //WHAT: wrap function in create async thunk\n          //@ts-ignore\n\n          unwrapResult(res); //@ts-ignore\n\n          if (!res.payload.accessToken) {\n            error(t(\"page.auth.email_password_correct\"));\n          } else {\n            success(t(\"page.auth.login_successfully\"));\n          }\n        } else {\n          dispatch(logout());\n        }\n      } else {\n        dispatch(logout());\n      }\n    } catch (errors) {\n      errorHandler(errors);\n      dispatch(setExternalLogin({\n        type: enumExternalMethod.LINE,\n        isSignUp: false\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledContainerSignIn, {\n    color: merchant.themeColor,\n    children: /*#__PURE__*/_jsxDEV(ComponentHeaderAuth, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(StyledContainerAuthSign, {\n          bg_color: merchant.themeColor,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title_auth\",\n            children: [t(\"page.auth.sign_in_to\"), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 57\n            }, this), \" \", merchant.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"choose_auth\",\n            children: t(\"page.auth.choose_sign_in_method\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ComponentSocialMedia, {\n            socials: signinMethods\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SharedSocialLine, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), loginMethod === enumExternalMethod.EMAIL ? /*#__PURE__*/_jsxDEV(ModuleEmailSignIn, {\n            remember: remember\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(ModuleTelSignIn, {\n            remember: remember\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forgot\",\n            children: [t(\"page.auth.forgot\"), /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: handleForgotPassword,\n              children: t(\"page.auth.password\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"remember\",\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              value: remember,\n              onClick: handleToggleRemember,\n              children: t(\"page.auth.remember_me\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sign_in\",\n          children: [t(\"page.auth.already_have_an_account\"), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: handleSignUp,\n            children: t(\"page.auth.sign_up\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PageSignIn, \"+T3GIC6AtngOt1TXdEM2NjCXUMw=\", false, function () {\n  return [useTranslation, useHistory, useNotify, useDispatch, useSelector, useSelector];\n});\n\n_c = PageSignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageSignIn\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/authentication/SignIn.tsx"],"names":["useTranslation","useDispatch","useSelector","useHistory","useCallback","useEffect","useState","Checkbox","unwrapResult","queryString","ComponentGmailButton","ComponentHeaderAuth","ComponentPhoneButton","ComponentSocialMedia","SharedSocialLine","StyledContainerAuthSign","StyledContainerSignIn","lineLogin","lineSignup","logout","selectAuth","selectMerchant","setExternalLogin","setLiffId","ModuleEmailSignIn","ModuleFaceBook","ModuleGoogle","ModuleLine","ModuleTelSignIn","enumExternalMethod","PATH_RESET_PASSWORD_EMAIL","enumExternalAuthType","PATH_SIGN_UP","LINE_AUTH_URL","LIFF_ID","useNotify","LineApi","PageSignIn","t","history","error","success","dispatch","merchant","externalLogin","line","loginMethod","setLoginMethod","EMAIL","signinMethods","setSigninMethods","remember","setRemember","state","type","LOGIN","queryParams","parse","window","location","search","substring","errorHandler","errors","response","data","status","message","handleSwitchPhone","LINE","externalLine","liffId","value","index","indexOf","slice","length","handleSignUp","push","handleForgotPassword","handleToggleRemember","handleSwitchEmail","TEL","lineLoginApi","code","lineState","JSON","lineAccessToken","login","lineLoginData","token","access_token","refreshToken","refresh_token","tokenId","id_token","res","payload","accessToken","SIGNUP","isSignUp","lineSignupData","inviteId","themeColor","name"],"mappings":"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","sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Checkbox } from \"antd\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport queryString from \"querystring\";\n\nimport {\n    ComponentGmailButton,\n    ComponentHeaderAuth,\n    ComponentPhoneButton,\n    ComponentSocialMedia,\n    SharedSocialLine,\n    StyledContainerAuthSign,\n    StyledContainerSignIn,\n} from \"@components\";\nimport {\n    lineLogin,\n    lineSignup,\n    logout,\n    selectAuth,\n    selectMerchant,\n    setExternalLogin,\n    setLiffId,\n} from \"@redux\";\nimport {\n    ModuleEmailSignIn,\n    ModuleFaceBook,\n    ModuleGoogle,\n    ModuleLine,\n    ModuleTelSignIn,\n} from \"@modules\";\nimport {\n    enumExternalMethod,\n    PATH_RESET_PASSWORD_EMAIL,\n    enumExternalAuthType,\n    PATH_SIGN_UP,\n    LINE_AUTH_URL,\n    LIFF_ID,\n} from \"@configs\";\nimport { IExternalAuthState, ILineLogin, ILineSignup, ILineState } from \"@interfaces\";\nimport { useNotify } from \"@utils\";\nimport { LineApi } from \"@api\";\n\nexport const PageSignIn = () => {\n    //page hook\n    const { t } = useTranslation();\n    const history = useHistory();\n    const { error, success } = useNotify();\n    const dispatch = useDispatch();\n    //redux states\n    const merchant = useSelector(selectMerchant);\n    const { externalLogin, line } = useSelector(selectAuth);\n    const [loginMethod, setLoginMethod] = useState<enumExternalMethod>(enumExternalMethod.EMAIL);\n    const [signinMethods, setSigninMethods] = useState<JSX.Element[]>([]);\n    const [remember, setRemember] = useState<boolean>(false);\n    //page variable\n    const state: IExternalAuthState = {\n        type: enumExternalAuthType.LOGIN,\n    };\n    const queryParams = queryString.parse(window.location.search.substring(1));\n\n    const errorHandler = (errors: any) => {\n        //handle Error\n        if (errors.response) {\n            const { data, status } = errors.response;\n            if (data?.message && status !== 500) {\n                error(data?.message);\n            } else {\n                error(t(\"page.auth.sign_in_failed\"));\n            }\n            dispatch(logout());\n        }\n    };\n\n    useEffect(() => {\n        setSigninMethods([\n            <ModuleLine state={state} />,\n            <ModuleFaceBook errorHandler={errorHandler} state={state} />,\n            <ModuleGoogle errorHandler={errorHandler} state={state} />,\n            <ComponentPhoneButton onClick={handleSwitchPhone} />,\n        ]);\n        if (externalLogin === enumExternalMethod.LINE) {\n            externalLine();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (queryParams[\"liff.state\"]) {\n            const liffId = queryParams[\"liff.state\"] as string;\n            const value = LIFF_ID + \"=\";\n            const index = liffId.indexOf(value);\n            dispatch(setLiffId(liffId.slice(index + value.length + 1)));\n        }\n    }, [queryParams]);\n\n    const handleSignUp = () => {\n        history.push(PATH_SIGN_UP);\n    };\n\n    const handleForgotPassword = useCallback(() => {\n        history.push(PATH_RESET_PASSWORD_EMAIL);\n    }, []);\n\n    const handleToggleRemember = useCallback(() => {\n        setRemember(!remember);\n    }, [remember]);\n\n    const handleSwitchEmail = useCallback(() => {\n        setLoginMethod(enumExternalMethod.EMAIL);\n        setSigninMethods([\n            <ModuleLine state={state} />,\n            <ModuleFaceBook errorHandler={errorHandler} state={state} />,\n            <ModuleGoogle errorHandler={errorHandler} state={state} />,\n            <ComponentPhoneButton onClick={handleSwitchPhone} />,\n        ]);\n    }, [signinMethods]);\n\n    const handleSwitchPhone = useCallback(() => {\n        setLoginMethod(enumExternalMethod.TEL);\n        setSigninMethods([\n            <ModuleLine state={state} />,\n            <ModuleFaceBook errorHandler={errorHandler} state={state} />,\n            <ModuleGoogle errorHandler={errorHandler} state={state} />,\n            <ComponentGmailButton onClick={handleSwitchEmail} />,\n        ]);\n    }, [signinMethods]);\n\n    const externalLine = async () => {\n        const lineLoginApi = LineApi(LINE_AUTH_URL);\n        try {\n            if (line?.code) {\n                const lineState = JSON.parse(line?.state) as ILineState;\n                if (lineState.type === enumExternalAuthType.LOGIN) {\n                    const lineAccessToken = await lineLoginApi.login(line?.code);\n                    if (!lineAccessToken.data) {\n                        dispatch(logout());\n                    }\n                    const lineLoginData: ILineLogin = {\n                        token: lineAccessToken.data.access_token,\n                        refreshToken: lineAccessToken.data.refresh_token,\n                        tokenId: lineAccessToken.data.id_token,\n                    };\n                    const res = await dispatch(lineLogin(lineLoginData));\n                    //WHAT: wrap function in create async thunk\n                    //@ts-ignore\n                    unwrapResult(res);\n\n                    //@ts-ignore\n                    if (!res.payload.accessToken) {\n                        error(t(\"page.auth.email_password_correct\"));\n                    } else {\n                        success(t(\"page.auth.login_successfully\"));\n                    }\n                } else if (lineState.type === enumExternalAuthType.SIGNUP) {\n                    const lineAccessToken = await lineLoginApi.login(line?.code);\n                    if (!lineAccessToken.data) {\n                        dispatch(logout());\n                    }\n                    dispatch(\n                        setExternalLogin({\n                            type: enumExternalMethod.LINE,\n                            isSignUp: true,\n                        })\n                    );\n\n                    const lineSignupData: ILineSignup = {\n                        token: lineAccessToken.data.access_token,\n                        refreshToken: lineAccessToken.data.refresh_token,\n                        tokenId: lineAccessToken.data.id_token,\n                        inviteId: lineState?.inviteId,\n                    };\n\n                    const res = await dispatch(lineSignup(lineSignupData));\n                    //WHAT: wrap function in create async thunk\n                    //@ts-ignore\n                    unwrapResult(res);\n\n                    //@ts-ignore\n                    if (!res.payload.accessToken) {\n                        error(t(\"page.auth.email_password_correct\"));\n                    } else {\n                        success(t(\"page.auth.login_successfully\"));\n                    }\n                } else {\n                    dispatch(logout());\n                }\n            } else {\n                dispatch(logout());\n            }\n        } catch (errors) {\n            errorHandler(errors);\n            dispatch(\n                setExternalLogin({\n                    type: enumExternalMethod.LINE,\n                    isSignUp: false,\n                })\n            );\n        }\n    };\n\n    return (\n        <StyledContainerSignIn color={merchant.themeColor}>\n            <ComponentHeaderAuth>\n                <>\n                    <StyledContainerAuthSign bg_color={merchant.themeColor}>\n                        <div className=\"title_auth\">\n                            {t(\"page.auth.sign_in_to\")} <br /> {merchant.name}\n                        </div>\n                        <div className=\"choose_auth\">{t(\"page.auth.choose_sign_in_method\")}</div>\n                        <ComponentSocialMedia socials={signinMethods} />\n                        <SharedSocialLine />\n                        {loginMethod === enumExternalMethod.EMAIL ? (\n                            <ModuleEmailSignIn remember={remember} />\n                        ) : (\n                            <ModuleTelSignIn remember={remember} />\n                        )}\n\n                        {/* <ModuleEmailSignIn /> */}\n                        <div className=\"forgot\">\n                            {t(\"page.auth.forgot\")}\n                            <span onClick={handleForgotPassword}>{t(\"page.auth.password\")}</span>\n                        </div>\n                        <div className=\"remember\">\n                            <Checkbox value={remember} onClick={handleToggleRemember}>\n                                {t(\"page.auth.remember_me\")}\n                            </Checkbox>\n                        </div>\n                    </StyledContainerAuthSign>\n                    {/* <ModuleEmailSignIn handleForgotPassword={handleForgotPassword} /> */}\n                    <div className=\"sign_in\">\n                        {t(\"page.auth.already_have_an_account\")}\n                        <span onClick={handleSignUp}>{t(\"page.auth.sign_up\")}</span>\n                    </div>\n                </>\n            </ComponentHeaderAuth>\n        </StyledContainerSignIn>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}