{"ast":null,"code":"import axios from \"axios\";\n\nconst queryString = require(\"query-string\");\n\nimport { logout, openToast, setAuth, store } from \"@redux\";\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-Requested-With\": \"XMLHttpRequest\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n}); // axiosClient.interceptors.request.use((config) => {\n//     const token = store.getState().auth.auth?.accessToken;\n//     config.headers[\"access-token\"] = token;\n//     config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n//     config.headers[enumHttpHeader.MerchantId] =\n//         store.getState().auth.merchantId || store.getState().merchant._id;\n//     config.headers[\"traffic-source-id\"] = store.getState().merchant.trafficSourceId;\n//     return config;\n// });\n\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response;\n  }\n\n  return response;\n}, async error => {\n  // Handle errors\n  if (error.response && error.response.status === 401) {\n    var _store$getState$auth$, _store$getState$auth$2;\n\n    //refreshToken\n    const refreshTk = (_store$getState$auth$ = store.getState().auth.auth) === null || _store$getState$auth$ === void 0 ? void 0 : (_store$getState$auth$2 = _store$getState$auth$.refreshToken) === null || _store$getState$auth$2 === void 0 ? void 0 : _store$getState$auth$2._id;\n\n    if (refreshTk) {\n      const refreshTokenBody = {\n        refreshToken: refreshTk\n      };\n      const config = {\n        headers: {\n          \"client-id\": enumClientIdEnum.MERCHANT\n        }\n      };\n\n      try {\n        const res = await axios.post(process.env.REACT_APP_API_URL + \"auth/login-refresh-token\", refreshTokenBody, config);\n\n        if (res.status === 200) {\n          store.dispatch(setAuth(res.data));\n          const originalRequest = error.config;\n          const newToken = res.data.accessToken;\n          originalRequest.headers[\"access-token\"] = newToken;\n          return Promise.resolve(axiosClient(originalRequest));\n        }\n      } catch {\n        store.dispatch(openToast({\n          message: \"You need to login again\",\n          type: \"warning\",\n          autoHideDuration: 2000\n        }));\n        store.dispatch(logout());\n      }\n    } else {\n      store.dispatch(openToast({\n        message: \"You need to login again\",\n        type: \"warning\",\n        autoHideDuration: 2000\n      }));\n      store.dispatch(logout());\n    }\n  }\n\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/BaseProject/src/API/axiosClient.ts"],"names":["axios","queryString","require","logout","openToast","setAuth","store","axiosClient","create","baseURL","process","env","REACT_APP_API_URL","headers","paramsSerializer","params","stringify","interceptors","response","use","data","error","status","refreshTk","getState","auth","refreshToken","_id","refreshTokenBody","config","enumClientIdEnum","MERCHANT","res","post","dispatch","originalRequest","newToken","accessToken","Promise","resolve","message","type","autoHideDuration"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,OAA5B,EAAqCC,KAArC,QAAkD,QAAlD;AAEA,MAAMC,WAAW,GAAGP,KAAK,CAACQ,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADQ;AAG7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB,kBADX;AAEL,wBAAoB;AAFf,GAHoB;AAQ7BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYd,WAAW,CAACe,SAAZ,CAAsBD,MAAtB;AARD,CAAb,CAApB,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEAR,WAAW,CAACU,YAAZ,CAAyBC,QAAzB,CAAkCC,GAAlC,CACKD,QAAD,IAAc;AACV,MAAIA,QAAQ,IAAIA,QAAQ,CAACE,IAAzB,EAA+B;AAC3B,WAAOF,QAAP;AACH;;AACD,SAAOA,QAAP;AACH,CANL,EAQI,MAAOG,KAAP,IAAsB;AAClB;AACA,MAAIA,KAAK,CAACH,QAAN,IAAkBG,KAAK,CAACH,QAAN,CAAeI,MAAf,KAA0B,GAAhD,EAAqD;AAAA;;AACjD;AACA,UAAMC,SAAS,4BAAGjB,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBA,IAAzB,oFAAG,sBAA4BC,YAA/B,2DAAG,uBAA0CC,GAA5D;;AACA,QAAIJ,SAAJ,EAAe;AACX,YAAMK,gBAAgB,GAAG;AAAEF,QAAAA,YAAY,EAAEH;AAAhB,OAAzB;AACA,YAAMM,MAAM,GAAG;AAEXhB,QAAAA,OAAO,EAAE;AACL,uBAAaiB,gBAAgB,CAACC;AADzB;AAFE,OAAf;;AAMA,UAAI;AACA,cAAMC,GAAG,GAAG,MAAMhC,KAAK,CAACiC,IAAN,CACbvB,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAA+B,0BADlB,EAEdgB,gBAFc,EAGdC,MAHc,CAAlB;;AAKA,YAAIG,GAAG,CAACV,MAAJ,KAAe,GAAnB,EAAwB;AACpBhB,UAAAA,KAAK,CAAC4B,QAAN,CAAe7B,OAAO,CAAC2B,GAAG,CAACZ,IAAL,CAAtB;AACA,gBAAMe,eAAe,GAAGd,KAAK,CAACQ,MAA9B;AACA,gBAAMO,QAAQ,GAAGJ,GAAG,CAACZ,IAAJ,CAASiB,WAA1B;AACAF,UAAAA,eAAe,CAACtB,OAAhB,CAAwB,cAAxB,IAA0CuB,QAA1C;AACA,iBAAOE,OAAO,CAACC,OAAR,CAAgBhC,WAAW,CAAC4B,eAAD,CAA3B,CAAP;AACH;AACJ,OAbD,CAaE,MAAM;AACJ7B,QAAAA,KAAK,CAAC4B,QAAN,CACI9B,SAAS,CAAC;AACNoC,UAAAA,OAAO,EAAE,yBADH;AAENC,UAAAA,IAAI,EAAE,SAFA;AAGNC,UAAAA,gBAAgB,EAAE;AAHZ,SAAD,CADb;AAOApC,QAAAA,KAAK,CAAC4B,QAAN,CAAe/B,MAAM,EAArB;AACH;AACJ,KA/BD,MA+BO;AACHG,MAAAA,KAAK,CAAC4B,QAAN,CACI9B,SAAS,CAAC;AACNoC,QAAAA,OAAO,EAAE,yBADH;AAENC,QAAAA,IAAI,EAAE,SAFA;AAGNC,QAAAA,gBAAgB,EAAE;AAHZ,OAAD,CADb;AAOApC,MAAAA,KAAK,CAAC4B,QAAN,CAAe/B,MAAM,EAArB;AACH;AACJ;;AACD,QAAMkB,KAAN;AACH,CAxDL;AA2DA,eAAed,WAAf","sourcesContent":["import axios from \"axios\";\nconst queryString = require(\"query-string\");\n\nimport { logout, openToast, setAuth, store } from \"@redux\";\n\nconst axiosClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n\n    paramsSerializer: (params) => queryString.stringify(params),\n});\n\n// axiosClient.interceptors.request.use((config) => {\n//     const token = store.getState().auth.auth?.accessToken;\n//     config.headers[\"access-token\"] = token;\n//     config.headers[enumHttpHeader.ClientId] = enumClientIdEnum.USER;\n//     config.headers[enumHttpHeader.MerchantId] =\n//         store.getState().auth.merchantId || store.getState().merchant._id;\n//     config.headers[\"traffic-source-id\"] = store.getState().merchant.trafficSourceId;\n\n//     return config;\n// });\n\naxiosClient.interceptors.response.use(\n    (response) => {\n        if (response && response.data) {\n            return response;\n        }\n        return response;\n    },\n\n    async (error: any) => {\n        // Handle errors\n        if (error.response && error.response.status === 401) {\n            //refreshToken\n            const refreshTk = store.getState().auth.auth?.refreshToken?._id;\n            if (refreshTk) {\n                const refreshTokenBody = { refreshToken: refreshTk };\n                const config = {\n\n                    headers: {\n                        \"client-id\": enumClientIdEnum.MERCHANT,\n                    },\n                };\n                try {\n                    const res = await axios.post(\n                         process.env.REACT_APP_API_URL+ \"auth/login-refresh-token\",\n                        refreshTokenBody,\n                        config\n                    );\n                    if (res.status === 200) {\n                        store.dispatch(setAuth(res.data));\n                        const originalRequest = error.config;\n                        const newToken = res.data.accessToken;\n                        originalRequest.headers[\"access-token\"] = newToken;\n                        return Promise.resolve(axiosClient(originalRequest));\n                    }\n                } catch {\n                    store.dispatch(\n                        openToast({\n                            message: \"You need to login again\",\n                            type: \"warning\",\n                            autoHideDuration: 2000,\n                        })\n                    );\n                    store.dispatch(logout());\n                }\n            } else {\n                store.dispatch(\n                    openToast({\n                        message: \"You need to login again\",\n                        type: \"warning\",\n                        autoHideDuration: 2000,\n                    })\n                );\n                store.dispatch(logout());\n            }\n        }\n        throw error;\n    }\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}