{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Main.tsx\",\n    _s = $RefreshSig$();\n\nimport { Switch } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ComponentAppRoute } from \"@components\";\nimport { routes } from \"@configs\";\nimport { ComponentToast } from \"src/Components/Toast\";\nimport { merchantApi } from \"@api\";\nimport { addConfigClient, getInfo, resetConfirm, selectAuth, selectMerchant, setMainColor, setMerchant } from \"@redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleMain = () => {\n  _s();\n\n  //page hooks\n  const dispatch = useDispatch(); //redux state\n\n  const {\n    _id\n  } = useSelector(selectMerchant);\n  const {\n    auth\n  } = useSelector(selectAuth); //page variable\n\n  const token = auth === null || auth === void 0 ? void 0 : auth.accessToken;\n  useEffect(() => {\n    (async () => {\n      if (_id) {\n        const merchantConfig = await merchantApi.getMerchantConfig();\n        const merchant = merchantConfig.data.merchant;\n\n        if (merchant) {\n          dispatch(setMerchant(merchant));\n          dispatch(setMainColor(merchant.themeColor));\n        }\n\n        dispatch(addConfigClient({\n          merchantId: _id\n        }));\n      }\n    })();\n\n    if (token) {\n      dispatch(getInfo());\n    }\n\n    dispatch(resetConfirm());\n  }, []);\n  useEffect(() => {\n    if (_id) {\n      dispatch(addConfigClient({\n        merchantId: _id\n      }));\n    }\n  }, [_id]);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      children: routes.map((e, key) => /*#__PURE__*/_jsxDEV(ComponentAppRoute, { ...e\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComponentToast, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleMain, \"hdHTk+LYZoD46YNQC4muicqAfIg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ModuleMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleMain\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Main.tsx"],"names":["Switch","BrowserRouter","useEffect","useDispatch","useSelector","ComponentAppRoute","routes","ComponentToast","merchantApi","addConfigClient","getInfo","resetConfirm","selectAuth","selectMerchant","setMainColor","setMerchant","ModuleMain","dispatch","_id","auth","token","accessToken","merchantConfig","getMerchantConfig","merchant","data","themeColor","merchantId","map","e","key"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,WAAT,QAA4B,MAA5B;AACA,SACIC,eADJ,EAEIC,OAFJ,EAGIC,YAHJ,EAIIC,UAJJ,EAKIC,cALJ,EAMIC,YANJ,EAOIC,WAPJ,QAQO,QARP;;AAUA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC5B;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B,CAF4B,CAG5B;;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAUd,WAAW,CAACS,cAAD,CAA3B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAWf,WAAW,CAACQ,UAAD,CAA5B,CAL4B,CAM5B;;AACA,QAAMQ,KAAK,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEE,WAApB;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,UAAIgB,GAAJ,EAAS;AACL,cAAMI,cAAc,GAAG,MAAMd,WAAW,CAACe,iBAAZ,EAA7B;AACA,cAAMC,QAAQ,GAAGF,cAAc,CAACG,IAAf,CAAoBD,QAArC;;AACA,YAAIA,QAAJ,EAAc;AACVP,UAAAA,QAAQ,CAACF,WAAW,CAACS,QAAD,CAAZ,CAAR;AACAP,UAAAA,QAAQ,CAACH,YAAY,CAACU,QAAQ,CAACE,UAAV,CAAb,CAAR;AACH;;AACDT,QAAAA,QAAQ,CACJR,eAAe,CAAC;AACZkB,UAAAA,UAAU,EAAET;AADA,SAAD,CADX,CAAR;AAKH;AACJ,KAdD;;AAeA,QAAIE,KAAJ,EAAW;AACPH,MAAAA,QAAQ,CAACP,OAAO,EAAR,CAAR;AACH;;AACDO,IAAAA,QAAQ,CAACN,YAAY,EAAb,CAAR;AACH,GApBQ,EAoBN,EApBM,CAAT;AAsBAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgB,GAAJ,EAAS;AACLD,MAAAA,QAAQ,CACJR,eAAe,CAAC;AACZkB,QAAAA,UAAU,EAAET;AADA,OAAD,CADX,CAAR;AAKH;AACJ,GARQ,EAQN,CAACA,GAAD,CARM,CAAT;AAUA,sBACI,QAAC,aAAD;AAAA,4BACI,QAAC,MAAD;AAAA,gBACKZ,MAAM,CAACsB,GAAP,CAAW,CAACC,CAAD,EAAYC,GAAZ,kBACR,QAAC,iBAAD,OAAiCD;AAAjC,SAAwBC,GAAxB;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAnDM;;GAAMd,U;UAEQb,W,EAEDC,W,EACCA,W;;;KALRY,U","sourcesContent":["import { Switch } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ComponentAppRoute } from \"@components\";\nimport { routes } from \"@configs\";\nimport { IMerchant, IRoute } from \"@interfaces\";\nimport { ComponentToast } from \"src/Components/Toast\";\nimport { merchantApi } from \"@api\";\nimport {\n    addConfigClient,\n    getInfo,\n    resetConfirm,\n    selectAuth,\n    selectMerchant,\n    setMainColor,\n    setMerchant,\n} from \"@redux\";\n\nexport const ModuleMain = () => {\n    //page hooks\n    const dispatch = useDispatch();\n    //redux state\n    const { _id } = useSelector(selectMerchant);\n    const { auth } = useSelector(selectAuth);\n    //page variable\n    const token = auth?.accessToken;\n\n    useEffect(() => {\n        (async () => {\n            if (_id) {\n                const merchantConfig = await merchantApi.getMerchantConfig();\n                const merchant = merchantConfig.data.merchant as IMerchant;\n                if (merchant) {\n                    dispatch(setMerchant(merchant));\n                    dispatch(setMainColor(merchant.themeColor));\n                }\n                dispatch(\n                    addConfigClient({\n                        merchantId: _id,\n                    })\n                );\n            }\n        })();\n        if (token) {\n            dispatch(getInfo());\n        }\n        dispatch(resetConfirm());\n    }, []);\n\n    useEffect(() => {\n        if (_id) {\n            dispatch(\n                addConfigClient({\n                    merchantId: _id,\n                })\n            );\n        }\n    }, [_id]);\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                {routes.map((e: IRoute, key) => (\n                    <ComponentAppRoute key={key} {...e} />\n                ))}\n            </Switch>\n            <ComponentToast />\n        </BrowserRouter>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}