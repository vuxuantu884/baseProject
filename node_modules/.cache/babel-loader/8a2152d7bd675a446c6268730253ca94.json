{"ast":null,"code":"import _defineProperty from\"/home/vuxuantu/Desktop/rewarding-platform-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/vuxuantu/Desktop/rewarding-platform-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/vuxuantu/Desktop/rewarding-platform-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/vuxuantu/Desktop/rewarding-platform-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// a little function to help us with reordering the result\nexport var reorder=function reorder(list,startIndex,endIndex){var result=Array.from(list);var _result$splice=result.splice(startIndex,1),_result$splice2=_slicedToArray(_result$splice,1),removed=_result$splice2[0];result.splice(endIndex,0,removed);return result;};export var SharedReOrderQuoteMap=function SharedReOrderQuoteMap(_ref){var _objectSpread3;var quoteMap=_ref.quoteMap,source=_ref.source,destination=_ref.destination;var current=_toConsumableArray(quoteMap[source.droppableId]);var next=_toConsumableArray(quoteMap[destination.droppableId]);var target=current[source.index];if(source.droppableId===destination.droppableId){var reordered=reorder(current,source.index,destination.index);var _result=_objectSpread(_objectSpread({},quoteMap),{},_defineProperty({},source.droppableId,reordered));return{quoteMap:_result};}current.splice(source.index,1);next.splice(destination.index,0,target);var result=_objectSpread(_objectSpread({},quoteMap),{},(_objectSpread3={},_defineProperty(_objectSpread3,source.droppableId,current),_defineProperty(_objectSpread3,destination.droppableId,next),_objectSpread3));return{quoteMap:result};};","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Components/shared/TaskBoard/ReOrder.tsx"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","SharedReOrderQuoteMap","quoteMap","source","destination","current","droppableId","next","target","index","reordered"],"mappings":"qqBAAA;AAEA,MAAO,IAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,CAAcC,UAAd,CAAkCC,QAAlC,CAAuD,CAC1E,GAAMC,CAAAA,MAAM,CAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf,CACA,mBAAkBG,MAAM,CAACG,MAAP,CAAcL,UAAd,CAA0B,CAA1B,CAAlB,kDAAOM,OAAP,oBACAJ,MAAM,CAACG,MAAP,CAAcJ,QAAd,CAAwB,CAAxB,CAA2BK,OAA3B,EAEA,MAAOJ,CAAAA,MAAP,CACH,CANM,CAcP,MAAO,IAAMK,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,MAA4D,uBAAzDC,CAAAA,QAAyD,MAAzDA,QAAyD,CAA/CC,MAA+C,MAA/CA,MAA+C,CAAvCC,WAAuC,MAAvCA,WAAuC,CAC7F,GAAMC,CAAAA,OAAO,oBAAOH,QAAQ,CAACC,MAAM,CAACG,WAAR,CAAf,CAAb,CACA,GAAMC,CAAAA,IAAI,oBAAOL,QAAQ,CAACE,WAAW,CAACE,WAAb,CAAf,CAAV,CACA,GAAME,CAAAA,MAAM,CAAGH,OAAO,CAACF,MAAM,CAACM,KAAR,CAAtB,CAEA,GAAIN,MAAM,CAACG,WAAP,GAAuBF,WAAW,CAACE,WAAvC,CAAoD,CAChD,GAAMI,CAAAA,SAAS,CAAGlB,OAAO,CAACa,OAAD,CAAUF,MAAM,CAACM,KAAjB,CAAwBL,WAAW,CAACK,KAApC,CAAzB,CACA,GAAMb,CAAAA,OAAM,gCACLM,QADK,wBAEPC,MAAM,CAACG,WAFA,CAEcI,SAFd,EAAZ,CAIA,MAAO,CACHR,QAAQ,CAAEN,OADP,CAAP,CAGH,CAEDS,OAAO,CAACN,MAAR,CAAeI,MAAM,CAACM,KAAtB,CAA6B,CAA7B,EACAF,IAAI,CAACR,MAAL,CAAYK,WAAW,CAACK,KAAxB,CAA+B,CAA/B,CAAkCD,MAAlC,EAEA,GAAMZ,CAAAA,MAAM,gCACLM,QADK,uDAEPC,MAAM,CAACG,WAFA,CAEcD,OAFd,iCAGPD,WAAW,CAACE,WAHL,CAGmBC,IAHnB,kBAAZ,CAMA,MAAO,CACHL,QAAQ,CAAEN,MADP,CAAP,CAGH,CA5BM","sourcesContent":["// a little function to help us with reordering the result\n\nexport const reorder = (list: any[], startIndex: number, endIndex: number) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\ninterface ISharedReOrderProps {\n    quoteMap: any;\n    source: any;\n    destination: any;\n}\n\nexport const SharedReOrderQuoteMap = ({ quoteMap, source, destination }: ISharedReOrderProps) => {\n    const current = [...quoteMap[source.droppableId]];\n    const next = [...quoteMap[destination.droppableId]];\n    const target = current[source.index];\n\n    if (source.droppableId === destination.droppableId) {\n        const reordered = reorder(current, source.index, destination.index);\n        const result = {\n            ...quoteMap,\n            [source.droppableId]: reordered,\n        };\n        return {\n            quoteMap: result,\n        };\n    }\n\n    current.splice(source.index, 1);\n    next.splice(destination.index, 0, target);\n\n    const result = {\n        ...quoteMap,\n        [source.droppableId]: current,\n        [destination.droppableId]: next,\n    };\n\n    return {\n        quoteMap: result,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}