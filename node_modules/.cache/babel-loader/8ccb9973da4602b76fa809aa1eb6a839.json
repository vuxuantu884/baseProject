{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport queryString from \"querystring\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { enumExternalAuthType, enumExternalMethod, LINE_AUTH_URL, PATH_SIGN_UP_SOCIAL_TEL } from \"@configs\";\nimport { lineLogin, lineSignup, logout, selectAuth, setExternalLogin } from \"@redux\";\nimport { LineApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { useTranslation } from \"react-i18next\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PageLineLogin = () => {\n  _s();\n\n  //page hook\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify();\n  const {\n    t\n  } = useTranslation(); //redux state\n\n  const {\n    line,\n    externalLogin\n  } = useSelector(selectAuth); //page variable\n\n  const queryParams = queryString.parse(window.location.search.substring(1));\n  useEffect(() => {\n    if (externalLogin === enumExternalMethod.LINE) {\n      externalLine();\n    }\n\n    if (queryParams.code) {\n      if (queryParams.state) {\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.LINE,\n          line: {\n            code: queryParams.code.toString(),\n            state: queryParams.state.toString()\n          }\n        }));\n      } else {\n        dispatch(logout());\n      }\n    } else {\n      dispatch(logout());\n    }\n\n    history.push(PATH_SIGN_UP_SOCIAL_TEL);\n  }, [queryParams]);\n\n  const externalLine = async () => {\n    const lineLoginApi = LineApi(LINE_AUTH_URL);\n\n    try {\n      if (line === null || line === void 0 ? void 0 : line.code) {\n        const lineState = JSON.parse(line === null || line === void 0 ? void 0 : line.state);\n\n        if (lineState.type === enumExternalAuthType.LOGIN) {\n          const lineAccessToken = await lineLoginApi.login(line === null || line === void 0 ? void 0 : line.code);\n\n          if (!lineAccessToken.data) {\n            dispatch(logout());\n          }\n\n          const lineLoginData = {\n            token: lineAccessToken.data.access_token,\n            refreshToken: lineAccessToken.data.refresh_token,\n            tokenId: lineAccessToken.data.id_token\n          };\n          const res = await dispatch(lineLogin(lineLoginData)); //WHAT: wrap function in create async thunk\n          //@ts-ignore\n\n          unwrapResult(res); //@ts-ignore\n\n          if (!res.payload.accessToken) {\n            error(t(\"page.auth.email_password_correct\"));\n          } else {\n            success(t(\"page.auth.login_successfully\"));\n          }\n        } else if (lineState.type === enumExternalAuthType.SIGNUP) {\n          const lineAccessToken = await lineLoginApi.login(line === null || line === void 0 ? void 0 : line.code);\n\n          if (!lineAccessToken.data) {\n            dispatch(logout());\n          }\n\n          const lineSignupData = {\n            token: lineAccessToken.data.access_token,\n            refreshToken: lineAccessToken.data.refresh_token,\n            tokenId: lineAccessToken.data.id_token,\n            inviteId: lineState === null || lineState === void 0 ? void 0 : lineState.inviteId\n          };\n          const res = await dispatch(lineSignup(lineSignupData)); //WHAT: wrap function in create async thunk\n          //@ts-ignore\n\n          unwrapResult(res); //@ts-ignore\n\n          if (!res.payload.accessToken) {\n            error(t(\"page.auth.email_password_correct\"));\n          } else {\n            success(t(\"page.auth.login_successfully\"));\n          }\n        } else {\n          dispatch(logout());\n        }\n      } else {\n        dispatch(logout());\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  };\n\n  const errorHandler = error => {\n    //handle Error\n    if (error.response) {\n      const {\n        status,\n        data\n      } = error.response;\n\n      if ((data === null || data === void 0 ? void 0 : data.message) && status !== 500) {\n        error(data === null || data === void 0 ? void 0 : data.message);\n      } else {\n        error(t(\"page.auth.login_failed\"));\n      }\n    } else {\n      success(t(\"page.auth.login_failed\"));\n    }\n\n    dispatch(logout());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(PageLineLogin, \"GWeOaHNOLhYf23qmtMd3NraRPfs=\", false, function () {\n  return [useDispatch, useHistory, useNotify, useTranslation, useSelector];\n});\n\n_c = PageLineLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageLineLogin\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/LineLogin.tsx"],"names":["queryString","useEffect","useHistory","useDispatch","useSelector","enumExternalAuthType","enumExternalMethod","LINE_AUTH_URL","PATH_SIGN_UP_SOCIAL_TEL","lineLogin","lineSignup","logout","selectAuth","setExternalLogin","LineApi","useNotify","useTranslation","PageLineLogin","dispatch","history","error","success","t","line","externalLogin","queryParams","parse","window","location","search","substring","LINE","externalLine","code","state","type","toString","push","lineLoginApi","lineState","JSON","LOGIN","lineAccessToken","login","data","lineLoginData","token","access_token","refreshToken","refresh_token","tokenId","id_token","res","unwrapResult","payload","accessToken","SIGNUP","lineSignupData","inviteId","errorHandler","response","status","message"],"mappings":"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","sourcesContent":["import queryString from \"querystring\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n    enumExternalAuthType,\n    enumExternalMethod,\n    LINE_AUTH_URL,\n    PATH_SIGN_UP_SOCIAL_TEL,\n} from \"@configs\";\nimport { lineLogin, lineSignup, logout, selectAuth, setExternalLogin } from \"@redux\";\nimport { LineApi } from \"@api\";\nimport { ILineLogin, ILineSignup, ILineState } from \"@interfaces\";\nimport { useNotify } from \"@utils\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const PageLineLogin = () => {\n    //page hook\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { error, success } = useNotify();\n    const { t } = useTranslation();\n    //redux state\n    const { line, externalLogin } = useSelector(selectAuth);\n    //page variable\n    const queryParams = queryString.parse(window.location.search.substring(1));\n\n    useEffect(() => {\n        if (externalLogin === enumExternalMethod.LINE) {\n            externalLine();\n        }\n        if (queryParams.code) {\n            if (queryParams.state) {\n                dispatch(\n                    setExternalLogin({\n                        type: enumExternalMethod.LINE,\n                        line: {\n                            code: queryParams.code.toString(),\n                            state: queryParams.state.toString(),\n                        },\n                    })\n                );\n            } else {\n                dispatch(logout());\n            }\n        } else {\n            dispatch(logout());\n        }\n        history.push(PATH_SIGN_UP_SOCIAL_TEL);\n    }, [queryParams]);\n\n    const externalLine = async () => {\n        const lineLoginApi = LineApi(LINE_AUTH_URL);\n        try {\n            if (line?.code) {\n                const lineState = JSON.parse(line?.state) as ILineState;\n                if (lineState.type === enumExternalAuthType.LOGIN) {\n                    const lineAccessToken = await lineLoginApi.login(line?.code);\n                    if (!lineAccessToken.data) {\n                        dispatch(logout());\n                    }\n                    const lineLoginData: ILineLogin = {\n                        token: lineAccessToken.data.access_token,\n                        refreshToken: lineAccessToken.data.refresh_token,\n                        tokenId: lineAccessToken.data.id_token,\n                    };\n                    const res = await dispatch(lineLogin(lineLoginData));\n                    //WHAT: wrap function in create async thunk\n                    //@ts-ignore\n                    unwrapResult(res);\n\n                    //@ts-ignore\n                    if (!res.payload.accessToken) {\n                        error(t(\"page.auth.email_password_correct\"));\n                    } else {\n                        success(t(\"page.auth.login_successfully\"));\n                    }\n                } else if (lineState.type === enumExternalAuthType.SIGNUP) {\n                    const lineAccessToken = await lineLoginApi.login(line?.code);\n                    if (!lineAccessToken.data) {\n                        dispatch(logout());\n                    }\n\n                    const lineSignupData: ILineSignup = {\n                        token: lineAccessToken.data.access_token,\n                        refreshToken: lineAccessToken.data.refresh_token,\n                        tokenId: lineAccessToken.data.id_token,\n                        inviteId: lineState?.inviteId,\n                    };\n\n                    const res = await dispatch(lineSignup(lineSignupData));\n                    //WHAT: wrap function in create async thunk\n                    //@ts-ignore\n                    unwrapResult(res);\n\n                    //@ts-ignore\n                    if (!res.payload.accessToken) {\n                        error(t(\"page.auth.email_password_correct\"));\n                    } else {\n                        success(t(\"page.auth.login_successfully\"));\n                    }\n                } else {\n                    dispatch(logout());\n                }\n            } else {\n                dispatch(logout());\n            }\n        } catch (error) {\n            errorHandler(error);\n        }\n    };\n\n    const errorHandler = (error: any) => {\n        //handle Error\n        if (error.response) {\n            const { status, data } = error.response;\n            if (data?.message && status !== 500) {\n                error(data?.message);\n            } else {\n                error(t(\"page.auth.login_failed\"));\n            }\n        } else {\n            success(t(\"page.auth.login_failed\"));\n        }\n        dispatch(logout());\n    };\n\n    return <></>;\n};\n"]},"metadata":{},"sourceType":"module"}