{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport queryString from \"querystring\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { enumExternalMethod, PATH_SIGN_UP_SOCIAL_TEL } from \"@configs\";\nimport { logout, selectAuth, setExternalLogin } from \"@redux\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PageLineLogin = () => {\n  _s();\n\n  //page hook\n  const dispatch = useDispatch();\n  const history = useHistory(); //redux state\n\n  const {\n    externalLogin\n  } = useSelector(selectAuth); //page variable\n\n  const queryParams = queryString.parse(window.location.search.substring(1));\n  useEffect(() => {\n    if (externalLogin === enumExternalMethod.LINE) {// externalLine();\n    }\n  }, []);\n  useEffect(() => {\n    if (queryParams.code) {\n      if (queryParams.state) {\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.LINE,\n          line: {\n            code: queryParams.code.toString(),\n            state: queryParams.state.toString()\n          }\n        }));\n      } else {\n        dispatch(logout());\n      }\n    } else {\n      dispatch(logout());\n    }\n\n    history.push(PATH_SIGN_UP_SOCIAL_TEL);\n  }, [queryParams]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(PageLineLogin, \"jD8xc2SyQnNBXmtlZ/rvdyKUuMo=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = PageLineLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageLineLogin\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/LineLogin.tsx"],"names":["queryString","useEffect","useHistory","useDispatch","useSelector","enumExternalMethod","PATH_SIGN_UP_SOCIAL_TEL","logout","selectAuth","setExternalLogin","PageLineLogin","dispatch","history","externalLogin","queryParams","parse","window","location","search","substring","LINE","code","state","type","line","toString","push"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,kBAAT,EAA6BC,uBAA7B,QAA4D,UAA5D;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,gBAA7B,QAAqD,QAArD;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,OAAO,GAAGV,UAAU,EAA1B,CAH+B,CAI/B;;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAoBT,WAAW,CAACI,UAAD,CAArC,CAL+B,CAM/B;;AACA,QAAMM,WAAW,GAAGd,WAAW,CAACe,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAiC,CAAjC,CAAlB,CAApB;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,aAAa,KAAKR,kBAAkB,CAACe,IAAzC,EAA+C,CAC3C;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;AAMAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,WAAW,CAACO,IAAhB,EAAsB;AAClB,UAAIP,WAAW,CAACQ,KAAhB,EAAuB;AACnBX,QAAAA,QAAQ,CACJF,gBAAgB,CAAC;AACbc,UAAAA,IAAI,EAAElB,kBAAkB,CAACe,IADZ;AAEbI,UAAAA,IAAI,EAAE;AACFH,YAAAA,IAAI,EAAEP,WAAW,CAACO,IAAZ,CAAiBI,QAAjB,EADJ;AAEFH,YAAAA,KAAK,EAAER,WAAW,CAACQ,KAAZ,CAAkBG,QAAlB;AAFL;AAFO,SAAD,CADZ,CAAR;AASH,OAVD,MAUO;AACHd,QAAAA,QAAQ,CAACJ,MAAM,EAAP,CAAR;AACH;AACJ,KAdD,MAcO;AACHI,MAAAA,QAAQ,CAACJ,MAAM,EAAP,CAAR;AACH;;AACDK,IAAAA,OAAO,CAACc,IAAR,CAAapB,uBAAb;AACH,GAnBQ,EAmBN,CAACQ,WAAD,CAnBM,CAAT;AAqBA,sBAAO,qCAAP;AACH,CArCM;;GAAMJ,a;UAEQP,W,EACDD,U,EAEUE,W;;;KALjBM,a","sourcesContent":["import queryString from \"querystring\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { enumExternalMethod, PATH_SIGN_UP_SOCIAL_TEL } from \"@configs\";\nimport { logout, selectAuth, setExternalLogin } from \"@redux\";\n\nexport const PageLineLogin = () => {\n    //page hook\n    const dispatch = useDispatch();\n    const history = useHistory();\n    //redux state\n    const { externalLogin } = useSelector(selectAuth);\n    //page variable\n    const queryParams = queryString.parse(window.location.search.substring(1));\n\n    useEffect(() => {\n        if (externalLogin === enumExternalMethod.LINE) {\n            // externalLine();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (queryParams.code) {\n            if (queryParams.state) {\n                dispatch(\n                    setExternalLogin({\n                        type: enumExternalMethod.LINE,\n                        line: {\n                            code: queryParams.code.toString(),\n                            state: queryParams.state.toString(),\n                        },\n                    })\n                );\n            } else {\n                dispatch(logout());\n            }\n        } else {\n            dispatch(logout());\n        }\n        history.push(PATH_SIGN_UP_SOCIAL_TEL);\n    }, [queryParams]);\n\n    return <></>;\n};\n"]},"metadata":{},"sourceType":"module"}