{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/email/ResetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { ComponentPasswordEmail } from \"@components\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { PATH_SIGN_IN } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleEmailResetPassword = () => {\n  _s();\n\n  //page hooks\n  const {\n    YubEmailSignUp\n  } = useYup();\n  const dispatch = useDispatch();\n  const {\n    error,\n    success\n  } = useNotify();\n  const history = useHistory(); //page variable\n\n  const initialValues = {\n    email: \"\"\n  };\n  const registerSchema = Yup.object().shape(YubEmailSignUp);\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    //\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.sendResetPassword(values.email);\n      const data = res.data;\n\n      if (data.success) {\n        success(data.message);\n        history.push(PATH_SIGN_IN);\n      }\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleRegister\n  });\n  return /*#__PURE__*/_jsxDEV(ComponentPasswordEmail, {\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    errors: errors,\n    touched: touched,\n    values: values,\n    handleSubmit: handleSubmit,\n    isSubmitting: isSubmitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleEmailResetPassword, \"uWiEXv87G0AW4r99C5tMIJ0FedI=\", false, function () {\n  return [useYup, useDispatch, useNotify, useHistory, useFormik];\n});\n\n_c = ModuleEmailResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleEmailResetPassword\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/email/ResetPassword.tsx"],"names":["useFormik","Yup","useDispatch","useHistory","ComponentPasswordEmail","useYup","authApi","setLoading","useNotify","PATH_SIGN_IN","ModuleEmailResetPassword","YubEmailSignUp","dispatch","error","success","history","initialValues","email","registerSchema","object","shape","handleRegister","values","setSubmitting","res","sendResetPassword","data","message","push","errors","response","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit"],"mappings":";;;AAAA,SAASA,SAAT,QAAyC,QAAzC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,sBAAT,QAAuC,aAAvC;AAEA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,YAAT,QAA6B,UAA7B;;AAEA,OAAO,MAAMC,wBAAwB,GAAG,MAAM;AAAA;;AAC1C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAqBN,MAAM,EAAjC;AACA,QAAMO,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAqBN,SAAS,EAApC;AACA,QAAMO,OAAO,GAAGZ,UAAU,EAA1B,CAL0C,CAO1C;;AACA,QAAMa,aAAqB,GAAG;AAC1BC,IAAAA,KAAK,EAAE;AADmB,GAA9B;AAGA,QAAMC,cAAc,GAAGjB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmBT,cAAnB,CAAvB;;AAEA,QAAMU,cAAc,GAAG,OAAOC,MAAP,WAAoE;AAAA,QAA7C;AAAEC,MAAAA;AAAF,KAA6C;;AACvF;AACA,QAAI;AACAA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAX,MAAAA,QAAQ,CAACL,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,YAAMiB,GAAG,GAAG,MAAMlB,OAAO,CAACmB,iBAAR,CAA0BH,MAAM,CAACL,KAAjC,CAAlB;AACA,YAAMS,IAAI,GAAGF,GAAG,CAACE,IAAjB;;AACA,UAAIA,IAAI,CAACZ,OAAT,EAAkB;AACdA,QAAAA,OAAO,CAACY,IAAI,CAACC,OAAN,CAAP;AACAZ,QAAAA,OAAO,CAACa,IAAR,CAAanB,YAAb;AACH;AACJ,KATD,CASE,OAAOoB,MAAP,EAAoB;AAClB,YAAM;AAAEF,QAAAA;AAAF,UAAcE,MAAM,CAACC,QAAP,CAAgBJ,IAApC;AACAb,MAAAA,KAAK,CAACc,OAAD,CAAL;AACH,KAZD,SAYU;AACNJ,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAX,MAAAA,QAAQ,CAACL,UAAU,CAAC,KAAD,CAAX,CAAR;AACH;AACJ,GAlBD;;AAoBA,QAAM;AAAEe,IAAAA,MAAF;AAAUS,IAAAA,YAAV;AAAwBC,IAAAA,UAAxB;AAAoCC,IAAAA,YAApC;AAAkDC,IAAAA,YAAlD;AAAgEL,IAAAA,MAAhE;AAAwEM,IAAAA;AAAxE,MACFnC,SAAS,CAAC;AACNgB,IAAAA,aAAa,EAAEA,aADT;AAENoB,IAAAA,gBAAgB,EAAElB,cAFZ;AAGNmB,IAAAA,QAAQ,EAAEhB;AAHJ,GAAD,CADb;AAOA,sBACI,QAAC,sBAAD;AACI,IAAA,UAAU,EAAEW,UADhB;AAEI,IAAA,YAAY,EAAED,YAFlB;AAGI,IAAA,MAAM,EAAEF,MAHZ;AAII,IAAA,OAAO,EAAEM,OAJb;AAKI,IAAA,MAAM,EAAEb,MALZ;AAMI,IAAA,YAAY,EAAEW,YANlB;AAOI,IAAA,YAAY,EAAEC;AAPlB;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAnDM;;GAAMxB,wB;UAEkBL,M,EACVH,W,EACUM,S,EACXL,U,EA6BZH,S;;;KAlCKU,wB","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport { ComponentPasswordEmail } from \"@components\";\nimport { IEmail } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { PATH_SIGN_IN } from \"@configs\";\n\nexport const ModuleEmailResetPassword = () => {\n    //page hooks\n    const { YubEmailSignUp } = useYup();\n    const dispatch = useDispatch();\n    const { error, success } = useNotify();\n    const history = useHistory();\n\n    //page variable\n    const initialValues: IEmail = {\n        email: \"\",\n    };\n    const registerSchema = Yup.object().shape(YubEmailSignUp);\n\n    const handleRegister = async (values: IEmail, { setSubmitting }: FormikHelpers<IEmail>) => {\n        //\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.sendResetPassword(values.email);\n            const data = res.data;\n            if (data.success) {\n                success(data.message);\n                history.push(PATH_SIGN_IN);\n            }\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleRegister,\n        });\n\n    return (\n        <ComponentPasswordEmail\n            handleBlur={handleBlur}\n            handleChange={handleChange}\n            errors={errors}\n            touched={touched}\n            values={values}\n            handleSubmit={handleSubmit}\n            isSubmitting={isSubmitting}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}