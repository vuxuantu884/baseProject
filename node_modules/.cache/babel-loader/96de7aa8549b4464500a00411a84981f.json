{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Social.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { StyledSignUp, ComponentFromSocial, StyledContainerSocial } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { useYup } from \"@validations\";\nimport { selectAuth, selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useHistory } from \"react-router\";\nimport { useNotify } from \"@utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleSocial = () => {\n  _s();\n\n  var _merchant$signUpSetti;\n\n  //page hook\n  const {\n    t\n  } = useTranslation();\n  const {\n    YubSocialSignUp\n  } = useYup();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify(); //page redux\n\n  const {\n    externalLogin,\n    userInfo\n  } = useSelector(selectAuth);\n  const merchant = useSelector(selectMerchant); //page state\n\n  const [date, setDate] = useState({\n    day: \"\",\n    month: \"\",\n    year: \"\",\n    error: \"\"\n  });\n  const [errorPhone, setError] = useState();\n  const [surveyQuestions, setSurveyQuestions] = useState([]); //page variable\n\n  const contact = userInfo === null || userInfo === void 0 ? void 0 : userInfo.contact;\n  const daySelects = DAYS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const monthSelects = MONTHS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const yearSelects = YEARS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const initialValues = {\n    fullName: (contact === null || contact === void 0 ? void 0 : contact.fullName) || \"\",\n    phoneNumber: (contact === null || contact === void 0 ? void 0 : contact.phoneNumber) || \"\",\n    dateOrBirth: \"\",\n    acceptTermsAndConditions: false,\n    email: (contact === null || contact === void 0 ? void 0 : contact.email) || \"\"\n  };\n  const registerSchema = Yup.object().shape(YubSocialSignUp);\n  const fields = (_merchant$signUpSetti = merchant.signUpSettings) === null || _merchant$signUpSetti === void 0 ? void 0 : _merchant$signUpSetti.fields;\n  useEffect(() => {\n    const data = (fields === null || fields === void 0 ? void 0 : fields.map(field => {\n      return {\n        questionId: field._id || \"\",\n        question: field.fieldName || \"\",\n        answers: []\n      };\n    })) || [];\n    setSurveyQuestions([...data]);\n  }, []);\n\n  const handleChangeDay = value => {\n    setDate({ ...date,\n      day: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeMonth = value => {\n    setDate({ ...date,\n      month: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeYear = value => {\n    setDate({ ...date,\n      year: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeAdditionField = value => {\n    //\n    value;\n  };\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    if (errorPhone) return;\n\n    if (!date.day || !date.month || !date.year) {\n      setDate({ ...date,\n        error: t(\"validation.is_required\")\n      });\n      return;\n    }\n\n    if (!values.phoneNumber) {\n      setError(t(\"validation.isNumber\"));\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n      const res = await authApi.createPassword({ ...values,\n        dateOrBirth: dateForm,\n        surveyQuestions,\n        phoneNumber: values.phone\n      });\n\n      if (res) {\n        success(t(\"message.sign_up.success\"));\n        history.push(PATH_HOME);\n        dispatch(setExternalLogin({\n          type: externalLogin || enumExternalMethod.GOOGLE,\n          isSignUp: false\n        }));\n      }\n    } catch (errors) {\n      const errorsResponse = errors.response.data.errors;\n\n      if (Array.isArray(errorsResponse) && errorsResponse.length) {\n        error(errorsResponse[0]);\n      } else {\n        error(t(\"message.sign_up.fail\"));\n      }\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    } //\n\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched,\n    setFieldValue,\n    setFieldTouched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleRegister\n  });\n\n  const handleChangeAnswerByIndex = (answer, index) => {\n    if (Array.isArray(answer)) {\n      surveyQuestions[index].answers = answer;\n    } else {\n      surveyQuestions[index].answers = [answer];\n    }\n\n    setSurveyQuestions([...surveyQuestions]);\n  };\n\n  const handleChangePhoneNumber = (isValid, value, selectedCountryData, fullNumber) => {\n    if (!isValid) setError(t(\"validation.isNumber\"));else {\n      setError(\"\");\n    }\n    setFieldValue(\"phoneNumber\", value);\n    setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledSignUp, {\n    children: [/*#__PURE__*/_jsxDEV(StyledContainerSocial, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: [t(\"page.auth.fill_in_the_information_and_receive_special_benefits\"), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComponentFromSocial, {\n      handleBlur: handleBlur,\n      handleChange: handleChange,\n      errors: errors,\n      touched: touched,\n      values: values,\n      isSubmitting: isSubmitting,\n      days: daySelects,\n      months: monthSelects,\n      years: yearSelects,\n      onChangeDay: handleChangeDay,\n      onChangeMonth: handleChangeMonth,\n      onChangeYear: handleChangeYear,\n      onChangeAdditionField: handleChangeAdditionField,\n      handleSubmit: handleSubmit,\n      date: date,\n      surveyQuestions: surveyQuestions,\n      handleChangeAnswerByIndex: handleChangeAnswerByIndex,\n      setFieldTouched: setFieldTouched,\n      errorPhone: errorPhone || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleSocial, \"VqcdTURUOrARqYxHejirc5QzrRk=\", false, function () {\n  return [useTranslation, useYup, useDispatch, useHistory, useNotify, useSelector, useSelector, useFormik];\n});\n\n_c = ModuleSocial;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleSocial\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/Social.tsx"],"names":["useFormik","useTranslation","Yup","useEffect","useState","useDispatch","useSelector","StyledSignUp","ComponentFromSocial","StyledContainerSocial","DAYS","enumExternalMethod","MONTHS","PATH_HOME","YEARS","useYup","selectAuth","selectMerchant","setExternalLogin","setLoading","authApi","useHistory","useNotify","ModuleSocial","t","YubSocialSignUp","dispatch","history","error","success","externalLogin","userInfo","merchant","date","setDate","day","month","year","errorPhone","setError","surveyQuestions","setSurveyQuestions","contact","daySelects","map","item","id","label","monthSelects","yearSelects","initialValues","fullName","phoneNumber","dateOrBirth","acceptTermsAndConditions","email","registerSchema","object","shape","fields","signUpSettings","data","field","questionId","_id","question","fieldName","answers","handleChangeDay","value","handleChangeMonth","handleChangeYear","handleChangeAdditionField","handleRegister","values","setSubmitting","dateForm","Date","res","createPassword","phone","push","type","GOOGLE","isSignUp","errors","errorsResponse","response","Array","isArray","length","handleChange","handleBlur","handleSubmit","isSubmitting","touched","setFieldValue","setFieldTouched","validationSchema","onSubmit","handleChangeAnswerByIndex","answer","index","handleChangePhoneNumber","isValid","selectedCountryData","fullNumber","replace"],"mappings":"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","sourcesContent":["import { FormikHelpers, useFormik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CountryData } from \"react-intl-tel-input\";\n\nimport { StyledSignUp, ComponentFromSocial, StyledContainerSocial } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { IDate, ISelect, ISocialMedia, ISurveyQuestions } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { selectAuth, selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useHistory } from \"react-router\";\nimport { useNotify } from \"@utils\";\n\nexport const ModuleSocial = () => {\n    //page hook\n    const { t } = useTranslation();\n    const { YubSocialSignUp } = useYup();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { error, success } = useNotify();\n    //page redux\n    const { externalLogin, userInfo } = useSelector(selectAuth);\n    const merchant = useSelector(selectMerchant);\n    //page state\n    const [date, setDate] = useState<IDate>({\n        day: \"\",\n        month: \"\",\n        year: \"\",\n        error: \"\",\n    });\n    const [errorPhone, setError] = useState<string>();\n    const [surveyQuestions, setSurveyQuestions] = useState<ISurveyQuestions[]>([]);\n\n    //page variable\n    const contact = userInfo?.contact;\n    const daySelects: ISelect[] = DAYS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const monthSelects: ISelect[] = MONTHS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const yearSelects: ISelect[] = YEARS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n\n    const initialValues: ISocialMedia = {\n        fullName: contact?.fullName || \"\",\n        phoneNumber: contact?.phoneNumber || \"\",\n        dateOrBirth: \"\",\n        acceptTermsAndConditions: false,\n        email: contact?.email || \"\",\n    };\n    const registerSchema = Yup.object().shape(YubSocialSignUp);\n\n    const fields = merchant.signUpSettings?.fields;\n\n    useEffect(() => {\n        const data: ISurveyQuestions[] =\n            fields?.map((field) => {\n                return {\n                    questionId: field._id || \"\",\n                    question: field.fieldName || \"\",\n                    answers: [],\n                };\n            }) || [];\n        setSurveyQuestions([...data]);\n    }, []);\n\n    const handleChangeDay = (value: string) => {\n        setDate({\n            ...date,\n            day: value,\n            error: \"\",\n        });\n    };\n    const handleChangeMonth = (value: string) => {\n        setDate({\n            ...date,\n            month: value,\n            error: \"\",\n        });\n    };\n    const handleChangeYear = (value: string) => {\n        setDate({\n            ...date,\n            year: value,\n            error: \"\",\n        });\n    };\n\n    const handleChangeAdditionField = (value: string) => {\n        //\n        value;\n    };\n\n    const handleRegister = async (\n        values: ISocialMedia,\n        { setSubmitting }: FormikHelpers<ISocialMedia>\n    ) => {\n        if (errorPhone) return;\n        if (!date.day || !date.month || !date.year) {\n            setDate({\n                ...date,\n                error: t(\"validation.is_required\"),\n            });\n            return;\n        }\n        if (!values.phoneNumber) {\n            setError(t(\"validation.isNumber\"));\n            return;\n        }\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n            const res = await authApi.createPassword({\n                ...values,\n                dateOrBirth: dateForm,\n                surveyQuestions,\n                phoneNumber: values.phone,\n            });\n            if (res) {\n                success(t(\"message.sign_up.success\"));\n                history.push(PATH_HOME);\n                dispatch(\n                    setExternalLogin({\n                        type: externalLogin || enumExternalMethod.GOOGLE,\n                        isSignUp: false,\n                    })\n                );\n            }\n        } catch (errors: any) {\n            const errorsResponse = errors.response.data.errors;\n            if (Array.isArray(errorsResponse) && errorsResponse.length) {\n                error(errorsResponse[0]);\n            } else {\n                error(t(\"message.sign_up.fail\"));\n            }\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n        //\n    };\n\n    const {\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n    } = useFormik({\n        initialValues: initialValues,\n        validationSchema: registerSchema,\n        onSubmit: handleRegister,\n    });\n\n    const handleChangeAnswerByIndex = (answer: string | string[], index: number) => {\n        if (Array.isArray(answer)) {\n            surveyQuestions[index].answers = answer;\n        } else {\n            surveyQuestions[index].answers = [answer];\n        }\n        setSurveyQuestions([...surveyQuestions]);\n    };\n\n    const handleChangePhoneNumber = (\n        isValid: boolean,\n        value: string,\n        selectedCountryData: CountryData,\n        fullNumber: string\n    ) => {\n        if (!isValid) setError(t(\"validation.isNumber\"));\n        else {\n            setError(\"\");\n        }\n        setFieldValue(\"phoneNumber\", value);\n        setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n    };\n\n    return (\n        <StyledSignUp>\n            <StyledContainerSocial>\n                <div className=\"title\">\n                    {t(\"page.auth.fill_in_the_information_and_receive_special_benefits\")}{\" \"}\n                </div>\n            </StyledContainerSocial>\n            <ComponentFromSocial\n                handleBlur={handleBlur}\n                handleChange={handleChange}\n                errors={errors}\n                touched={touched}\n                values={values}\n                isSubmitting={isSubmitting}\n                days={daySelects}\n                months={monthSelects}\n                years={yearSelects}\n                onChangeDay={handleChangeDay}\n                onChangeMonth={handleChangeMonth}\n                onChangeYear={handleChangeYear}\n                onChangeAdditionField={handleChangeAdditionField}\n                handleSubmit={handleSubmit}\n                date={date}\n                surveyQuestions={surveyQuestions}\n                handleChangeAnswerByIndex={handleChangeAnswerByIndex}\n                setFieldTouched={setFieldTouched}\n                errorPhone={errorPhone || \"\"}\n            />\n        </StyledSignUp>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}