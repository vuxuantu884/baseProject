{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Sign.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { ComponentSignUpTel } from \"@components\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleTelSignUp = props => {\n  _s();\n\n  //page props\n  const {\n    socials\n  } = props; //page hooks\n\n  const {\n    YubPhoneSignUp\n  } = useYup();\n  const dispatch = useDispatch();\n  const {\n    error\n  } = useNotify(); //page variable\n\n  const initialValues = {\n    phoneNumber: \"\"\n  };\n  const registerSchema = Yup.object().shape(YubPhoneSignUp);\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    //\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.registerPhone(values);\n\n      if (res.data.success) {\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.TEL\n        })); // history.push(PATH_SIGN_UP_TEL_FROM);\n      }\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleRegister\n  });\n  return /*#__PURE__*/_jsxDEV(ComponentSignUpTel, {\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    errors: errors,\n    touched: touched,\n    values: values,\n    socials: socials,\n    handleSubmit: handleSubmit,\n    isSubmitting: isSubmitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleTelSignUp, \"ToMbjDLl9ksQby2TmbeaHDRl5aM=\", false, function () {\n  return [useYup, useDispatch, useNotify, useFormik];\n});\n\n_c = ModuleTelSignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleTelSignUp\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Sign.tsx"],"names":["useFormik","Yup","useDispatch","ComponentSignUpTel","useYup","authApi","setExternalLogin","setLoading","useNotify","enumExternalMethod","ModuleTelSignUp","props","socials","YubPhoneSignUp","dispatch","error","initialValues","phoneNumber","registerSchema","object","shape","handleRegister","values","setSubmitting","res","registerPhone","data","success","type","TEL","errors","message","response","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit"],"mappings":";;;AAAA,SAASA,SAAT,QAAyC,QAAzC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,QAA7C;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,kBAAT,QAAmC,UAAnC;;AAMA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAmB;AAAA;;AAC9C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB,CAF8C,CAG9C;;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAqBT,MAAM,EAAjC;AACA,QAAMU,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAYP,SAAS,EAA3B,CAN8C,CAQ9C;;AACA,QAAMQ,aAAqB,GAAG;AAC1BC,IAAAA,WAAW,EAAE;AADa,GAA9B;AAGA,QAAMC,cAAc,GAAGjB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmBP,cAAnB,CAAvB;;AAEA,QAAMQ,cAAc,GAAG,OAAOC,MAAP,WAAoE;AAAA,QAA7C;AAAEC,MAAAA;AAAF,KAA6C;;AACvF;AACA,QAAI;AACAA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAT,MAAAA,QAAQ,CAACP,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,YAAMiB,GAAG,GAAG,MAAMnB,OAAO,CAACoB,aAAR,CAAsBH,MAAtB,CAAlB;;AACA,UAAIE,GAAG,CAACE,IAAJ,CAASC,OAAb,EAAsB;AAClBb,QAAAA,QAAQ,CAACR,gBAAgB,CAAC;AAAEsB,UAAAA,IAAI,EAAEnB,kBAAkB,CAACoB;AAA3B,SAAD,CAAjB,CAAR,CADkB,CAElB;AACH;AACJ,KARD,CAQE,OAAOC,MAAP,EAAoB;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAcD,MAAM,CAACE,QAAP,CAAgBN,IAApC;AACAX,MAAAA,KAAK,CAACgB,OAAD,CAAL;AACH,KAXD,SAWU;AACNR,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAT,MAAAA,QAAQ,CAACP,UAAU,CAAC,KAAD,CAAX,CAAR;AACH;AACJ,GAjBD;;AAkBA,QAAM;AAAEe,IAAAA,MAAF;AAAUW,IAAAA,YAAV;AAAwBC,IAAAA,UAAxB;AAAoCC,IAAAA,YAApC;AAAkDC,IAAAA,YAAlD;AAAgEN,IAAAA,MAAhE;AAAwEO,IAAAA;AAAxE,MACFrC,SAAS,CAAC;AACNgB,IAAAA,aAAa,EAAEA,aADT;AAENsB,IAAAA,gBAAgB,EAAEpB,cAFZ;AAGNqB,IAAAA,QAAQ,EAAElB;AAHJ,GAAD,CADb;AAMA,sBACI,QAAC,kBAAD;AACI,IAAA,UAAU,EAAEa,UADhB;AAEI,IAAA,YAAY,EAAED,YAFlB;AAGI,IAAA,MAAM,EAAEH,MAHZ;AAII,IAAA,OAAO,EAAEO,OAJb;AAKI,IAAA,MAAM,EAAEf,MALZ;AAMI,IAAA,OAAO,EAAEV,OANb;AAOI,IAAA,YAAY,EAAEuB,YAPlB;AAQI,IAAA,YAAY,EAAEC;AARlB;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAlDM;;GAAM1B,e;UAIkBN,M,EACVF,W,EACCM,S,EA2BdR,S;;;KAjCKU,e","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\n\nimport { ComponentSignUpTel } from \"@components\";\nimport { IPhone } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\n\ninterface IProps {\n    socials: JSX.Element[];\n}\n\nexport const ModuleTelSignUp = (props: IProps) => {\n    //page props\n    const { socials } = props;\n    //page hooks\n    const { YubPhoneSignUp } = useYup();\n    const dispatch = useDispatch();\n    const { error } = useNotify();\n\n    //page variable\n    const initialValues: IPhone = {\n        phoneNumber: \"\",\n    };\n    const registerSchema = Yup.object().shape(YubPhoneSignUp);\n\n    const handleRegister = async (values: IPhone, { setSubmitting }: FormikHelpers<IPhone>) => {\n        //\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.registerPhone(values);\n            if (res.data.success) {\n                dispatch(setExternalLogin({ type: enumExternalMethod.TEL }));\n                // history.push(PATH_SIGN_UP_TEL_FROM);\n            }\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleRegister,\n        });\n    return (\n        <ComponentSignUpTel\n            handleBlur={handleBlur}\n            handleChange={handleChange}\n            errors={errors}\n            touched={touched}\n            values={values}\n            socials={socials}\n            handleSubmit={handleSubmit}\n            isSubmitting={isSubmitting}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}