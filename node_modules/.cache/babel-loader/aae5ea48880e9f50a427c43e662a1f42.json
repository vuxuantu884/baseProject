{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/user/Setting.tsx\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport { authApi, merchantApi } from \"@api\";\nimport { ComponentUserSetting, ComponentUserSettingSave } from \"@components\";\nimport { selectAuth, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { useYup } from \"@validations\";\nimport { _10MB } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PageUserSetting = () => {\n  _s();\n\n  //page hooks\n  const dispatch = useDispatch();\n  const {\n    error,\n    success\n  } = useNotify();\n  const {\n    YubSUserSetting\n  } = useYup();\n  const {\n    t\n  } = useTranslation(); //redux state\n\n  const {\n    userInfo\n  } = useSelector(selectAuth); //page state\n\n  const [title, setTitle] = useState(\"\");\n  const [errorPhone, setError] = useState(); //page variable\n\n  const contact = userInfo === null || userInfo === void 0 ? void 0 : userInfo.contact;\n  const initialValue = {\n    avatar: (userInfo === null || userInfo === void 0 ? void 0 : userInfo.avatar) || \"\",\n    fullName: (contact === null || contact === void 0 ? void 0 : contact.fullName) || \"\",\n    dateOfBirth: (contact === null || contact === void 0 ? void 0 : contact.dateOfBirth) || new Date(Date.now()),\n    phoneNumber: (contact === null || contact === void 0 ? void 0 : contact.phoneNumber) || \"\",\n    email: (contact === null || contact === void 0 ? void 0 : contact.email) || \"\"\n  };\n  const registerSchema = Yup.object().shape(YubSUserSetting);\n\n  const handleUploadImage = async e => {\n    dispatch(setLoading(true)); //@ts-ignore\n\n    const values = (e === null || e === void 0 ? void 0 : e.target.files[0]) || \"\";\n\n    if (values.size >= _10MB) {\n      error(t(\"page.image.max_size\"));\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"file\", values);\n\n    try {\n      const res = await merchantApi.uploadImage(formData);\n      await authApi.updateProfile({\n        avatar: res.data.publicUrl\n      });\n      setFieldValue(\"avatar\", res.data.publicUrl);\n    } catch (err) {\n      const data = err.response.data;\n      const mess = Array.isArray(data.errors) ? data.errors[0] : data.message;\n      error(mess);\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleSaveSetting = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    if (errorPhone) return;\n\n    if (!values.phoneNumber) {\n      setError(t(\"validation.isNumber\"));\n      return;\n    }\n\n    if (!values.dateOfBirth) return;\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.updateProfile({ ...values,\n        phoneNumber: values.phone\n      });\n\n      if (res.data.message) {\n        success(res.data.message);\n      } else {\n        success(t(\"message.update.success\"));\n      }\n    } catch (errors) {\n      const errorsResponse = errors.response.data.errors;\n\n      if (Array.isArray(errorsResponse) && errorsResponse.length) {\n        error(errorsResponse[0]);\n      } else {\n        error(t(\"message.update.fail\"));\n      }\n    } finally {\n      setTitle(\"\");\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleChangeTitle = title => {\n    setTitle(title);\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched,\n    setFieldValue,\n    setFieldTouched\n  } = useFormik({\n    initialValues: initialValue,\n    validationSchema: registerSchema,\n    onSubmit: handleSaveSetting,\n    enableReinitialize: true\n  });\n\n  const handleChangePhoneNumber = (isValid, value, selectedCountryData, fullNumber) => {\n    if (!isValid) setError(t(\"validation.isNumber\"));else {\n      setError(\"\");\n    }\n    setFieldValue(\"phoneNumber\", value);\n    setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n  };\n\n  const handleChangeDate = (date, dateString) => {\n    if (dateString) {\n      setFieldValue(\"dateOfBirth\", dateString);\n    } else {\n      setFieldValue(\"dateOfBirth\", new Date(Date.now()));\n    }\n  };\n\n  const handleSelectFlag = (currentNumber, selectedCountryData, fullNumber, isValid) => {\n    console.log(currentNumber);\n    console.log(fullNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: title ? /*#__PURE__*/_jsxDEV(ComponentUserSettingSave, {\n      values: values,\n      handleChange: handleChange,\n      handleBlur: handleBlur,\n      handleSubmit: handleSubmit,\n      isSubmitting: isSubmitting,\n      errors: errors,\n      touched: touched,\n      title: title,\n      setFieldTouched: setFieldTouched,\n      handleChangePhoneNumber: handleChangePhoneNumber,\n      errorPhone: errorPhone || \"\",\n      handleChangeDate: handleChangeDate,\n      handleSelectFlag: handleSelectFlag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(ComponentUserSetting, {\n      handleUploadImage: handleUploadImage,\n      values: values,\n      handleChangeTitle: handleChangeTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(PageUserSetting, \"ljoIbzkfZmJFi26XLJ1ihJL0qRs=\", false, function () {\n  return [useDispatch, useNotify, useYup, useTranslation, useSelector, useFormik];\n});\n\n_c = PageUserSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageUserSetting\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/user/Setting.tsx"],"names":["useDispatch","useSelector","useState","useFormik","Yup","useTranslation","authApi","merchantApi","ComponentUserSetting","ComponentUserSettingSave","selectAuth","setLoading","useNotify","useYup","_10MB","PageUserSetting","dispatch","error","success","YubSUserSetting","t","userInfo","title","setTitle","errorPhone","setError","contact","initialValue","avatar","fullName","dateOfBirth","Date","now","phoneNumber","email","registerSchema","object","shape","handleUploadImage","e","values","target","files","size","formData","FormData","append","res","uploadImage","updateProfile","data","publicUrl","setFieldValue","err","response","mess","Array","isArray","errors","message","handleSaveSetting","setSubmitting","phone","errorsResponse","length","handleChangeTitle","handleChange","handleBlur","handleSubmit","isSubmitting","touched","setFieldTouched","initialValues","validationSchema","onSubmit","enableReinitialize","handleChangePhoneNumber","isValid","value","selectedCountryData","fullNumber","replace","handleChangeDate","date","dateString","handleSelectFlag","currentNumber","console","log"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport { FormikHelpers, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { CountryData } from \"react-intl-tel-input\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { authApi, merchantApi } from \"@api\";\nimport { ComponentUserSetting, ComponentUserSettingSave } from \"@components\";\nimport { selectAuth, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { IUserSetting } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { enumUseSetting, _10MB } from \"@configs\";\n\nexport const PageUserSetting = () => {\n    //page hooks\n    const dispatch = useDispatch();\n    const { error, success } = useNotify();\n    const { YubSUserSetting } = useYup();\n    const { t } = useTranslation();\n    //redux state\n    const { userInfo } = useSelector(selectAuth);\n    //page state\n    const [title, setTitle] = useState<enumUseSetting | \"\">(\"\");\n    const [errorPhone, setError] = useState<string>();\n\n    //page variable\n\n    const contact = userInfo?.contact;\n    const initialValue: IUserSetting = {\n        avatar: userInfo?.avatar || \"\",\n        fullName: contact?.fullName || \"\",\n        dateOfBirth: contact?.dateOfBirth || new Date(Date.now()),\n        phoneNumber: contact?.phoneNumber || \"\",\n        email: contact?.email || \"\",\n    };\n    const registerSchema = Yup.object().shape(YubSUserSetting);\n\n    const handleUploadImage = async (e: React.ChangeEvent<HTMLInputElement> | undefined) => {\n        dispatch(setLoading(true));\n        //@ts-ignore\n        const values = (e?.target.files[0] as File) || \"\";\n        if (values.size >= _10MB) {\n            error(t(\"page.image.max_size\"));\n            return;\n        }\n        const formData = new FormData();\n        formData.append(\"file\", values);\n        try {\n            const res = await merchantApi.uploadImage(formData);\n            await authApi.updateProfile({\n                avatar: res.data.publicUrl,\n            });\n            setFieldValue(\"avatar\", res.data.publicUrl);\n        } catch (err: any) {\n            const data = err.response.data;\n            const mess = Array.isArray(data.errors) ? data.errors[0] : data.message;\n            error(mess);\n        } finally {\n            dispatch(setLoading(false));\n        }\n    };\n\n    const handleSaveSetting = async (\n        values: IUserSetting,\n        { setSubmitting }: FormikHelpers<IUserSetting>\n    ) => {\n        if (errorPhone) return;\n        if (!values.phoneNumber) {\n            setError(t(\"validation.isNumber\"));\n            return;\n        }\n\n        if (!values.dateOfBirth) return;\n\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.updateProfile({ ...values, phoneNumber: values.phone });\n            if (res.data.message) {\n                success(res.data.message);\n            } else {\n                success(t(\"message.update.success\"));\n            }\n        } catch (errors: any) {\n            const errorsResponse = errors.response.data.errors;\n            if (Array.isArray(errorsResponse) && errorsResponse.length) {\n                error(errorsResponse[0]);\n            } else {\n                error(t(\"message.update.fail\"));\n            }\n        } finally {\n            setTitle(\"\");\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const handleChangeTitle = (title: enumUseSetting) => {\n        setTitle(title);\n    };\n\n    const {\n        values,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n    } = useFormik({\n        initialValues: initialValue,\n        validationSchema: registerSchema,\n        onSubmit: handleSaveSetting,\n        enableReinitialize: true,\n    });\n\n    const handleChangePhoneNumber = (\n        isValid: boolean,\n        value: string,\n        selectedCountryData: CountryData,\n        fullNumber: string\n    ) => {\n        if (!isValid) setError(t(\"validation.isNumber\"));\n        else {\n            setError(\"\");\n        }\n        setFieldValue(\"phoneNumber\", value);\n        setFieldValue(\"phone\", fullNumber.replace(/(\\s|-)/g, \"\"));\n    };\n\n    const handleChangeDate = (date: moment.Moment, dateString: string) => {\n        if (dateString) {\n            setFieldValue(\"dateOfBirth\", dateString);\n        } else {\n            setFieldValue(\"dateOfBirth\", new Date(Date.now()));\n        }\n    };\n\n    const handleSelectFlag = (\n        currentNumber: string,\n        selectedCountryData: CountryData,\n        fullNumber: string,\n        isValid: boolean\n    ) => {\n        console.log(currentNumber);\n        console.log(fullNumber);\n    };\n\n    return (\n        <>\n            {title ? (\n                <ComponentUserSettingSave\n                    values={values}\n                    handleChange={handleChange}\n                    handleBlur={handleBlur}\n                    handleSubmit={handleSubmit}\n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    touched={touched}\n                    title={title}\n                    setFieldTouched={setFieldTouched}\n                    handleChangePhoneNumber={handleChangePhoneNumber}\n                    errorPhone={errorPhone || \"\"}\n                    handleChangeDate={handleChangeDate}\n                    handleSelectFlag={handleSelectFlag}\n                />\n            ) : (\n                <ComponentUserSetting\n                    handleUploadImage={handleUploadImage}\n                    values={values}\n                    handleChangeTitle={handleChangeTitle}\n                />\n            )}\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}