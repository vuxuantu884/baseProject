{"ast":null,"code":"import { combineReducers } from \"redux\";\n// import { persistReducer } from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\n// import appReducer from \"./auth\";\nimport appReducer from \"./app\";\nimport merchantReducer from \"./merchant\";\nimport authReducer from \"./auth\";\nimport toastReducer from \"./toast\";\nimport configClientReducer from \"./configClient\"; // const persistConfig = {\n//     key: \"root\",\n//     storage,\n// };\n// const authPersistedReducer = persistReducer(persistConfig, appReducer);\n\nexport * from \"./app\";\nexport * from \"./merchant\";\nexport * from \"./auth\";\nexport * from \"./toast\";\nconst productReducer = combineReducers({\n  app: appReducer,\n  merchant: merchantReducer,\n  auth: authReducer,\n  toast: toastReducer,\n  configClient: configClientReducer\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === \"RESET\") {\n    // reset state\n    state = {}; // reset local storage\n\n    localStorage.clear();\n  }\n\n  return productReducer(state, action);\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Redux/Slices/index.ts"],"names":["combineReducers","appReducer","merchantReducer","authReducer","toastReducer","configClientReducer","productReducer","app","merchant","auth","toast","configClient","rootReducer","state","action","type","localStorage","clear"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA;AACA;AAEA;AACA,OAAOC,UAAP,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAOC,WAAP,MAAwB,QAAxB;AACA,OAAOC,YAAP,MAAyB,SAAzB;AACA,OAAOC,mBAAP,MAAgC,gBAAhC,C,CACA;AACA;AACA;AACA;AAEA;;AACA,cAAc,OAAd;AACA,cAAc,YAAd;AACA,cAAc,QAAd;AACA,cAAc,SAAd;AAEA,MAAMC,cAAc,GAAGN,eAAe,CAAC;AACnCO,EAAAA,GAAG,EAAEN,UAD8B;AAEnCO,EAAAA,QAAQ,EAAEN,eAFyB;AAGnCO,EAAAA,IAAI,EAAEN,WAH6B;AAInCO,EAAAA,KAAK,EAAEN,YAJ4B;AAKnCO,EAAAA,YAAY,EAAEN;AALqB,CAAD,CAAtC;;AAUA,MAAMO,WAAoB,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAAyC;AAClE,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB;AACAF,IAAAA,KAAK,GAAG,EAAR,CAFyB,CAGzB;;AACAG,IAAAA,YAAY,CAACC,KAAb;AACH;;AACD,SAAOX,cAAc,CAACO,KAAD,EAAQC,MAAR,CAArB;AACH,CARD;;AASA,eAAeF,WAAf","sourcesContent":["import { combineReducers } from \"redux\";\nimport { AnyAction, Reducer } from \"@reduxjs/toolkit\";\n// import { persistReducer } from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\n\n// import appReducer from \"./auth\";\nimport appReducer from \"./app\";\nimport merchantReducer from \"./merchant\";\nimport authReducer from \"./auth\";\nimport toastReducer from \"./toast\";\nimport configClientReducer from \"./configClient\";\n// const persistConfig = {\n//     key: \"root\",\n//     storage,\n// };\n\n// const authPersistedReducer = persistReducer(persistConfig, appReducer);\nexport * from \"./app\";\nexport * from \"./merchant\";\nexport * from \"./auth\";\nexport * from \"./toast\";\n\nconst productReducer = combineReducers({\n    app: appReducer,\n    merchant: merchantReducer,\n    auth: authReducer,\n    toast: toastReducer,\n    configClient: configClientReducer,\n});\n\nexport type RootState = ReturnType<typeof productReducer>;\n\nconst rootReducer: Reducer = (state: RootState, action: AnyAction) => {\n    if (action.type === \"RESET\") {\n        // reset state\n        state = {} as RootState;\n        // reset local storage\n        localStorage.clear();\n    }\n    return productReducer(state, action);\n};\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}