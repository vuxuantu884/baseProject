{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/BaseProject/src/Components/AppRoute.tsx\";\nimport { Route } from \"react-router\";\nimport { LayoutApp } from \"@layouts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ComponentAppRoute = props => {\n  const {\n    path,\n    exact\n  } = props; //page variable\n  //WHAT: check user login\n  // const token = auth?.accessToken;\n\n  const Component = props.component;\n  const Layout = LayoutApp; //WHAT: check valid route\n  // useEffect(() => {\n  //What: check merchantID\n  // if (!_id) {\n  //     history.push(PATH_404);\n  // }\n  //WHAT: check normal path\n  // const isNormalRoute =\n  //     pathname === PATH_HOME\n  //         ? true\n  //         : normalRoutes.some((item: string) => {\n  //               if (item === PATH_HOME) {\n  //                   return false;\n  //               }\n  //               return pathname.includes(item);\n  //           });\n  //WHAT: check a uth path\n  // const isAuthRoute = authRoutes.some((item: string) => pathname.includes(item));\n  // if (token) {\n  // const userPermissions = auth.userPermissions;\n  // || (props.permission && !userPermissions?.includes(props.permission))\n  //         if (isSignUp) {\n  //             history.push(PATH_SIGN_UP_FROM);\n  //         } else if (externalType?.type === enumTypes.COUPON && externalType.id) {\n  //             history.push(COUPON + \"/\" + externalType.id);\n  //         } else if (isAuthRoute) {\n  //             history.push(PATH_HOME);\n  //         }\n  //     } else if (isNormalRoute) {\n  //         history.push(PATH_SIGN_IN);\n  //     }\n  // }, [pathname, auth]);\n  // useEffect(() => {\n  //     if (token) {\n  //         dispatch(getInfo());\n  //     }\n  // }, [token]);\n\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    exact: exact,\n    render: () => /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = ComponentAppRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentAppRoute\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/BaseProject/src/Components/AppRoute.tsx"],"names":["Route","LayoutApp","ComponentAppRoute","props","path","exact","Component","component","Layout"],"mappings":";AAAA,SAASA,KAAT,QAAsB,cAAtB;AAGA,SAASC,SAAT,QAA0B,UAA1B;;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,KAAD,IAAmB;AAClD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBF,KAAxB,CADkD,CAElD;AACA;AACA;;AACA,QAAMG,SAAS,GAAGH,KAAK,CAACI,SAAxB;AACA,QAAMC,MAAM,GAAGP,SAAf,CANkD,CAQlD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,KAAD;AACE,IAAA,IAAI,EAAEG,IADR;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,MAAM,EAAE,mBACN,QAAC,MAAD;AAAA,6BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA5DM;KAAMH,iB","sourcesContent":["import { Route } from \"react-router\";\n\nimport { IRoute } from \"@interfaces\";\nimport { LayoutApp } from \"@layouts\";\n\nexport const ComponentAppRoute = (props: IRoute) => {\n  const { path, exact } = props;\n  //page variable\n  //WHAT: check user login\n  // const token = auth?.accessToken;\n  const Component = props.component;\n  const Layout = LayoutApp;\n\n  //WHAT: check valid route\n  // useEffect(() => {\n  //What: check merchantID\n  // if (!_id) {\n  //     history.push(PATH_404);\n  // }\n\n  //WHAT: check normal path\n  // const isNormalRoute =\n  //     pathname === PATH_HOME\n  //         ? true\n  //         : normalRoutes.some((item: string) => {\n  //               if (item === PATH_HOME) {\n  //                   return false;\n  //               }\n  //               return pathname.includes(item);\n  //           });\n\n  //WHAT: check a uth path\n  // const isAuthRoute = authRoutes.some((item: string) => pathname.includes(item));\n  // if (token) {\n  // const userPermissions = auth.userPermissions;\n  // || (props.permission && !userPermissions?.includes(props.permission))\n  //         if (isSignUp) {\n  //             history.push(PATH_SIGN_UP_FROM);\n  //         } else if (externalType?.type === enumTypes.COUPON && externalType.id) {\n  //             history.push(COUPON + \"/\" + externalType.id);\n  //         } else if (isAuthRoute) {\n  //             history.push(PATH_HOME);\n  //         }\n  //     } else if (isNormalRoute) {\n  //         history.push(PATH_SIGN_IN);\n  //     }\n  // }, [pathname, auth]);\n\n  // useEffect(() => {\n  //     if (token) {\n  //         dispatch(getInfo());\n  //     }\n  // }, [token]);\n\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      render={() => (\n        <Layout>\n          <Component />\n        </Layout>\n      )}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}