{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport querystring from \"querystring\";\nimport { selectMerchant } from \"@redux\";\nimport { PATH_LINE_LOGIN } from \"./../Configs/routes\";\n\nconst lineHeader = baseURL => ({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  },\n  paramsSerializer: params => querystring.stringify(params)\n});\n\nexport const LineApi = baseUrl => {\n  _s();\n\n  //hook state\n  const axiosClient = axios.create(lineHeader(baseUrl));\n  const {\n    lineIntegration\n  } = useSelector(selectMerchant);\n  return {\n    login: code => {\n      var _lineIntegration$line, _lineIntegration$line2;\n\n      const url = \"/token\"; //WHAT: login body\n\n      const redirectUrl = process.env.REACT_APP_WEB_URL + PATH_LINE_LOGIN;\n      const grantType = \"authorization_code\";\n      const clientId = (lineIntegration === null || lineIntegration === void 0 ? void 0 : (_lineIntegration$line = lineIntegration.lineLoginApi) === null || _lineIntegration$line === void 0 ? void 0 : _lineIntegration$line.channelID) || \"\";\n      const clientSecret = (lineIntegration === null || lineIntegration === void 0 ? void 0 : (_lineIntegration$line2 = lineIntegration.lineLoginApi) === null || _lineIntegration$line2 === void 0 ? void 0 : _lineIntegration$line2.channelSecret) || \"\"; //WHAT: setup xxx-form-data body\n\n      const accessTokenBody = new URLSearchParams();\n      accessTokenBody.append(\"grant_type\", grantType);\n      accessTokenBody.append(\"code\", code);\n      accessTokenBody.append(\"redirect_uri\", redirectUrl);\n      accessTokenBody.append(\"client_id\", clientId);\n      accessTokenBody.append(\"client_secret\", clientSecret);\n      return axiosClient.post(url, accessTokenBody);\n    }\n  };\n};\n\n_s(LineApi, \"ayIMq+VP5G5xSwgXW+QNdTfnQtY=\", false, function () {\n  return [useSelector];\n});\n\n_c = LineApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineApi\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/API/line.ts"],"names":["useSelector","axios","querystring","selectMerchant","PATH_LINE_LOGIN","lineHeader","baseURL","headers","paramsSerializer","params","stringify","LineApi","baseUrl","axiosClient","create","lineIntegration","login","code","url","redirectUrl","process","env","REACT_APP_WEB_URL","grantType","clientId","lineLoginApi","channelID","clientSecret","channelSecret","accessTokenBody","URLSearchParams","append","post"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,MAAMC,UAAU,GAAIC,OAAD,KAAsB;AACrCA,EAAAA,OADqC;AAErCC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAF4B;AAKrCC,EAAAA,gBAAgB,EAAGC,MAAD,IAAiBP,WAAW,CAACQ,SAAZ,CAAsBD,MAAtB;AALE,CAAtB,CAAnB;;AAQA,OAAO,MAAME,OAAO,GAAIC,OAAD,IAAqB;AAAA;;AACxC;AACA,QAAMC,WAAW,GAAGZ,KAAK,CAACa,MAAN,CAAaT,UAAU,CAACO,OAAD,CAAvB,CAApB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAsBf,WAAW,CAACG,cAAD,CAAvC;AAEA,SAAO;AACHa,IAAAA,KAAK,EAAGC,IAAD,IAAkB;AAAA;;AACrB,YAAMC,GAAG,GAAG,QAAZ,CADqB,CAGrB;;AACA,YAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgClB,eAApD;AACA,YAAMmB,SAAS,GAAG,oBAAlB;AACA,YAAMC,QAAQ,GACV,CAAAT,eAAe,SAAf,IAAAA,eAAe,WAAf,qCAAAA,eAAe,CAAEU,YAAjB,gFAA+BC,SAA/B,KAA4C,EADhD;AAEA,YAAMC,YAAY,GACd,CAAAZ,eAAe,SAAf,IAAAA,eAAe,WAAf,sCAAAA,eAAe,CAAEU,YAAjB,kFAA+BG,aAA/B,KAAgD,EADpD,CARqB,CAUrB;;AACA,YAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAD,MAAAA,eAAe,CAACE,MAAhB,CAAuB,YAAvB,EAAqCR,SAArC;AACAM,MAAAA,eAAe,CAACE,MAAhB,CAAuB,MAAvB,EAA+Bd,IAA/B;AACAY,MAAAA,eAAe,CAACE,MAAhB,CAAuB,cAAvB,EAAuCZ,WAAvC;AACAU,MAAAA,eAAe,CAACE,MAAhB,CAAuB,WAAvB,EAAoCP,QAApC;AACAK,MAAAA,eAAe,CAACE,MAAhB,CAAuB,eAAvB,EAAwCJ,YAAxC;AAEA,aAAOd,WAAW,CAACmB,IAAZ,CAAiBd,GAAjB,EAAsBW,eAAtB,CAAP;AACH;AApBE,GAAP;AAsBH,CA3BM;;GAAMlB,O;UAGmBX,W;;;KAHnBW,O","sourcesContent":["import { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport querystring from \"querystring\";\nimport { selectMerchant } from \"@redux\";\n\nimport { PATH_LINE_LOGIN } from \"./../Configs/routes\";\n\nconst lineHeader = (baseURL: string) => ({\n    baseURL,\n    headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    paramsSerializer: (params: any) => querystring.stringify(params),\n});\n\nexport const LineApi = (baseUrl: string) => {\n    //hook state\n    const axiosClient = axios.create(lineHeader(baseUrl));\n    const { lineIntegration } = useSelector(selectMerchant);\n\n    return {\n        login: (code: string) => {\n            const url = \"/token\";\n\n            //WHAT: login body\n            const redirectUrl = process.env.REACT_APP_WEB_URL + PATH_LINE_LOGIN;\n            const grantType = \"authorization_code\";\n            const clientId =\n                lineIntegration?.lineLoginApi?.channelID || \"\";\n            const clientSecret =\n                lineIntegration?.lineLoginApi?.channelSecret || \"\";\n            //WHAT: setup xxx-form-data body\n            const accessTokenBody = new URLSearchParams();\n            accessTokenBody.append(\"grant_type\", grantType);\n            accessTokenBody.append(\"code\", code);\n            accessTokenBody.append(\"redirect_uri\", redirectUrl);\n            accessTokenBody.append(\"client_id\", clientId);\n            accessTokenBody.append(\"client_secret\", clientSecret);\n\n            return axiosClient.post(url, accessTokenBody);\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}