{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Components/AppRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport { Route, useHistory, useLocation } from \"react-router\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { LayoutApp } from \"@layouts\";\nimport { authRoutes, normalRoutes, PATH_404, PATH_HOME, PATH_SIGN_IN_EMAIL } from \"@configs\";\nimport { selectAuth } from \"@Redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ComponentAppRoute = props => {\n  _s();\n\n  //page props\n  const {\n    path,\n    exact\n  } = props; //page hook\n\n  const {\n    pathname\n  } = useLocation();\n  const history = useHistory(); //redux state\n\n  const {\n    auth,\n    merchantId\n  } = useSelector(selectAuth); //page variable\n  //WHAT: check user login\n\n  const token = auth === null || auth === void 0 ? void 0 : auth.accessToken;\n  const Component = props.component;\n  const Layout = LayoutApp; //WHAT: check valid route\n\n  useEffect(() => {\n    //What: check merchantID\n    if (!merchantId) {\n      history.push(PATH_404);\n    } //WHAT: check normal path\n\n\n    const isNormalRoute = pathname === PATH_HOME ? true : normalRoutes.some(item => {\n      if (item === PATH_HOME) {\n        return false;\n      }\n\n      return pathname.includes(item);\n    }); //WHAT: check a uth path\n\n    const isAuthRoute = authRoutes.some(item => pathname.includes(item));\n\n    if (token) {\n      // const userPermissions = auth.userPermissions;\n      // || (props.permission && !userPermissions?.includes(props.permission))\n      if (isAuthRoute) {\n        history.push(PATH_HOME);\n      }\n    } else if (isNormalRoute) {\n      history.push(PATH_SIGN_IN_EMAIL);\n    }\n  }, [pathname, auth]);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    exact: exact,\n    render: () => /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ComponentAppRoute, \"a3TK0uJKuilq6Scm7dM5wfuCZNI=\", false, function () {\n  return [useLocation, useHistory, useSelector];\n});\n\n_c = ComponentAppRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentAppRoute\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Components/AppRoute.tsx"],"names":["Route","useHistory","useLocation","useEffect","useSelector","LayoutApp","authRoutes","normalRoutes","PATH_404","PATH_HOME","PATH_SIGN_IN_EMAIL","selectAuth","ComponentAppRoute","props","path","exact","pathname","history","auth","merchantId","token","accessToken","Component","component","Layout","push","isNormalRoute","some","item","includes","isAuthRoute"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,UAAhB,EAA4BC,WAA5B,QAA+C,cAA/C;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,QAAnC,EAA6CC,SAA7C,EAAwDC,kBAAxD,QAAkF,UAAlF;AACA,SAASC,UAAT,QAA2B,QAA3B;;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,KAAD,IAAmB;AAAA;;AAChD;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBF,KAAxB,CAFgD,CAGhD;;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAed,WAAW,EAAhC;AACA,QAAMe,OAAO,GAAGhB,UAAU,EAA1B,CALgD,CAMhD;;AACA,QAAM;AAAEiB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAuBf,WAAW,CAACO,UAAD,CAAxC,CAPgD,CAShD;AACA;;AACA,QAAMS,KAAK,GAAGF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,WAApB;AACA,QAAMC,SAAS,GAAGT,KAAK,CAACU,SAAxB;AACA,QAAMC,MAAM,GAAGnB,SAAf,CAbgD,CAehD;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI,CAACgB,UAAL,EAAiB;AACbF,MAAAA,OAAO,CAACQ,IAAR,CAAajB,QAAb;AACH,KAJW,CAMZ;;;AACA,UAAMkB,aAAa,GACfV,QAAQ,KAAKP,SAAb,GACM,IADN,GAEMF,YAAY,CAACoB,IAAb,CAAmBC,IAAD,IAAkB;AAChC,UAAIA,IAAI,KAAKnB,SAAb,EAAwB;AACpB,eAAO,KAAP;AACH;;AACD,aAAOO,QAAQ,CAACa,QAAT,CAAkBD,IAAlB,CAAP;AACH,KALD,CAHV,CAPY,CAiBZ;;AACA,UAAME,WAAW,GAAGxB,UAAU,CAACqB,IAAX,CAAiBC,IAAD,IAAkBZ,QAAQ,CAACa,QAAT,CAAkBD,IAAlB,CAAlC,CAApB;;AACA,QAAIR,KAAJ,EAAW;AACP;AACA;AACA,UAAIU,WAAJ,EAAiB;AACbb,QAAAA,OAAO,CAACQ,IAAR,CAAahB,SAAb;AACH;AACJ,KAND,MAMO,IAAIiB,aAAJ,EAAmB;AACtBT,MAAAA,OAAO,CAACQ,IAAR,CAAaf,kBAAb;AACH;AACJ,GA5BQ,EA4BN,CAACM,QAAD,EAAWE,IAAX,CA5BM,CAAT;AA6BA,sBACI,QAAC,KAAD;AACI,IAAA,IAAI,EAAEJ,IADV;AAEI,IAAA,KAAK,EAAEC,KAFX;AAGI,IAAA,MAAM,EAAE,mBACJ,QAAC,MAAD;AAAA,6BACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAxDM;;GAAMH,iB;UAIYV,W,EACLD,U,EAEaG,W;;;KAPpBQ,iB","sourcesContent":["import { Route, useHistory, useLocation } from \"react-router\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { IRoute } from \"@interfaces\";\nimport { LayoutApp } from \"@layouts\";\nimport { authRoutes, normalRoutes, PATH_404, PATH_HOME, PATH_SIGN_IN_EMAIL } from \"@configs\";\nimport { selectAuth } from \"@Redux\";\n\nexport const ComponentAppRoute = (props: IRoute) => {\n    //page props\n    const { path, exact } = props;\n    //page hook\n    const { pathname } = useLocation();\n    const history = useHistory();\n    //redux state\n    const { auth, merchantId } = useSelector(selectAuth);\n\n    //page variable\n    //WHAT: check user login\n    const token = auth?.accessToken;\n    const Component = props.component;\n    const Layout = LayoutApp;\n\n    //WHAT: check valid route\n    useEffect(() => {\n        //What: check merchantID\n        if (!merchantId) {\n            history.push(PATH_404);\n        }\n\n        //WHAT: check normal path\n        const isNormalRoute =\n            pathname === PATH_HOME\n                ? true\n                : normalRoutes.some((item: string) => {\n                      if (item === PATH_HOME) {\n                          return false;\n                      }\n                      return pathname.includes(item);\n                  });\n\n        //WHAT: check a uth path\n        const isAuthRoute = authRoutes.some((item: string) => pathname.includes(item));\n        if (token) {\n            // const userPermissions = auth.userPermissions;\n            // || (props.permission && !userPermissions?.includes(props.permission))\n            if (isAuthRoute) {\n                history.push(PATH_HOME);\n            }\n        } else if (isNormalRoute) {\n            history.push(PATH_SIGN_IN_EMAIL);\n        }\n    }, [pathname, auth]);\n    return (\n        <Route\n            path={path}\n            exact={exact}\n            render={() => (\n                <Layout>\n                    <Component />\n                </Layout>\n            )}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}