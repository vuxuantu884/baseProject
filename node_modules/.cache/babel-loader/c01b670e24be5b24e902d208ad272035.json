{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/SignIn.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { memo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\nimport { ComponentSignInTel } from \"@components\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod, PATH_SIGN_UP_OTP } from \"@configs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleTelSignIn = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  //page hooks\n  const dispatch = useDispatch();\n  const {\n    error\n  } = useNotify();\n  const {\n    t\n  } = useTranslation();\n  const history = useHistory(); //page state\n\n  const [errorPhone, setError] = useState(); //page props\n\n  const {\n    remember\n  } = props; //page variable\n\n  const initialValues = {\n    phoneNumber: \"\"\n  };\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    if (errorPhone) return;\n\n    if (!values.phoneNumber) {\n      setError(t(\"validation.isNumber\"));\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.loginPhone({\n        phoneNumber: values.phone || \"\"\n      });\n      const data = res.data;\n\n      if (data) {\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.TEL,\n          isSignUp: false\n        }));\n        window.sessionStorage.setItem(\"phoneNumber\", (values === null || values === void 0 ? void 0 : values.phone) || \"\");\n        window.sessionStorage.setItem(\"remember\", (remember || \"\").toString());\n        history.push(PATH_SIGN_UP_OTP);\n      }\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleSubmit,\n    isSubmitting,\n    setFieldTouched,\n    setFieldValue\n  } = useFormik({\n    initialValues: initialValues,\n    onSubmit: handleRegister\n  });\n  return /*#__PURE__*/_jsxDEV(ComponentSignInTel, {\n    values: values,\n    handleSubmit: handleSubmit,\n    isSubmitting: isSubmitting,\n    setFieldTouched: setFieldTouched,\n    setFieldValue: setFieldValue,\n    errorPhone: errorPhone || \"\",\n    setError: setError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}, \"F0X4+6baslAiiYm/cwSQZ6Tq2AY=\", false, function () {\n  return [useDispatch, useNotify, useTranslation, useHistory, useFormik];\n}));\n_c2 = ModuleTelSignIn;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModuleTelSignIn$memo\");\n$RefreshReg$(_c2, \"ModuleTelSignIn\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/SignIn.tsx"],"names":["useFormik","useDispatch","memo","useState","useTranslation","useHistory","ComponentSignInTel","authApi","setExternalLogin","setLoading","useNotify","enumExternalMethod","PATH_SIGN_UP_OTP","ModuleTelSignIn","props","dispatch","error","t","history","errorPhone","setError","remember","initialValues","phoneNumber","handleRegister","values","setSubmitting","res","loginPhone","phone","data","type","TEL","isSignUp","window","sessionStorage","setItem","toString","push","errors","message","response","handleSubmit","isSubmitting","setFieldTouched","setFieldValue","onSubmit"],"mappings":"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","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { memo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\n\nimport { ComponentSignInTel } from \"@components\";\nimport { IAuth, IPhone } from \"@interfaces\";\nimport { authApi } from \"@api\";\nimport { setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod, PATH_SIGN_UP_OTP } from \"@configs\";\n\ninterface IProps {\n    remember?: boolean;\n}\n\nexport const ModuleTelSignIn = memo((props: IProps) => {\n    //page hooks\n    const dispatch = useDispatch();\n    const { error } = useNotify();\n    const { t } = useTranslation();\n    const history = useHistory();\n    //page state\n    const [errorPhone, setError] = useState<string>();\n    //page props\n    const { remember } = props;\n    //page variable\n    const initialValues: IPhone = {\n        phoneNumber: \"\",\n    };\n\n    const handleRegister = async (values: IPhone, { setSubmitting }: FormikHelpers<IPhone>) => {\n        if (errorPhone) return;\n\n        if (!values.phoneNumber) {\n            setError(t(\"validation.isNumber\"));\n            return;\n        }\n\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.loginPhone({\n                phoneNumber: values.phone || \"\",\n            });\n            const data = res.data as IAuth;\n            if (data) {\n                dispatch(setExternalLogin({ type: enumExternalMethod.TEL, isSignUp: false }));\n                window.sessionStorage.setItem(\"phoneNumber\", values?.phone || \"\");\n                window.sessionStorage.setItem(\"remember\", (remember || \"\").toString());\n                history.push(PATH_SIGN_UP_OTP);\n            }\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const { values, handleSubmit, isSubmitting, setFieldTouched, setFieldValue } = useFormik({\n        initialValues: initialValues,\n        onSubmit: handleRegister,\n    });\n\n    return (\n        <ComponentSignInTel\n            values={values}\n            handleSubmit={handleSubmit}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errorPhone={errorPhone || \"\"}\n            setError={setError}\n        />\n    );\n});\n"]},"metadata":{},"sourceType":"module"}