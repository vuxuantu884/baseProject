{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport queryString from \"querystring\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { enumExternalAuthType, enumExternalMethod, PATH_SIGN_IN, PATH_USER_SETTING } from \"@configs\";\nimport { logout, setExternalLogin } from \"@redux\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PageLineLogin = () => {\n  _s();\n\n  //page hook\n  const dispatch = useDispatch();\n  const history = useHistory(); //page variable\n\n  const queryParams = queryString.parse(window.location.search.substring(1));\n  useEffect(() => {\n    if (queryParams.code) {\n      const lineState = JSON.parse(queryParams === null || queryParams === void 0 ? void 0 : queryParams.state);\n\n      if (lineState.type === enumExternalAuthType.LINK_LINE) {\n        history.push(PATH_USER_SETTING);\n        return;\n      }\n\n      if (queryParams.state) {\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.LINE,\n          isSignUp: false,\n          line: {\n            code: queryParams.code.toString(),\n            state: queryParams.state.toString()\n          }\n        }));\n        history.push(PATH_SIGN_IN);\n      } else {\n        dispatch(logout());\n      }\n    } else {\n      dispatch(logout());\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(PageLineLogin, \"ttHHWC+EsJmhGbpqXwDwA2EruUw=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = PageLineLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageLineLogin\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/authentication/LineLogin.tsx"],"names":["queryString","useEffect","useDispatch","useHistory","enumExternalAuthType","enumExternalMethod","PATH_SIGN_IN","PATH_USER_SETTING","logout","setExternalLogin","PageLineLogin","dispatch","history","queryParams","parse","window","location","search","substring","code","lineState","JSON","state","type","LINK_LINE","push","LINE","isSignUp","line","toString"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SACIC,oBADJ,EAEIC,kBAFJ,EAGIC,YAHJ,EAIIC,iBAJJ,QAKO,UALP;AAMA,SAASC,MAAT,EAAiBC,gBAAjB,QAAyC,QAAzC;;;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGT,UAAU,EAA1B,CAH+B,CAI/B;;AACA,QAAMU,WAAW,GAAGb,WAAW,CAACc,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAiC,CAAjC,CAAlB,CAApB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,WAAW,CAACM,IAAhB,EAAsB;AAClB,YAAMC,SAAS,GAAGC,IAAI,CAACP,KAAL,CAAWD,WAAX,aAAWA,WAAX,uBAAWA,WAAW,CAAES,KAAxB,CAAlB;;AAEA,UAAIF,SAAS,CAACG,IAAV,KAAmBnB,oBAAoB,CAACoB,SAA5C,EAAuD;AACnDZ,QAAAA,OAAO,CAACa,IAAR,CAAalB,iBAAb;AACA;AACH;;AACD,UAAIM,WAAW,CAACS,KAAhB,EAAuB;AACnBX,QAAAA,QAAQ,CACJF,gBAAgB,CAAC;AACbc,UAAAA,IAAI,EAAElB,kBAAkB,CAACqB,IADZ;AAEbC,UAAAA,QAAQ,EAAE,KAFG;AAGbC,UAAAA,IAAI,EAAE;AACFT,YAAAA,IAAI,EAAEN,WAAW,CAACM,IAAZ,CAAiBU,QAAjB,EADJ;AAEFP,YAAAA,KAAK,EAAET,WAAW,CAACS,KAAZ,CAAkBO,QAAlB;AAFL;AAHO,SAAD,CADZ,CAAR;AAUAjB,QAAAA,OAAO,CAACa,IAAR,CAAanB,YAAb;AACH,OAZD,MAYO;AACHK,QAAAA,QAAQ,CAACH,MAAM,EAAP,CAAR;AACH;AACJ,KAtBD,MAsBO;AACHG,MAAAA,QAAQ,CAACH,MAAM,EAAP,CAAR;AACH;AACJ,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,sBAAO,qCAAP;AACH,CApCM;;GAAME,a;UAEQR,W,EACDC,U;;;KAHPO,a","sourcesContent":["import queryString from \"querystring\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport {\n    enumExternalAuthType,\n    enumExternalMethod,\n    PATH_SIGN_IN,\n    PATH_USER_SETTING,\n} from \"@configs\";\nimport { logout, setExternalLogin } from \"@redux\";\nimport { ILineState } from \"@interfaces\";\n\nexport const PageLineLogin = () => {\n    //page hook\n    const dispatch = useDispatch();\n    const history = useHistory();\n    //page variable\n    const queryParams = queryString.parse(window.location.search.substring(1));\n\n    useEffect(() => {\n        if (queryParams.code) {\n            const lineState = JSON.parse(queryParams?.state as string) as ILineState;\n\n            if (lineState.type === enumExternalAuthType.LINK_LINE) {\n                history.push(PATH_USER_SETTING);\n                return;\n            }\n            if (queryParams.state) {\n                dispatch(\n                    setExternalLogin({\n                        type: enumExternalMethod.LINE,\n                        isSignUp: false,\n                        line: {\n                            code: queryParams.code.toString(),\n                            state: queryParams.state.toString(),\n                        },\n                    })\n                );\n                history.push(PATH_SIGN_IN);\n            } else {\n                dispatch(logout());\n            }\n        } else {\n            dispatch(logout());\n        }\n    }, []);\n\n    return <></>;\n};\n"]},"metadata":{},"sourceType":"module"}