{"ast":null,"code":"import{combineReducers}from\"redux\";// import { persistReducer } from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\n// import appReducer from \"./auth\";\nimport appReducer from\"./app\";import merchantReducer from\"./merchant\";import authReducer from\"./auth\";import toastReducer from\"./toast\";// const persistConfig = {\n//     key: \"root\",\n//     storage,\n// };\n// const authPersistedReducer = persistReducer(persistConfig, appReducer);\nexport*from\"./app\";export*from\"./merchant\";export*from\"./auth\";export*from\"./toast\";var productReducer=combineReducers({app:appReducer,merchant:merchantReducer,auth:authReducer,toast:toastReducer});var rootReducer=function rootReducer(state,action){if(action.type===\"RESET\"){// reset state\nstate={};// reset local storage\nlocalStorage.clear();}return productReducer(state,action);};export default rootReducer;","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Redux/Slices/index.ts"],"names":["combineReducers","appReducer","merchantReducer","authReducer","toastReducer","productReducer","app","merchant","auth","toast","rootReducer","state","action","type","localStorage","clear"],"mappings":"AAAA,OAASA,eAAT,KAAgC,OAAhC,CAEA;AACA;AAEA;AACA,MAAOC,CAAAA,UAAP,KAAuB,OAAvB,CACA,MAAOC,CAAAA,eAAP,KAA4B,YAA5B,CACA,MAAOC,CAAAA,WAAP,KAAwB,QAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,SAAzB,CACA;AACA;AACA;AACA;AAEA;AACA,WAAc,OAAd,CACA,WAAc,YAAd,CACA,WAAc,QAAd,CACA,WAAc,SAAd,CAEA,GAAMC,CAAAA,cAAc,CAAGL,eAAe,CAAC,CACnCM,GAAG,CAAEL,UAD8B,CAEnCM,QAAQ,CAAEL,eAFyB,CAGnCM,IAAI,CAAEL,WAH6B,CAInCM,KAAK,CAAEL,YAJ4B,CAAD,CAAtC,CASA,GAAMM,CAAAA,WAAoB,CAAG,QAAvBA,CAAAA,WAAuB,CAACC,KAAD,CAAmBC,MAAnB,CAAyC,CAClE,GAAIA,MAAM,CAACC,IAAP,GAAgB,OAApB,CAA6B,CACzB;AACAF,KAAK,CAAG,EAAR,CACA;AACAG,YAAY,CAACC,KAAb,GACH,CACD,MAAOV,CAAAA,cAAc,CAACM,KAAD,CAAQC,MAAR,CAArB,CACH,CARD,CASA,cAAeF,CAAAA,WAAf","sourcesContent":["import { combineReducers } from \"redux\";\nimport { AnyAction, Reducer } from \"@reduxjs/toolkit\";\n// import { persistReducer } from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\n\n// import appReducer from \"./auth\";\nimport appReducer from \"./app\";\nimport merchantReducer from \"./merchant\";\nimport authReducer from \"./auth\";\nimport toastReducer from \"./toast\";\n// const persistConfig = {\n//     key: \"root\",\n//     storage,\n// };\n\n// const authPersistedReducer = persistReducer(persistConfig, appReducer);\nexport * from \"./app\";\nexport * from \"./merchant\";\nexport * from \"./auth\";\nexport * from \"./toast\";\n\nconst productReducer = combineReducers({\n    app: appReducer,\n    merchant: merchantReducer,\n    auth: authReducer,\n    toast: toastReducer,\n});\n\nexport type RootState = ReturnType<typeof productReducer>;\n\nconst rootReducer: Reducer = (state: RootState, action: AnyAction) => {\n    if (action.type === \"RESET\") {\n        // reset state\n        state = {} as RootState;\n        // reset local storage\n        localStorage.clear();\n    }\n    return productReducer(state, action);\n};\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}