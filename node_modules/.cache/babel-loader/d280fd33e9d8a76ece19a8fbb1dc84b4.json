{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Email.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { ComponentSignInEmail } from \"@components\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setAuth, setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModuleEmailSignIn = props => {\n  _s();\n\n  //page props\n  const {\n    handleForgotPassword\n  } = props; //page hooks\n\n  const {\n    YubEmailSignIn\n  } = useYup();\n  const dispatch = useDispatch();\n  const {\n    error,\n    success\n  } = useNotify();\n  const {\n    t\n  } = useTranslation(); //page state\n\n  const [remember, setRemember] = useState(false); //page variable\n\n  const initialValues = {\n    email: \"\",\n    password: \"\"\n  };\n  const registerSchema = Yup.object().shape(YubEmailSignIn);\n\n  const handleLogin = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    //\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const res = await authApi.login(values);\n      const data = res.data;\n      dispatch(setAuth(data));\n      dispatch(setExternalLogin({\n        type: enumExternalMethod.EMAIL_NOT_SOCIAL\n      }));\n      success(t(\"message.login.success\"));\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleToggleRemember = () => {\n    setRemember(!remember);\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleLogin\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComponentSignInEmail, {\n      handleForgotPassword: handleForgotPassword,\n      handleBlur: handleBlur,\n      handleChange: handleChange,\n      errors: errors,\n      touched: touched,\n      values: values,\n      handleSubmit: handleSubmit,\n      isSubmitting: isSubmitting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ModuleEmailSignIn, \"ROa3u47kA6EIpWmVoJCfTzh1O1k=\", false, function () {\n  return [useYup, useDispatch, useNotify, useTranslation, useFormik];\n});\n\n_c = ModuleEmailSignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleEmailSignIn\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/authentication/Email.tsx"],"names":["useFormik","Yup","useDispatch","useTranslation","ComponentSignInEmail","useYup","authApi","setAuth","setExternalLogin","setLoading","useNotify","enumExternalMethod","useState","ModuleEmailSignIn","props","handleForgotPassword","YubEmailSignIn","dispatch","error","success","t","remember","setRemember","initialValues","email","password","registerSchema","object","shape","handleLogin","values","setSubmitting","res","login","data","type","EMAIL_NOT_SOCIAL","errors","message","response","handleToggleRemember","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit"],"mappings":"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","sourcesContent":["import { useFormik, FormikHelpers } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ComponentSignInEmail } from \"@components\";\nimport { IAuth, ILogin } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { authApi } from \"@api\";\nimport { setAuth, setExternalLogin, setLoading } from \"@redux\";\nimport { useNotify } from \"@utils\";\nimport { enumExternalMethod } from \"@configs\";\nimport { useState } from \"react\";\n\ninterface IProps {\n    handleForgotPassword: () => void;\n}\n\nexport const ModuleEmailSignIn = (props: IProps) => {\n    //page props\n    const { handleForgotPassword } = props;\n    //page hooks\n    const { YubEmailSignIn } = useYup();\n    const dispatch = useDispatch();\n    const { error, success } = useNotify();\n    const { t } = useTranslation();\n\n    //page state\n    const [remember, setRemember] = useState<boolean>(false);\n    //page variable\n    const initialValues: ILogin = {\n        email: \"\",\n        password: \"\",\n    };\n    const registerSchema = Yup.object().shape(YubEmailSignIn);\n\n    const handleLogin = async (values: ILogin, { setSubmitting }: FormikHelpers<ILogin>) => {\n        //\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const res = await authApi.login(values);\n            const data = res.data as IAuth;\n            dispatch(setAuth(data));\n            dispatch(setExternalLogin({ type: enumExternalMethod.EMAIL_NOT_SOCIAL }));\n            success(t(\"message.login.success\"));\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const handleToggleRemember = () => {\n        setRemember(!remember);\n    };\n\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleLogin,\n        });\n    return (\n        <>\n            <ComponentSignInEmail\n                handleForgotPassword={handleForgotPassword}\n                handleBlur={handleBlur}\n                handleChange={handleChange}\n                errors={errors}\n                touched={touched}\n                values={values}\n                handleSubmit={handleSubmit}\n                isSubmitting={isSubmitting}\n            />\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}