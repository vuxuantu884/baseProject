{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Tel.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { ComponentFromTel } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { useYup } from \"@validations\";\nimport { selectAuth, selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleTel = () => {\n  _s();\n\n  var _merchant$signUpSetti;\n\n  //page hook\n  const {\n    t\n  } = useTranslation();\n  const {\n    YubEmailTelUpForm\n  } = useYup();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify(); //redux state\n\n  const merchant = useSelector(selectMerchant);\n  const {\n    userInfo\n  } = useSelector(selectAuth); //page variable\n\n  const contact = userInfo === null || userInfo === void 0 ? void 0 : userInfo.contact;\n  const dateCurrent = new Date((contact === null || contact === void 0 ? void 0 : contact.dateOfBirth) || \"\");\n  const daySelects = DAYS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const monthSelects = MONTHS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  });\n  const yearSelects = YEARS.map(item => {\n    return {\n      id: item,\n      label: item\n    };\n  }); //page state\n\n  const [date, setDate] = useState({\n    day: (dateCurrent.getDate() || \"\").toString(),\n    month: (dateCurrent.getMonth() + 1 || \"\").toString(),\n    year: (dateCurrent.getFullYear() || \"\").toString(),\n    error: \"\"\n  });\n  const [surveyQuestions, setSurveyQuestions] = useState([]);\n  const initialValues = {\n    fullName: (contact === null || contact === void 0 ? void 0 : contact.fullName) || \"\",\n    dateOfBirth: \"\",\n    acceptTermsAndConditions: false\n  };\n  const registerSchema = Yup.object().shape(YubEmailTelUpForm);\n  const fields = (_merchant$signUpSetti = merchant.signUpSettings) === null || _merchant$signUpSetti === void 0 ? void 0 : _merchant$signUpSetti.fields;\n  useEffect(() => {\n    const data = (fields === null || fields === void 0 ? void 0 : fields.map(field => {\n      return {\n        questionId: field._id || \"\",\n        question: field.fieldName || \"\",\n        answers: [],\n        propertyName: field.propertyName\n      };\n    })) || [];\n    setSurveyQuestions([...data]);\n  }, []);\n\n  const handleChangeDay = value => {\n    setDate({ ...date,\n      day: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeMonth = value => {\n    setDate({ ...date,\n      month: value,\n      error: \"\"\n    });\n  };\n\n  const handleChangeYear = value => {\n    setDate({ ...date,\n      year: value,\n      error: \"\"\n    });\n  };\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n\n    if (!date.day || !date.month || !date.year) {\n      setDate({ ...date,\n        error: t(\"validation.is_required\")\n      });\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      dispatch(setLoading(true));\n      const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n      const res = await authApi.createPassword({ ...values,\n        dateOfBirth: dateForm,\n        surveyQuestions\n      });\n\n      if (res) {\n        success(t(\"message.sign_up.success\"));\n        dispatch(setExternalLogin({\n          type: enumExternalMethod.TEL,\n          isSignUp: false\n        }));\n        history.push(PATH_HOME);\n      }\n    } catch (errors) {\n      const errorsResponse = errors.response.data.errors;\n\n      if (Array.isArray(errorsResponse) && errorsResponse.length) {\n        error(errorsResponse[0]);\n      } else {\n        error(t(\"message.sign_up.fail\"));\n      }\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    }\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleRegister\n  });\n\n  const handleChangeAnswerByIndex = (answer, index) => {\n    if (Array.isArray(answer)) {\n      surveyQuestions[index].answers = answer;\n    } else {\n      surveyQuestions[index].answers = [answer];\n    }\n\n    setSurveyQuestions([...surveyQuestions]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComponentFromTel, {\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    errors: errors,\n    touched: touched,\n    values: values,\n    isSubmitting: isSubmitting,\n    handleSubmit: handleSubmit,\n    days: daySelects,\n    months: monthSelects,\n    years: yearSelects,\n    onChangeDay: handleChangeDay,\n    onChangeMonth: handleChangeMonth,\n    onChangeYear: handleChangeYear,\n    date: date,\n    surveyQuestions: surveyQuestions,\n    handleChangeAnswerByIndex: handleChangeAnswerByIndex\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleTel, \"hyGhAKL3JHroYhuwcnxt177cooU=\", false, function () {\n  return [useTranslation, useYup, useDispatch, useHistory, useNotify, useSelector, useSelector, useFormik];\n});\n\n_c = ModuleTel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleTel\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/tel/Tel.tsx"],"names":["useEffect","useState","useTranslation","useFormik","Yup","useDispatch","useSelector","useHistory","ComponentFromTel","DAYS","enumExternalMethod","MONTHS","PATH_HOME","YEARS","useYup","selectAuth","selectMerchant","setExternalLogin","setLoading","authApi","useNotify","ModuleTel","t","YubEmailTelUpForm","dispatch","history","error","success","merchant","userInfo","contact","dateCurrent","Date","dateOfBirth","daySelects","map","item","id","label","monthSelects","yearSelects","date","setDate","day","getDate","toString","month","getMonth","year","getFullYear","surveyQuestions","setSurveyQuestions","initialValues","fullName","acceptTermsAndConditions","registerSchema","object","shape","fields","signUpSettings","data","field","questionId","_id","question","fieldName","answers","propertyName","handleChangeDay","value","handleChangeMonth","handleChangeYear","handleRegister","values","setSubmitting","dateForm","res","createPassword","type","TEL","isSignUp","push","errors","errorsResponse","response","Array","isArray","length","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit","handleChangeAnswerByIndex","answer","index"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormikHelpers, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport { ComponentFromTel } from \"@components\";\nimport { DAYS, enumExternalMethod, MONTHS, PATH_HOME, YEARS } from \"@configs\";\nimport { IDate, IEmailForm, ISelect, ISurveyQuestions } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { selectAuth, selectMerchant, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\n\nexport const ModuleTel = () => {\n    //page hook\n    const { t } = useTranslation();\n    const { YubEmailTelUpForm } = useYup();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { error, success } = useNotify();\n    //redux state\n    const merchant = useSelector(selectMerchant);\n    const { userInfo } = useSelector(selectAuth);\n    //page variable\n    const contact = userInfo?.contact;\n    const dateCurrent = new Date(contact?.dateOfBirth || \"\");\n    const daySelects: ISelect[] = DAYS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const monthSelects: ISelect[] = MONTHS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    const yearSelects: ISelect[] = YEARS.map((item) => {\n        return {\n            id: item,\n            label: item,\n        };\n    });\n    //page state\n    const [date, setDate] = useState<IDate>({\n        day: (dateCurrent.getDate() || \"\").toString(),\n        month: (dateCurrent.getMonth() + 1 || \"\").toString(),\n        year: (dateCurrent.getFullYear() || \"\").toString(),\n        error: \"\",\n    });\n    const [surveyQuestions, setSurveyQuestions] = useState<ISurveyQuestions[]>([]);\n\n    const initialValues: IEmailForm = {\n        fullName: contact?.fullName || \"\",\n        dateOfBirth: \"\",\n        acceptTermsAndConditions: false,\n    };\n    const registerSchema = Yup.object().shape(YubEmailTelUpForm);\n    const fields = merchant.signUpSettings?.fields;\n    useEffect(() => {\n        const data: ISurveyQuestions[] =\n            fields?.map((field) => {\n                return {\n                    questionId: field._id || \"\",\n                    question: field.fieldName || \"\",\n                    answers: [],\n                    propertyName: field.propertyName,\n                };\n            }) || [];\n        setSurveyQuestions([...data]);\n    }, []);\n\n    const handleChangeDay = (value: string) => {\n        setDate({\n            ...date,\n            day: value,\n            error: \"\",\n        });\n    };\n    const handleChangeMonth = (value: string) => {\n        setDate({\n            ...date,\n            month: value,\n            error: \"\",\n        });\n    };\n    const handleChangeYear = (value: string) => {\n        setDate({\n            ...date,\n            year: value,\n            error: \"\",\n        });\n    };\n\n    const handleRegister = async (\n        values: IEmailForm,\n        { setSubmitting }: FormikHelpers<IEmailForm>\n    ) => {\n        if (!date.day || !date.month || !date.year) {\n            setDate({\n                ...date,\n                error: t(\"validation.is_required\"),\n            });\n            return;\n        }\n\n        try {\n            setSubmitting(true);\n            dispatch(setLoading(true));\n            const dateForm = new Date(date.day + \"/\" + date.month + \"/\" + date.year);\n            const res = await authApi.createPassword({\n                ...values,\n                dateOfBirth: dateForm,\n                surveyQuestions,\n            });\n            if (res) {\n                success(t(\"message.sign_up.success\"));\n                dispatch(setExternalLogin({ type: enumExternalMethod.TEL, isSignUp: false }));\n                history.push(PATH_HOME);\n            }\n        } catch (errors: any) {\n            const errorsResponse = errors.response.data.errors;\n            if (Array.isArray(errorsResponse) && errorsResponse.length) {\n                error(errorsResponse[0]);\n            } else {\n                error(t(\"message.sign_up.fail\"));\n            }\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n    };\n\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleRegister,\n        });\n\n    const handleChangeAnswerByIndex = (answer: string | string[], index: number) => {\n        if (Array.isArray(answer)) {\n            surveyQuestions[index].answers = answer;\n        } else {\n            surveyQuestions[index].answers = [answer];\n        }\n        setSurveyQuestions([...surveyQuestions]);\n    };\n\n    return (\n        <ComponentFromTel\n            handleBlur={handleBlur}\n            handleChange={handleChange}\n            errors={errors}\n            touched={touched}\n            values={values}\n            isSubmitting={isSubmitting}\n            handleSubmit={handleSubmit}\n            days={daySelects}\n            months={monthSelects}\n            years={yearSelects}\n            onChangeDay={handleChangeDay}\n            onChangeMonth={handleChangeMonth}\n            onChangeYear={handleChangeYear}\n            date={date}\n            surveyQuestions={surveyQuestions}\n            handleChangeAnswerByIndex={handleChangeAnswerByIndex}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}