{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/ResetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport { useFormik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { ComponentPassword } from \"@components\";\nimport { useYup } from \"@validations\";\nimport { setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModuleResetPassword = props => {\n  _s();\n\n  //page props\n  const {\n    email,\n    resetPasswordId\n  } = props; //page hook\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    YubResetPassword\n  } = useYup();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify(); //page variable\n\n  const initialValues = {\n    password: \"\",\n    conformPassword: \"\"\n  };\n  const registerSchema = Yup.object().shape(YubResetPassword);\n\n  const handleRegister = async (values, _ref) => {\n    let {\n      setSubmitting\n    } = _ref;\n    console.log(values);\n\n    try {\n      const res = await authApi.resetPassword({\n        password: values.password,\n        email,\n        resetPasswordId\n      });\n      console.log(res);\n      setSubmitting(true);\n      dispatch(setLoading(true));\n    } catch (errors) {\n      const errorsResponse = errors.response.data.errors;\n\n      if (Array.isArray(errorsResponse) && errorsResponse.length) {\n        error(errorsResponse[0]);\n      } else {\n        error(t(\"message.sign_up.fail\"));\n      }\n    } finally {\n      setSubmitting(false);\n      dispatch(setLoading(false));\n    } //\n\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    errors,\n    touched\n  } = useFormik({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: handleRegister\n  });\n  return /*#__PURE__*/_jsxDEV(ComponentPassword, {\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    errors: errors,\n    touched: touched,\n    values: values,\n    handleSubmit: handleSubmit,\n    isSubmitting: isSubmitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModuleResetPassword, \"J0uPCnLTWKq7UfNJrhaFiYKhXiw=\", false, function () {\n  return [useTranslation, useYup, useDispatch, useHistory, useNotify, useFormik];\n});\n\n_c = ModuleResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModuleResetPassword\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Modules/ResetPassword.tsx"],"names":["useFormik","useTranslation","Yup","useDispatch","useHistory","ComponentPassword","useYup","setLoading","authApi","useNotify","ModuleResetPassword","props","email","resetPasswordId","t","YubResetPassword","dispatch","history","error","success","initialValues","password","conformPassword","registerSchema","object","shape","handleRegister","values","setSubmitting","console","log","res","resetPassword","errors","errorsResponse","response","data","Array","isArray","length","handleChange","handleBlur","handleSubmit","isSubmitting","touched","validationSchema","onSubmit"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\nimport { FormikHelpers, useFormik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router\";\n\nimport { StyledSignUp, ComponentPassword } from \"@components\";\nimport { IResetPassword } from \"@interfaces\";\nimport { useYup } from \"@validations\";\nimport { selectAuth, setExternalLogin, setLoading } from \"@redux\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\n\ninterface IProps {\n    email: string;\n    resetPasswordId: string;\n}\n\nexport const ModuleResetPassword = (props: IProps) => {\n    //page props\n    const { email, resetPasswordId } = props;\n    //page hook\n    const { t } = useTranslation();\n    const { YubResetPassword } = useYup();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { error, success } = useNotify();\n\n    //page variable\n    const initialValues: IResetPassword = {\n        password: \"\",\n        conformPassword: \"\",\n    };\n    const registerSchema = Yup.object().shape(YubResetPassword);\n\n    const handleRegister = async (\n        values: IResetPassword,\n        { setSubmitting }: FormikHelpers<IResetPassword>\n    ) => {\n        console.log(values);\n        try {\n            const res = await authApi.resetPassword({\n                password: values.password,\n                email,\n                resetPasswordId,\n            });\n            console.log(res);\n            setSubmitting(true);\n            dispatch(setLoading(true));\n        } catch (errors: any) {\n            const errorsResponse = errors.response.data.errors;\n            if (Array.isArray(errorsResponse) && errorsResponse.length) {\n                error(errorsResponse[0]);\n            } else {\n                error(t(\"message.sign_up.fail\"));\n            }\n        } finally {\n            setSubmitting(false);\n            dispatch(setLoading(false));\n        }\n        //\n    };\n\n    const { values, handleChange, handleBlur, handleSubmit, isSubmitting, errors, touched } =\n        useFormik({\n            initialValues: initialValues,\n            validationSchema: registerSchema,\n            onSubmit: handleRegister,\n        });\n\n    return (\n        <ComponentPassword\n            handleBlur={handleBlur}\n            handleChange={handleChange}\n            errors={errors}\n            touched={touched}\n            values={values}\n            handleSubmit={handleSubmit}\n            isSubmitting={isSubmitting}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}