{"ast":null,"code":"var _jsxFileName = \"/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/authentication/Otp.tsx\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { ComponentHeaderAuth, ComponentSignUpOTP } from \"@components\";\nimport { selectAuth, setAuth, setLoading } from \"@redux\";\nimport { enumExternalMethod, enumValidation, PATH_SIGN_UP, TIME_RESEND } from \"@configs\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PageSignUpOTP = () => {\n  _s();\n\n  //page hook\n  const history = useHistory();\n  const {\n    error,\n    success\n  } = useNotify();\n  const dispatch = useDispatch(); //page state\n\n  const [otp, setOtp] = useState(\"\");\n  const [timeResend, setTimeResend] = useState(TIME_RESEND); //redux state\n\n  const {\n    externalLogin\n  } = useSelector(selectAuth); //page variable\n\n  const phoneNumber = window.sessionStorage.getItem(\"phoneNumber\") || \"\";\n  const remember = window.sessionStorage.getItem(\"remember\");\n  useEffect(() => {\n    if (externalLogin !== enumExternalMethod.TEL) {\n      history.push(PATH_SIGN_UP);\n    }\n  }, []);\n\n  const handleChangeOtp = otp => {\n    setOtp(otp);\n  };\n\n  const handleVerifyOtp = async () => {\n    if (otp.length < enumValidation.LENTH_OTP) return;\n\n    try {\n      dispatch(setLoading(true));\n      const res = await authApi.verifyPhone({\n        phoneNumber,\n        code: otp\n      });\n      const data = res.data.token;\n      const message = res.data.message;\n\n      if (remember) {\n        dispatch(setAuth(data));\n      } else {\n        dispatch(setAuth({ ...data,\n          refreshToken: null\n        }));\n      }\n\n      success(message);\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  const handleResend = async () => {\n    if (timeResend !== TIME_RESEND) return;\n\n    try {\n      dispatch(setLoading(true));\n      const res = await authApi.resendPhone({\n        phoneNumber\n      });\n\n      if (res.data.message) {\n        success(res.data.message);\n        let currentTime = timeResend;\n        const id = setInterval(() => {\n          currentTime = currentTime - 1;\n          setTimeResend(() => currentTime);\n\n          if (currentTime === 0) {\n            setTimeResend(TIME_RESEND);\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    } catch (errors) {\n      const {\n        message\n      } = errors.response.data;\n      error(message);\n    } finally {\n      dispatch(setLoading(false));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComponentHeaderAuth, {\n    children: /*#__PURE__*/_jsxDEV(ComponentSignUpOTP, {\n      handleVerifyOtp: handleVerifyOtp,\n      handleChangeOtp: handleChangeOtp,\n      handleResend: handleResend,\n      otp: otp,\n      timeResend: timeResend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PageSignUpOTP, \"NzRLDOkS8tP5DyWqzFGzmae6rXs=\", false, function () {\n  return [useHistory, useNotify, useDispatch, useSelector];\n});\n\n_c = PageSignUpOTP;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageSignUpOTP\");","map":{"version":3,"sources":["/home/vuxuantu/Desktop/rewarding-platform-client/src/Pages/authentication/Otp.tsx"],"names":["useDispatch","useSelector","useEffect","useState","useHistory","ComponentHeaderAuth","ComponentSignUpOTP","selectAuth","setAuth","setLoading","enumExternalMethod","enumValidation","PATH_SIGN_UP","TIME_RESEND","authApi","useNotify","PageSignUpOTP","history","error","success","dispatch","otp","setOtp","timeResend","setTimeResend","externalLogin","phoneNumber","window","sessionStorage","getItem","remember","TEL","push","handleChangeOtp","handleVerifyOtp","length","LENTH_OTP","res","verifyPhone","code","data","token","message","refreshToken","errors","response","handleResend","resendPhone","currentTime","id","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nimport { ComponentHeaderAuth, ComponentSignUpOTP } from \"@components\";\nimport { selectAuth, setAuth, setLoading } from \"@redux\";\nimport { enumExternalMethod, enumValidation, PATH_SIGN_UP, TIME_RESEND } from \"@configs\";\nimport { authApi } from \"@api\";\nimport { useNotify } from \"@utils\";\nimport { IAuth } from \"@interfaces\";\nimport { PageUserDetail } from \"@pages\";\n\nexport const PageSignUpOTP = () => {\n    //page hook\n    const history = useHistory();\n    const { error, success } = useNotify();\n    const dispatch = useDispatch();\n    //page state\n    const [otp, setOtp] = useState<string>(\"\");\n    const [timeResend, setTimeResend] = useState<number>(TIME_RESEND);\n    //redux state\n    const { externalLogin } = useSelector(selectAuth);\n    //page variable\n    const phoneNumber = window.sessionStorage.getItem(\"phoneNumber\") || \"\";\n    const remember = window.sessionStorage.getItem(\"remember\");\n\n    useEffect(() => {\n        if (externalLogin !== enumExternalMethod.TEL) {\n            history.push(PATH_SIGN_UP);\n        }\n    }, []);\n\n    const handleChangeOtp = (otp: string) => {\n        setOtp(otp);\n    };\n\n    const handleVerifyOtp = async () => {\n        if (otp.length < enumValidation.LENTH_OTP) return;\n        try {\n            dispatch(setLoading(true));\n            const res = await authApi.verifyPhone({\n                phoneNumber,\n                code: otp,\n            });\n            const data = res.data.token as IAuth;\n            const message = res.data.message;\n            if (remember) {\n                dispatch(setAuth(data));\n            } else {\n                dispatch(setAuth({ ...data, refreshToken: null }));\n            }\n            success(message);\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            dispatch(setLoading(false));\n        }\n    };\n\n    const handleResend = async () => {\n        if (timeResend !== TIME_RESEND) return;\n        try {\n            dispatch(setLoading(true));\n            const res = await authApi.resendPhone({\n                phoneNumber,\n            });\n            if (res.data.message) {\n                success(res.data.message);\n                let currentTime = timeResend;\n                const id = setInterval(() => {\n                    currentTime = currentTime - 1;\n                    setTimeResend(() => currentTime);\n                    if (currentTime === 0) {\n                        setTimeResend(TIME_RESEND);\n                        clearInterval(id);\n                    }\n                }, 1000);\n            }\n        } catch (errors: any) {\n            const { message } = errors.response.data;\n            error(message);\n        } finally {\n            dispatch(setLoading(false));\n        }\n    };\n\n    return (\n        <ComponentHeaderAuth>\n            <ComponentSignUpOTP\n                handleVerifyOtp={handleVerifyOtp}\n                handleChangeOtp={handleChangeOtp}\n                handleResend={handleResend}\n                otp={otp}\n                timeResend={timeResend}\n            />\n        </ComponentHeaderAuth>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}