export function createDispatcher(): {
    /**
     * call a fuction in scope of bluetooth
     * @param {string} name
     * @param {object} params
     * @param {function} successCallback
     * @param {function} errorCallback
     */
    call(name: string, params: object, successCallback: Function, errorCallback: Function, options?: {
        once: boolean;
    }): any;
    /**
     * event listener for blutooth
     * @param {*} eventName
     * @param {*} callback
     * @param {*} options
     */
    addListener(eventName: any, callback: any, options: any): void;
    /**
     * remove an event listener
     * @param {string} eventName
     * @param {function} callback
     */
    removeListener(eventName: string, callback: Function): void;
};
declare namespace _default {
    /**
     * call a fuction in scope of bluetooth
     * @param {string} name
     * @param {object} params
     * @param {function} successCallback
     * @param {function} errorCallback
     */
    function call(name: string, params: any, successCallback: Function, errorCallback: Function, options?: {
        once: boolean;
    }): any;
    /**
     * call a fuction in scope of bluetooth
     * @param {string} name
     * @param {object} params
     * @param {function} successCallback
     * @param {function} errorCallback
     */
    function call(name: string, params: any, successCallback: Function, errorCallback: Function, options?: {
        once: boolean;
    }): any;
    /**
     * event listener for blutooth
     * @param {*} eventName
     * @param {*} callback
     * @param {*} options
     */
    function addListener(eventName: any, callback: any, options: any): void;
    /**
     * event listener for blutooth
     * @param {*} eventName
     * @param {*} callback
     * @param {*} options
     */
    function addListener(eventName: any, callback: any, options: any): void;
    /**
     * remove an event listener
     * @param {string} eventName
     * @param {function} callback
     */
    function removeListener(eventName: string, callback: Function): void;
    /**
     * remove an event listener
     * @param {string} eventName
     * @param {function} callback
     */
    function removeListener(eventName: string, callback: Function): void;
}
export default _default;
