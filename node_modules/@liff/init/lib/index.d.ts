import { Config } from '@liff/types';
import { LiffModule, ModuleDriver, ModuleContext } from '@liff/use';
import type { LiffInstance } from './types';
declare type Init = (config: Config, successCallback?: () => void, errorCallback?: (error: Error) => void) => Promise<void>;
export declare type ExtendLiffCore = {
    init: Init;
};
export declare class InitModule implements LiffModule<Init> {
    private moduleDriver;
    private liff;
    constructor(moduleDriver: ModuleDriver);
    get name(): string;
    install({ liff }: ModuleContext<LiffInstance>): Init;
    /**
     * Initializes a LIFF app.
     * You can only call other LIFF SDK methods after calling liff.init().
     * The LIFF SDK gets access tokens and ID tokens from the LINE platform
     * when you initialize the LIFF app.
     * @export
     * @param { liffId: string } config
     * @param {Function} [successCallback]
     * @param {Function} [errorCallback]
     * @returns {Promise<any>}
     */
    init(config: Config, successCallback?: () => void, errorCallback?: (error: Error) => void): Promise<void>;
}
export {};
