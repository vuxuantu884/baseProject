export declare type SyncHookFunc<T extends readonly unknown[] = readonly unknown[]> = (...args: T) => void;
export declare type AsyncHookFunc<T extends readonly unknown[] = readonly unknown[]> = (...args: T) => Promise<void>;
export declare type HookFunc<T extends readonly unknown[] = readonly unknown[]> = SyncHookFunc<T> | AsyncHookFunc<T>;
export declare type AsyncHooks = {
    [key: string]: HookFunc;
};
export declare type SyncHooks = {
    [key: string]: SyncHookFunc;
};
export declare type Hooks = {
    [key: string]: HookFunc | SyncHookFunc;
};
export declare type ModuleNamespace<T> = T;
export interface LiffModule<T = unknown, U = unknown, Liff = unknown> {
    install(context: ModuleContext<Liff>, options?: U): ModuleNamespace<T>;
    readonly name: string;
}
export interface ModuleDriver<T extends Hooks = Hooks> {
    addHooks<U extends T>(hooks: U): void;
    addModule(module: LiffModule): void;
    hasModule(module: LiffModule): boolean;
    runHook<U extends T>(hookName: keyof U, ...args: Parameters<U[keyof U]>): Promise<void>;
    runSyncHook<U extends T>(hookName: keyof U, ...args: Parameters<U[keyof U]>): void;
}
export interface ModuleContext<Liff = unknown> {
    addHooks<T extends Hooks = Hooks>(hooks: T): void;
    liff: Liff;
}
export interface LiffPluginContext<Liff> {
    liff: Liff;
}
export interface LiffPlugin<T = unknown, U = unknown, Liff = unknown> {
    install(context: LiffPluginContext<Liff>, options?: U): T;
    readonly name: string;
}
