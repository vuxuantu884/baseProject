import { ModuleDriver, ModuleContext, LiffModule } from './types';
declare type Use = <T = unknown, U = unknown, V = unknown>(this: V, module: LiffModule<T, U>, option?: U) => V;
declare type Option = {
    namespacePrefix?: string;
};
export declare type ExtendLiffCore = {
    use: Use;
};
export declare class UseModule<Liff> implements LiffModule<Use> {
    private driver;
    private context;
    private option?;
    constructor(driver: ModuleDriver, context: ModuleContext<Liff>, option?: Option | undefined);
    install(): Use;
    get name(): string;
    private get defaultOption();
    private factory;
}
export {};
